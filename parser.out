Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOLLAR
    ERROR
    EXP
    FOR
    IDENTICAL
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    PHP_CLOSE
    PHP_OPEN
    RBRACKET
    RETURN
    STATIC
    THROW

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> print_error
Rule 3     statement -> declaration SEMI
Rule 4     statement -> input SEMI
Rule 5     statement -> expression SEMI
Rule 6     statement -> object_declaration
Rule 7     statement -> class_declaration
Rule 8     statement -> array_declaration SEMI
Rule 9     statement -> property_declaration SEMI
Rule 10    statement -> function_statement
Rule 11    statement -> function_variable
Rule 12    statement -> function_anonymous
Rule 13    statement -> function_arrow
Rule 14    statement -> while
Rule 15    statement -> constant_declaration
Rule 16    statement -> constant_use
Rule 17    statement -> try_catch
Rule 18    statement -> catch_item
Rule 19    statement -> if
Rule 20    statement -> empty
Rule 21    statements -> statement statements
Rule 22    statements -> statement
Rule 23    declaration -> VARIABLE SET value
Rule 24    declaration -> VARIABLE SET STRING
Rule 25    declaration -> VARIABLE SET expression
Rule 26    declaration -> VARIABLE SET condition
Rule 27    function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 28    while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 29    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 30    print -> ECHO LPAREN value RPAREN
Rule 31    print -> ECHO value
Rule 32    print -> ECHO LPAREN STRING RPAREN
Rule 33    print -> ECHO STRING
Rule 34    print_error -> ECHO error
Rule 35    input -> VARIABLE SET READLINE LPAREN STRING RPAREN
Rule 36    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 37    array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN
Rule 38    array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN
Rule 39    arrayArg -> index ARROW value
Rule 40    arrayArg -> index ARROW value arrayArg
Rule 41    arrayArg -> index ARROW value COMMA arrayArg
Rule 42    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
Rule 43    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
Rule 44    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
Rule 45    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 46    else -> ELSE LBRACE statements RBRACE SEMI
Rule 47    condition -> value comparison_operator value
Rule 48    conditions -> LBRACE condition RBRACE logical_operator conditions
Rule 49    conditions -> LBRACE condition RBRACE
Rule 50    index -> INTEGER
Rule 51    index -> STRING
Rule 52    function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 53    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
Rule 54    comparison_operator -> LT
Rule 55    comparison_operator -> GT
Rule 56    comparison_operator -> LE
Rule 57    comparison_operator -> GE
Rule 58    comparison_operator -> EQ
Rule 59    comparison_operator -> NE
Rule 60    value -> VARIABLE
Rule 61    value -> INTEGER
Rule 62    value -> constant_use
Rule 63    value -> FLOAT
Rule 64    operator -> PLUS
Rule 65    operator -> MINUS
Rule 66    operator -> TIMES
Rule 67    operator -> DIVIDE
Rule 68    expression -> value operator value
Rule 69    expression -> value
Rule 70    expressions -> expression COMMA expressions
Rule 71    expressions -> expression
Rule 72    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 73    class_body -> class_member_list
Rule 74    class_member_list -> class_member class_member_list
Rule 75    class_member_list -> class_member
Rule 76    class_member -> property_declaration
Rule 77    class_member -> method_declaration
Rule 78    class_member -> constructor_declaration
Rule 79    constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI
Rule 80    constant_declaration -> CONST IDENTIFIER SET expression SEMI
Rule 81    constant_use -> IDENTIFIER
Rule 82    try_catch -> TRY LBRACE statements RBRACE catch_list
Rule 83    catch_list -> catch_item catch_list
Rule 84    catch_list -> empty
Rule 85    catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
Rule 86    catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
Rule 87    property_declaration -> visibility VARIABLE
Rule 88    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 89    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 90    visibility -> PUBLIC
Rule 91    visibility -> PROTECTED
Rule 92    visibility -> PRIVATE
Rule 93    parameters -> parameter COMMA parameters
Rule 94    parameters -> parameter
Rule 95    parameters -> IDENTIFIER
Rule 96    parameters -> empty
Rule 97    parameter -> TYPE VARIABLE
Rule 98    parameter -> VARIABLE
Rule 99    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif
Rule 100   elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 101   function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
Rule 102   use_clause_opt -> USE LPAREN variables RPAREN
Rule 103   variables -> VARIABLE COMMA variables
Rule 104   variables -> VARIABLE
Rule 105   logical_operator -> AND
Rule 106   logical_operator -> OR
Rule 107   empty -> <empty>

Terminals, with rules where they appear

AND                  : 105
ARRAY                : 37 38
ARROW                : 39 40 41 52 53
CATCH                : 85 86
CLASS                : 36 72
COMMA                : 41 70 79 93 103
COMMENT              : 
CONST                : 80
CONSTRUCT            : 89
DEFINE               : 79
DIVIDE               : 67
DOLLAR               : 
ECHO                 : 30 31 32 33 34
ELSE                 : 46
ELSEIF               : 99 100
EQ                   : 58
ERROR                : 
EXCEPTION            : 85 86
EXP                  : 
FLOAT                : 63
FOR                  : 
FUNCTION             : 27 29 52 53 88 89 101
GE                   : 57
GT                   : 55
IDENTICAL            : 
IDENTIFIER           : 27 72 80 81 88 95
IF                   : 42 43 44 45
INTEGER              : 50 61
LBRACE               : 27 28 29 42 43 44 45 46 48 49 72 82 85 86 88 89 99 100 101
LBRACKET             : 
LE                   : 56
LPAREN               : 27 28 29 30 32 35 36 37 38 42 43 44 45 52 53 79 85 86 88 89 99 100 101 102
LT                   : 54
MINUS                : 65
MOD                  : 
NE                   : 59
NEW                  : 36
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 106
PHP_CLOSE            : 
PHP_OPEN             : 
PLUS                 : 64
PRIVATE              : 92
PROTECTED            : 91
PUBLIC               : 90
RBRACE               : 27 28 29 42 43 44 45 46 48 49 72 82 85 86 88 89 99 100 101
RBRACKET             : 
READLINE             : 35
RETURN               : 
RPAREN               : 27 28 29 30 32 35 36 37 38 42 43 44 45 52 53 79 85 86 88 89 99 100 101 102
SEMI                 : 1 3 4 5 8 9 36 42 43 46 52 79 80
SET                  : 23 24 25 26 35 36 37 38 52 80
STATIC               : 
STRING               : 24 32 33 35 51 79
THROW                : 
TIMES                : 66
TRY                  : 82
TYPE                 : 97
USE                  : 102
VAR                  : 36
VARIABLE             : 23 24 25 26 29 35 36 37 38 52 52 53 60 85 87 97 98 103 104
WHILE                : 28
error                : 34

Nonterminals, with rules where they appear

arrayArg             : 37 40 41
array_declaration    : 8
catch_item           : 18 83
catch_list           : 82 83
class_body           : 72
class_declaration    : 7
class_member         : 74 75
class_member_list    : 73 74
comparison_operator  : 47
condition            : 26 28 42 44 45 48 49 99 100
conditions           : 43 48
constant_declaration : 15
constant_use         : 16 62
constructor_declaration : 78
declaration          : 3
else                 : 45 100
elseif               : 44 99
empty                : 20 38 84 86 96
expression           : 5 25 52 70 71 79 80
expressions          : 70
function_anonymous   : 12
function_arrow       : 13 53
function_statement   : 10
function_variable    : 11
if                   : 19
index                : 39 40 41
input                : 4
logical_operator     : 48
method_declaration   : 77
object_declaration   : 6
operator             : 68
parameter            : 93 94
parameters           : 27 88 89 93 101
print                : 1
print_error          : 2
property_declaration : 9 76
statement            : 21 22 0
statements           : 21 27 28 29 42 43 44 45 46 82 85 86 88 89 99 100 101
try_catch            : 17
use_clause_opt       : 101
value                : 23 30 31 39 40 41 47 47 68 68 69
variables            : 102 103
visibility           : 27 87 88 89
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    $end            reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statement                      shift and go to state 1
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 41


state 3

    (2) statement -> print_error .

    $end            reduce using rule 2 (statement -> print_error .)
    ECHO            reduce using rule 2 (statement -> print_error .)
    VARIABLE        reduce using rule 2 (statement -> print_error .)
    VAR             reduce using rule 2 (statement -> print_error .)
    CLASS           reduce using rule 2 (statement -> print_error .)
    FUNCTION        reduce using rule 2 (statement -> print_error .)
    WHILE           reduce using rule 2 (statement -> print_error .)
    DEFINE          reduce using rule 2 (statement -> print_error .)
    CONST           reduce using rule 2 (statement -> print_error .)
    IDENTIFIER      reduce using rule 2 (statement -> print_error .)
    TRY             reduce using rule 2 (statement -> print_error .)
    CATCH           reduce using rule 2 (statement -> print_error .)
    IF              reduce using rule 2 (statement -> print_error .)
    INTEGER         reduce using rule 2 (statement -> print_error .)
    FLOAT           reduce using rule 2 (statement -> print_error .)
    PUBLIC          reduce using rule 2 (statement -> print_error .)
    PROTECTED       reduce using rule 2 (statement -> print_error .)
    PRIVATE         reduce using rule 2 (statement -> print_error .)
    RBRACE          reduce using rule 2 (statement -> print_error .)


state 4

    (3) statement -> declaration . SEMI

    SEMI            shift and go to state 42


state 5

    (4) statement -> input . SEMI

    SEMI            shift and go to state 43


state 6

    (5) statement -> expression . SEMI

    SEMI            shift and go to state 44


state 7

    (6) statement -> object_declaration .

    $end            reduce using rule 6 (statement -> object_declaration .)
    ECHO            reduce using rule 6 (statement -> object_declaration .)
    VARIABLE        reduce using rule 6 (statement -> object_declaration .)
    VAR             reduce using rule 6 (statement -> object_declaration .)
    CLASS           reduce using rule 6 (statement -> object_declaration .)
    FUNCTION        reduce using rule 6 (statement -> object_declaration .)
    WHILE           reduce using rule 6 (statement -> object_declaration .)
    DEFINE          reduce using rule 6 (statement -> object_declaration .)
    CONST           reduce using rule 6 (statement -> object_declaration .)
    IDENTIFIER      reduce using rule 6 (statement -> object_declaration .)
    TRY             reduce using rule 6 (statement -> object_declaration .)
    CATCH           reduce using rule 6 (statement -> object_declaration .)
    IF              reduce using rule 6 (statement -> object_declaration .)
    INTEGER         reduce using rule 6 (statement -> object_declaration .)
    FLOAT           reduce using rule 6 (statement -> object_declaration .)
    PUBLIC          reduce using rule 6 (statement -> object_declaration .)
    PROTECTED       reduce using rule 6 (statement -> object_declaration .)
    PRIVATE         reduce using rule 6 (statement -> object_declaration .)
    RBRACE          reduce using rule 6 (statement -> object_declaration .)


state 8

    (7) statement -> class_declaration .

    $end            reduce using rule 7 (statement -> class_declaration .)
    ECHO            reduce using rule 7 (statement -> class_declaration .)
    VARIABLE        reduce using rule 7 (statement -> class_declaration .)
    VAR             reduce using rule 7 (statement -> class_declaration .)
    CLASS           reduce using rule 7 (statement -> class_declaration .)
    FUNCTION        reduce using rule 7 (statement -> class_declaration .)
    WHILE           reduce using rule 7 (statement -> class_declaration .)
    DEFINE          reduce using rule 7 (statement -> class_declaration .)
    CONST           reduce using rule 7 (statement -> class_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> class_declaration .)
    TRY             reduce using rule 7 (statement -> class_declaration .)
    CATCH           reduce using rule 7 (statement -> class_declaration .)
    IF              reduce using rule 7 (statement -> class_declaration .)
    INTEGER         reduce using rule 7 (statement -> class_declaration .)
    FLOAT           reduce using rule 7 (statement -> class_declaration .)
    PUBLIC          reduce using rule 7 (statement -> class_declaration .)
    PROTECTED       reduce using rule 7 (statement -> class_declaration .)
    PRIVATE         reduce using rule 7 (statement -> class_declaration .)
    RBRACE          reduce using rule 7 (statement -> class_declaration .)


state 9

    (8) statement -> array_declaration . SEMI

    SEMI            shift and go to state 45


state 10

    (9) statement -> property_declaration . SEMI

    SEMI            shift and go to state 46


state 11

    (10) statement -> function_statement .

    $end            reduce using rule 10 (statement -> function_statement .)
    ECHO            reduce using rule 10 (statement -> function_statement .)
    VARIABLE        reduce using rule 10 (statement -> function_statement .)
    VAR             reduce using rule 10 (statement -> function_statement .)
    CLASS           reduce using rule 10 (statement -> function_statement .)
    FUNCTION        reduce using rule 10 (statement -> function_statement .)
    WHILE           reduce using rule 10 (statement -> function_statement .)
    DEFINE          reduce using rule 10 (statement -> function_statement .)
    CONST           reduce using rule 10 (statement -> function_statement .)
    IDENTIFIER      reduce using rule 10 (statement -> function_statement .)
    TRY             reduce using rule 10 (statement -> function_statement .)
    CATCH           reduce using rule 10 (statement -> function_statement .)
    IF              reduce using rule 10 (statement -> function_statement .)
    INTEGER         reduce using rule 10 (statement -> function_statement .)
    FLOAT           reduce using rule 10 (statement -> function_statement .)
    PUBLIC          reduce using rule 10 (statement -> function_statement .)
    PROTECTED       reduce using rule 10 (statement -> function_statement .)
    PRIVATE         reduce using rule 10 (statement -> function_statement .)
    RBRACE          reduce using rule 10 (statement -> function_statement .)


state 12

    (11) statement -> function_variable .

    $end            reduce using rule 11 (statement -> function_variable .)
    ECHO            reduce using rule 11 (statement -> function_variable .)
    VARIABLE        reduce using rule 11 (statement -> function_variable .)
    VAR             reduce using rule 11 (statement -> function_variable .)
    CLASS           reduce using rule 11 (statement -> function_variable .)
    FUNCTION        reduce using rule 11 (statement -> function_variable .)
    WHILE           reduce using rule 11 (statement -> function_variable .)
    DEFINE          reduce using rule 11 (statement -> function_variable .)
    CONST           reduce using rule 11 (statement -> function_variable .)
    IDENTIFIER      reduce using rule 11 (statement -> function_variable .)
    TRY             reduce using rule 11 (statement -> function_variable .)
    CATCH           reduce using rule 11 (statement -> function_variable .)
    IF              reduce using rule 11 (statement -> function_variable .)
    INTEGER         reduce using rule 11 (statement -> function_variable .)
    FLOAT           reduce using rule 11 (statement -> function_variable .)
    PUBLIC          reduce using rule 11 (statement -> function_variable .)
    PROTECTED       reduce using rule 11 (statement -> function_variable .)
    PRIVATE         reduce using rule 11 (statement -> function_variable .)
    RBRACE          reduce using rule 11 (statement -> function_variable .)


state 13

    (12) statement -> function_anonymous .

    $end            reduce using rule 12 (statement -> function_anonymous .)
    ECHO            reduce using rule 12 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 12 (statement -> function_anonymous .)
    VAR             reduce using rule 12 (statement -> function_anonymous .)
    CLASS           reduce using rule 12 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 12 (statement -> function_anonymous .)
    WHILE           reduce using rule 12 (statement -> function_anonymous .)
    DEFINE          reduce using rule 12 (statement -> function_anonymous .)
    CONST           reduce using rule 12 (statement -> function_anonymous .)
    IDENTIFIER      reduce using rule 12 (statement -> function_anonymous .)
    TRY             reduce using rule 12 (statement -> function_anonymous .)
    CATCH           reduce using rule 12 (statement -> function_anonymous .)
    IF              reduce using rule 12 (statement -> function_anonymous .)
    INTEGER         reduce using rule 12 (statement -> function_anonymous .)
    FLOAT           reduce using rule 12 (statement -> function_anonymous .)
    PUBLIC          reduce using rule 12 (statement -> function_anonymous .)
    PROTECTED       reduce using rule 12 (statement -> function_anonymous .)
    PRIVATE         reduce using rule 12 (statement -> function_anonymous .)
    RBRACE          reduce using rule 12 (statement -> function_anonymous .)


state 14

    (13) statement -> function_arrow .

    $end            reduce using rule 13 (statement -> function_arrow .)
    ECHO            reduce using rule 13 (statement -> function_arrow .)
    VARIABLE        reduce using rule 13 (statement -> function_arrow .)
    VAR             reduce using rule 13 (statement -> function_arrow .)
    CLASS           reduce using rule 13 (statement -> function_arrow .)
    FUNCTION        reduce using rule 13 (statement -> function_arrow .)
    WHILE           reduce using rule 13 (statement -> function_arrow .)
    DEFINE          reduce using rule 13 (statement -> function_arrow .)
    CONST           reduce using rule 13 (statement -> function_arrow .)
    IDENTIFIER      reduce using rule 13 (statement -> function_arrow .)
    TRY             reduce using rule 13 (statement -> function_arrow .)
    CATCH           reduce using rule 13 (statement -> function_arrow .)
    IF              reduce using rule 13 (statement -> function_arrow .)
    INTEGER         reduce using rule 13 (statement -> function_arrow .)
    FLOAT           reduce using rule 13 (statement -> function_arrow .)
    PUBLIC          reduce using rule 13 (statement -> function_arrow .)
    PROTECTED       reduce using rule 13 (statement -> function_arrow .)
    PRIVATE         reduce using rule 13 (statement -> function_arrow .)
    RBRACE          reduce using rule 13 (statement -> function_arrow .)


state 15

    (14) statement -> while .

    $end            reduce using rule 14 (statement -> while .)
    ECHO            reduce using rule 14 (statement -> while .)
    VARIABLE        reduce using rule 14 (statement -> while .)
    VAR             reduce using rule 14 (statement -> while .)
    CLASS           reduce using rule 14 (statement -> while .)
    FUNCTION        reduce using rule 14 (statement -> while .)
    WHILE           reduce using rule 14 (statement -> while .)
    DEFINE          reduce using rule 14 (statement -> while .)
    CONST           reduce using rule 14 (statement -> while .)
    IDENTIFIER      reduce using rule 14 (statement -> while .)
    TRY             reduce using rule 14 (statement -> while .)
    CATCH           reduce using rule 14 (statement -> while .)
    IF              reduce using rule 14 (statement -> while .)
    INTEGER         reduce using rule 14 (statement -> while .)
    FLOAT           reduce using rule 14 (statement -> while .)
    PUBLIC          reduce using rule 14 (statement -> while .)
    PROTECTED       reduce using rule 14 (statement -> while .)
    PRIVATE         reduce using rule 14 (statement -> while .)
    RBRACE          reduce using rule 14 (statement -> while .)


state 16

    (15) statement -> constant_declaration .

    $end            reduce using rule 15 (statement -> constant_declaration .)
    ECHO            reduce using rule 15 (statement -> constant_declaration .)
    VARIABLE        reduce using rule 15 (statement -> constant_declaration .)
    VAR             reduce using rule 15 (statement -> constant_declaration .)
    CLASS           reduce using rule 15 (statement -> constant_declaration .)
    FUNCTION        reduce using rule 15 (statement -> constant_declaration .)
    WHILE           reduce using rule 15 (statement -> constant_declaration .)
    DEFINE          reduce using rule 15 (statement -> constant_declaration .)
    CONST           reduce using rule 15 (statement -> constant_declaration .)
    IDENTIFIER      reduce using rule 15 (statement -> constant_declaration .)
    TRY             reduce using rule 15 (statement -> constant_declaration .)
    CATCH           reduce using rule 15 (statement -> constant_declaration .)
    IF              reduce using rule 15 (statement -> constant_declaration .)
    INTEGER         reduce using rule 15 (statement -> constant_declaration .)
    FLOAT           reduce using rule 15 (statement -> constant_declaration .)
    PUBLIC          reduce using rule 15 (statement -> constant_declaration .)
    PROTECTED       reduce using rule 15 (statement -> constant_declaration .)
    PRIVATE         reduce using rule 15 (statement -> constant_declaration .)
    RBRACE          reduce using rule 15 (statement -> constant_declaration .)


state 17

    (16) statement -> constant_use .
    (62) value -> constant_use .

    $end            reduce using rule 16 (statement -> constant_use .)
    ECHO            reduce using rule 16 (statement -> constant_use .)
    VARIABLE        reduce using rule 16 (statement -> constant_use .)
    VAR             reduce using rule 16 (statement -> constant_use .)
    CLASS           reduce using rule 16 (statement -> constant_use .)
    FUNCTION        reduce using rule 16 (statement -> constant_use .)
    WHILE           reduce using rule 16 (statement -> constant_use .)
    DEFINE          reduce using rule 16 (statement -> constant_use .)
    CONST           reduce using rule 16 (statement -> constant_use .)
    IDENTIFIER      reduce using rule 16 (statement -> constant_use .)
    TRY             reduce using rule 16 (statement -> constant_use .)
    CATCH           reduce using rule 16 (statement -> constant_use .)
    IF              reduce using rule 16 (statement -> constant_use .)
    INTEGER         reduce using rule 16 (statement -> constant_use .)
    FLOAT           reduce using rule 16 (statement -> constant_use .)
    PUBLIC          reduce using rule 16 (statement -> constant_use .)
    PROTECTED       reduce using rule 16 (statement -> constant_use .)
    PRIVATE         reduce using rule 16 (statement -> constant_use .)
    RBRACE          reduce using rule 16 (statement -> constant_use .)
    PLUS            reduce using rule 62 (value -> constant_use .)
    MINUS           reduce using rule 62 (value -> constant_use .)
    TIMES           reduce using rule 62 (value -> constant_use .)
    DIVIDE          reduce using rule 62 (value -> constant_use .)
    SEMI            reduce using rule 62 (value -> constant_use .)


state 18

    (17) statement -> try_catch .

    $end            reduce using rule 17 (statement -> try_catch .)
    ECHO            reduce using rule 17 (statement -> try_catch .)
    VARIABLE        reduce using rule 17 (statement -> try_catch .)
    VAR             reduce using rule 17 (statement -> try_catch .)
    CLASS           reduce using rule 17 (statement -> try_catch .)
    FUNCTION        reduce using rule 17 (statement -> try_catch .)
    WHILE           reduce using rule 17 (statement -> try_catch .)
    DEFINE          reduce using rule 17 (statement -> try_catch .)
    CONST           reduce using rule 17 (statement -> try_catch .)
    IDENTIFIER      reduce using rule 17 (statement -> try_catch .)
    TRY             reduce using rule 17 (statement -> try_catch .)
    CATCH           reduce using rule 17 (statement -> try_catch .)
    IF              reduce using rule 17 (statement -> try_catch .)
    INTEGER         reduce using rule 17 (statement -> try_catch .)
    FLOAT           reduce using rule 17 (statement -> try_catch .)
    PUBLIC          reduce using rule 17 (statement -> try_catch .)
    PROTECTED       reduce using rule 17 (statement -> try_catch .)
    PRIVATE         reduce using rule 17 (statement -> try_catch .)
    RBRACE          reduce using rule 17 (statement -> try_catch .)


state 19

    (18) statement -> catch_item .

    $end            reduce using rule 18 (statement -> catch_item .)
    ECHO            reduce using rule 18 (statement -> catch_item .)
    VARIABLE        reduce using rule 18 (statement -> catch_item .)
    VAR             reduce using rule 18 (statement -> catch_item .)
    CLASS           reduce using rule 18 (statement -> catch_item .)
    FUNCTION        reduce using rule 18 (statement -> catch_item .)
    WHILE           reduce using rule 18 (statement -> catch_item .)
    DEFINE          reduce using rule 18 (statement -> catch_item .)
    CONST           reduce using rule 18 (statement -> catch_item .)
    IDENTIFIER      reduce using rule 18 (statement -> catch_item .)
    TRY             reduce using rule 18 (statement -> catch_item .)
    CATCH           reduce using rule 18 (statement -> catch_item .)
    IF              reduce using rule 18 (statement -> catch_item .)
    INTEGER         reduce using rule 18 (statement -> catch_item .)
    FLOAT           reduce using rule 18 (statement -> catch_item .)
    PUBLIC          reduce using rule 18 (statement -> catch_item .)
    PROTECTED       reduce using rule 18 (statement -> catch_item .)
    PRIVATE         reduce using rule 18 (statement -> catch_item .)
    RBRACE          reduce using rule 18 (statement -> catch_item .)


state 20

    (19) statement -> if .

    $end            reduce using rule 19 (statement -> if .)
    ECHO            reduce using rule 19 (statement -> if .)
    VARIABLE        reduce using rule 19 (statement -> if .)
    VAR             reduce using rule 19 (statement -> if .)
    CLASS           reduce using rule 19 (statement -> if .)
    FUNCTION        reduce using rule 19 (statement -> if .)
    WHILE           reduce using rule 19 (statement -> if .)
    DEFINE          reduce using rule 19 (statement -> if .)
    CONST           reduce using rule 19 (statement -> if .)
    IDENTIFIER      reduce using rule 19 (statement -> if .)
    TRY             reduce using rule 19 (statement -> if .)
    CATCH           reduce using rule 19 (statement -> if .)
    IF              reduce using rule 19 (statement -> if .)
    INTEGER         reduce using rule 19 (statement -> if .)
    FLOAT           reduce using rule 19 (statement -> if .)
    PUBLIC          reduce using rule 19 (statement -> if .)
    PROTECTED       reduce using rule 19 (statement -> if .)
    PRIVATE         reduce using rule 19 (statement -> if .)
    RBRACE          reduce using rule 19 (statement -> if .)


state 21

    (20) statement -> empty .

    $end            reduce using rule 20 (statement -> empty .)
    ECHO            reduce using rule 20 (statement -> empty .)
    VARIABLE        reduce using rule 20 (statement -> empty .)
    VAR             reduce using rule 20 (statement -> empty .)
    CLASS           reduce using rule 20 (statement -> empty .)
    FUNCTION        reduce using rule 20 (statement -> empty .)
    WHILE           reduce using rule 20 (statement -> empty .)
    DEFINE          reduce using rule 20 (statement -> empty .)
    CONST           reduce using rule 20 (statement -> empty .)
    IDENTIFIER      reduce using rule 20 (statement -> empty .)
    TRY             reduce using rule 20 (statement -> empty .)
    CATCH           reduce using rule 20 (statement -> empty .)
    IF              reduce using rule 20 (statement -> empty .)
    INTEGER         reduce using rule 20 (statement -> empty .)
    FLOAT           reduce using rule 20 (statement -> empty .)
    PUBLIC          reduce using rule 20 (statement -> empty .)
    PROTECTED       reduce using rule 20 (statement -> empty .)
    PRIVATE         reduce using rule 20 (statement -> empty .)
    RBRACE          reduce using rule 20 (statement -> empty .)


state 22

    (30) print -> ECHO . LPAREN value RPAREN
    (31) print -> ECHO . value
    (32) print -> ECHO . LPAREN STRING RPAREN
    (33) print -> ECHO . STRING
    (34) print_error -> ECHO . error
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    LPAREN          shift and go to state 47
    STRING          shift and go to state 49
    error           shift and go to state 50
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 48
    constant_use                   shift and go to state 52

state 23

    (68) expression -> value . operator value
    (69) expression -> value .
    (64) operator -> . PLUS
    (65) operator -> . MINUS
    (66) operator -> . TIMES
    (67) operator -> . DIVIDE

    SEMI            reduce using rule 69 (expression -> value .)
    RPAREN          reduce using rule 69 (expression -> value .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

    operator                       shift and go to state 53

state 24

    (23) declaration -> VARIABLE . SET value
    (24) declaration -> VARIABLE . SET STRING
    (25) declaration -> VARIABLE . SET expression
    (26) declaration -> VARIABLE . SET condition
    (35) input -> VARIABLE . SET READLINE LPAREN STRING RPAREN
    (37) array_declaration -> VARIABLE . SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> VARIABLE . SET ARRAY LPAREN empty RPAREN
    (52) function_arrow -> VARIABLE . SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (60) value -> VARIABLE .

    SET             shift and go to state 58
    PLUS            reduce using rule 60 (value -> VARIABLE .)
    MINUS           reduce using rule 60 (value -> VARIABLE .)
    TIMES           reduce using rule 60 (value -> VARIABLE .)
    DIVIDE          reduce using rule 60 (value -> VARIABLE .)
    SEMI            reduce using rule 60 (value -> VARIABLE .)


state 25

    (36) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 59


state 26

    (72) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 60


state 27

    (81) constant_use -> IDENTIFIER .

    $end            reduce using rule 81 (constant_use -> IDENTIFIER .)
    PLUS            reduce using rule 81 (constant_use -> IDENTIFIER .)
    MINUS           reduce using rule 81 (constant_use -> IDENTIFIER .)
    TIMES           reduce using rule 81 (constant_use -> IDENTIFIER .)
    DIVIDE          reduce using rule 81 (constant_use -> IDENTIFIER .)
    SEMI            reduce using rule 81 (constant_use -> IDENTIFIER .)
    RPAREN          reduce using rule 81 (constant_use -> IDENTIFIER .)
    LT              reduce using rule 81 (constant_use -> IDENTIFIER .)
    GT              reduce using rule 81 (constant_use -> IDENTIFIER .)
    LE              reduce using rule 81 (constant_use -> IDENTIFIER .)
    GE              reduce using rule 81 (constant_use -> IDENTIFIER .)
    EQ              reduce using rule 81 (constant_use -> IDENTIFIER .)
    NE              reduce using rule 81 (constant_use -> IDENTIFIER .)
    ECHO            reduce using rule 81 (constant_use -> IDENTIFIER .)
    VARIABLE        reduce using rule 81 (constant_use -> IDENTIFIER .)
    VAR             reduce using rule 81 (constant_use -> IDENTIFIER .)
    CLASS           reduce using rule 81 (constant_use -> IDENTIFIER .)
    FUNCTION        reduce using rule 81 (constant_use -> IDENTIFIER .)
    WHILE           reduce using rule 81 (constant_use -> IDENTIFIER .)
    DEFINE          reduce using rule 81 (constant_use -> IDENTIFIER .)
    CONST           reduce using rule 81 (constant_use -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 81 (constant_use -> IDENTIFIER .)
    TRY             reduce using rule 81 (constant_use -> IDENTIFIER .)
    CATCH           reduce using rule 81 (constant_use -> IDENTIFIER .)
    IF              reduce using rule 81 (constant_use -> IDENTIFIER .)
    INTEGER         reduce using rule 81 (constant_use -> IDENTIFIER .)
    FLOAT           reduce using rule 81 (constant_use -> IDENTIFIER .)
    PUBLIC          reduce using rule 81 (constant_use -> IDENTIFIER .)
    PROTECTED       reduce using rule 81 (constant_use -> IDENTIFIER .)
    PRIVATE         reduce using rule 81 (constant_use -> IDENTIFIER .)
    RBRACE          reduce using rule 81 (constant_use -> IDENTIFIER .)
    COMMA           reduce using rule 81 (constant_use -> IDENTIFIER .)
    STRING          reduce using rule 81 (constant_use -> IDENTIFIER .)


state 28

    (87) property_declaration -> visibility . VARIABLE
    (27) function_statement -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 61
    FUNCTION        shift and go to state 62


state 29

    (29) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> FUNCTION . LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (53) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 63
    LPAREN          shift and go to state 64


state 30

    (28) while -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 65


state 31

    (79) constant_declaration -> DEFINE . LPAREN STRING COMMA expression RPAREN SEMI

    LPAREN          shift and go to state 66


state 32

    (80) constant_declaration -> CONST . IDENTIFIER SET expression SEMI

    IDENTIFIER      shift and go to state 67


state 33

    (82) try_catch -> TRY . LBRACE statements RBRACE catch_list

    LBRACE          shift and go to state 68


state 34

    (85) catch_item -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> CATCH . LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 69


state 35

    (42) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 70


state 36

    (61) value -> INTEGER .

    PLUS            reduce using rule 61 (value -> INTEGER .)
    MINUS           reduce using rule 61 (value -> INTEGER .)
    TIMES           reduce using rule 61 (value -> INTEGER .)
    DIVIDE          reduce using rule 61 (value -> INTEGER .)
    SEMI            reduce using rule 61 (value -> INTEGER .)
    RPAREN          reduce using rule 61 (value -> INTEGER .)
    LT              reduce using rule 61 (value -> INTEGER .)
    GT              reduce using rule 61 (value -> INTEGER .)
    LE              reduce using rule 61 (value -> INTEGER .)
    GE              reduce using rule 61 (value -> INTEGER .)
    EQ              reduce using rule 61 (value -> INTEGER .)
    NE              reduce using rule 61 (value -> INTEGER .)
    RBRACE          reduce using rule 61 (value -> INTEGER .)
    COMMA           reduce using rule 61 (value -> INTEGER .)
    INTEGER         reduce using rule 61 (value -> INTEGER .)
    STRING          reduce using rule 61 (value -> INTEGER .)


state 37

    (63) value -> FLOAT .

    PLUS            reduce using rule 63 (value -> FLOAT .)
    MINUS           reduce using rule 63 (value -> FLOAT .)
    TIMES           reduce using rule 63 (value -> FLOAT .)
    DIVIDE          reduce using rule 63 (value -> FLOAT .)
    SEMI            reduce using rule 63 (value -> FLOAT .)
    RPAREN          reduce using rule 63 (value -> FLOAT .)
    LT              reduce using rule 63 (value -> FLOAT .)
    GT              reduce using rule 63 (value -> FLOAT .)
    LE              reduce using rule 63 (value -> FLOAT .)
    GE              reduce using rule 63 (value -> FLOAT .)
    EQ              reduce using rule 63 (value -> FLOAT .)
    NE              reduce using rule 63 (value -> FLOAT .)
    RBRACE          reduce using rule 63 (value -> FLOAT .)
    COMMA           reduce using rule 63 (value -> FLOAT .)
    INTEGER         reduce using rule 63 (value -> FLOAT .)
    STRING          reduce using rule 63 (value -> FLOAT .)


state 38

    (90) visibility -> PUBLIC .

    VARIABLE        reduce using rule 90 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 90 (visibility -> PUBLIC .)


state 39

    (91) visibility -> PROTECTED .

    VARIABLE        reduce using rule 91 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 91 (visibility -> PROTECTED .)


state 40

    (92) visibility -> PRIVATE .

    VARIABLE        reduce using rule 92 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 92 (visibility -> PRIVATE .)


state 41

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    DEFINE          reduce using rule 1 (statement -> print SEMI .)
    CONST           reduce using rule 1 (statement -> print SEMI .)
    IDENTIFIER      reduce using rule 1 (statement -> print SEMI .)
    TRY             reduce using rule 1 (statement -> print SEMI .)
    CATCH           reduce using rule 1 (statement -> print SEMI .)
    IF              reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    PUBLIC          reduce using rule 1 (statement -> print SEMI .)
    PROTECTED       reduce using rule 1 (statement -> print SEMI .)
    PRIVATE         reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 42

    (3) statement -> declaration SEMI .

    $end            reduce using rule 3 (statement -> declaration SEMI .)
    ECHO            reduce using rule 3 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 3 (statement -> declaration SEMI .)
    VAR             reduce using rule 3 (statement -> declaration SEMI .)
    CLASS           reduce using rule 3 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 3 (statement -> declaration SEMI .)
    WHILE           reduce using rule 3 (statement -> declaration SEMI .)
    DEFINE          reduce using rule 3 (statement -> declaration SEMI .)
    CONST           reduce using rule 3 (statement -> declaration SEMI .)
    IDENTIFIER      reduce using rule 3 (statement -> declaration SEMI .)
    TRY             reduce using rule 3 (statement -> declaration SEMI .)
    CATCH           reduce using rule 3 (statement -> declaration SEMI .)
    IF              reduce using rule 3 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 3 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 3 (statement -> declaration SEMI .)
    PUBLIC          reduce using rule 3 (statement -> declaration SEMI .)
    PROTECTED       reduce using rule 3 (statement -> declaration SEMI .)
    PRIVATE         reduce using rule 3 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 3 (statement -> declaration SEMI .)


state 43

    (4) statement -> input SEMI .

    $end            reduce using rule 4 (statement -> input SEMI .)
    ECHO            reduce using rule 4 (statement -> input SEMI .)
    VARIABLE        reduce using rule 4 (statement -> input SEMI .)
    VAR             reduce using rule 4 (statement -> input SEMI .)
    CLASS           reduce using rule 4 (statement -> input SEMI .)
    FUNCTION        reduce using rule 4 (statement -> input SEMI .)
    WHILE           reduce using rule 4 (statement -> input SEMI .)
    DEFINE          reduce using rule 4 (statement -> input SEMI .)
    CONST           reduce using rule 4 (statement -> input SEMI .)
    IDENTIFIER      reduce using rule 4 (statement -> input SEMI .)
    TRY             reduce using rule 4 (statement -> input SEMI .)
    CATCH           reduce using rule 4 (statement -> input SEMI .)
    IF              reduce using rule 4 (statement -> input SEMI .)
    INTEGER         reduce using rule 4 (statement -> input SEMI .)
    FLOAT           reduce using rule 4 (statement -> input SEMI .)
    PUBLIC          reduce using rule 4 (statement -> input SEMI .)
    PROTECTED       reduce using rule 4 (statement -> input SEMI .)
    PRIVATE         reduce using rule 4 (statement -> input SEMI .)
    RBRACE          reduce using rule 4 (statement -> input SEMI .)


state 44

    (5) statement -> expression SEMI .

    $end            reduce using rule 5 (statement -> expression SEMI .)
    ECHO            reduce using rule 5 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 5 (statement -> expression SEMI .)
    VAR             reduce using rule 5 (statement -> expression SEMI .)
    CLASS           reduce using rule 5 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 5 (statement -> expression SEMI .)
    WHILE           reduce using rule 5 (statement -> expression SEMI .)
    DEFINE          reduce using rule 5 (statement -> expression SEMI .)
    CONST           reduce using rule 5 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 5 (statement -> expression SEMI .)
    TRY             reduce using rule 5 (statement -> expression SEMI .)
    CATCH           reduce using rule 5 (statement -> expression SEMI .)
    IF              reduce using rule 5 (statement -> expression SEMI .)
    INTEGER         reduce using rule 5 (statement -> expression SEMI .)
    FLOAT           reduce using rule 5 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 5 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 5 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 5 (statement -> expression SEMI .)
    RBRACE          reduce using rule 5 (statement -> expression SEMI .)


state 45

    (8) statement -> array_declaration SEMI .

    $end            reduce using rule 8 (statement -> array_declaration SEMI .)
    ECHO            reduce using rule 8 (statement -> array_declaration SEMI .)
    VARIABLE        reduce using rule 8 (statement -> array_declaration SEMI .)
    VAR             reduce using rule 8 (statement -> array_declaration SEMI .)
    CLASS           reduce using rule 8 (statement -> array_declaration SEMI .)
    FUNCTION        reduce using rule 8 (statement -> array_declaration SEMI .)
    WHILE           reduce using rule 8 (statement -> array_declaration SEMI .)
    DEFINE          reduce using rule 8 (statement -> array_declaration SEMI .)
    CONST           reduce using rule 8 (statement -> array_declaration SEMI .)
    IDENTIFIER      reduce using rule 8 (statement -> array_declaration SEMI .)
    TRY             reduce using rule 8 (statement -> array_declaration SEMI .)
    CATCH           reduce using rule 8 (statement -> array_declaration SEMI .)
    IF              reduce using rule 8 (statement -> array_declaration SEMI .)
    INTEGER         reduce using rule 8 (statement -> array_declaration SEMI .)
    FLOAT           reduce using rule 8 (statement -> array_declaration SEMI .)
    PUBLIC          reduce using rule 8 (statement -> array_declaration SEMI .)
    PROTECTED       reduce using rule 8 (statement -> array_declaration SEMI .)
    PRIVATE         reduce using rule 8 (statement -> array_declaration SEMI .)
    RBRACE          reduce using rule 8 (statement -> array_declaration SEMI .)


state 46

    (9) statement -> property_declaration SEMI .

    $end            reduce using rule 9 (statement -> property_declaration SEMI .)
    ECHO            reduce using rule 9 (statement -> property_declaration SEMI .)
    VARIABLE        reduce using rule 9 (statement -> property_declaration SEMI .)
    VAR             reduce using rule 9 (statement -> property_declaration SEMI .)
    CLASS           reduce using rule 9 (statement -> property_declaration SEMI .)
    FUNCTION        reduce using rule 9 (statement -> property_declaration SEMI .)
    WHILE           reduce using rule 9 (statement -> property_declaration SEMI .)
    DEFINE          reduce using rule 9 (statement -> property_declaration SEMI .)
    CONST           reduce using rule 9 (statement -> property_declaration SEMI .)
    IDENTIFIER      reduce using rule 9 (statement -> property_declaration SEMI .)
    TRY             reduce using rule 9 (statement -> property_declaration SEMI .)
    CATCH           reduce using rule 9 (statement -> property_declaration SEMI .)
    IF              reduce using rule 9 (statement -> property_declaration SEMI .)
    INTEGER         reduce using rule 9 (statement -> property_declaration SEMI .)
    FLOAT           reduce using rule 9 (statement -> property_declaration SEMI .)
    PUBLIC          reduce using rule 9 (statement -> property_declaration SEMI .)
    PROTECTED       reduce using rule 9 (statement -> property_declaration SEMI .)
    PRIVATE         reduce using rule 9 (statement -> property_declaration SEMI .)
    RBRACE          reduce using rule 9 (statement -> property_declaration SEMI .)


state 47

    (30) print -> ECHO LPAREN . value RPAREN
    (32) print -> ECHO LPAREN . STRING RPAREN
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    STRING          shift and go to state 72
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 71
    constant_use                   shift and go to state 52

state 48

    (31) print -> ECHO value .

    SEMI            reduce using rule 31 (print -> ECHO value .)


state 49

    (33) print -> ECHO STRING .

    SEMI            reduce using rule 33 (print -> ECHO STRING .)


state 50

    (34) print_error -> ECHO error .

    $end            reduce using rule 34 (print_error -> ECHO error .)
    ECHO            reduce using rule 34 (print_error -> ECHO error .)
    VARIABLE        reduce using rule 34 (print_error -> ECHO error .)
    VAR             reduce using rule 34 (print_error -> ECHO error .)
    CLASS           reduce using rule 34 (print_error -> ECHO error .)
    FUNCTION        reduce using rule 34 (print_error -> ECHO error .)
    WHILE           reduce using rule 34 (print_error -> ECHO error .)
    DEFINE          reduce using rule 34 (print_error -> ECHO error .)
    CONST           reduce using rule 34 (print_error -> ECHO error .)
    IDENTIFIER      reduce using rule 34 (print_error -> ECHO error .)
    TRY             reduce using rule 34 (print_error -> ECHO error .)
    CATCH           reduce using rule 34 (print_error -> ECHO error .)
    IF              reduce using rule 34 (print_error -> ECHO error .)
    INTEGER         reduce using rule 34 (print_error -> ECHO error .)
    FLOAT           reduce using rule 34 (print_error -> ECHO error .)
    PUBLIC          reduce using rule 34 (print_error -> ECHO error .)
    PROTECTED       reduce using rule 34 (print_error -> ECHO error .)
    PRIVATE         reduce using rule 34 (print_error -> ECHO error .)
    RBRACE          reduce using rule 34 (print_error -> ECHO error .)


state 51

    (60) value -> VARIABLE .

    SEMI            reduce using rule 60 (value -> VARIABLE .)
    RPAREN          reduce using rule 60 (value -> VARIABLE .)
    PLUS            reduce using rule 60 (value -> VARIABLE .)
    MINUS           reduce using rule 60 (value -> VARIABLE .)
    TIMES           reduce using rule 60 (value -> VARIABLE .)
    DIVIDE          reduce using rule 60 (value -> VARIABLE .)
    LT              reduce using rule 60 (value -> VARIABLE .)
    GT              reduce using rule 60 (value -> VARIABLE .)
    LE              reduce using rule 60 (value -> VARIABLE .)
    GE              reduce using rule 60 (value -> VARIABLE .)
    EQ              reduce using rule 60 (value -> VARIABLE .)
    NE              reduce using rule 60 (value -> VARIABLE .)
    RBRACE          reduce using rule 60 (value -> VARIABLE .)
    COMMA           reduce using rule 60 (value -> VARIABLE .)
    INTEGER         reduce using rule 60 (value -> VARIABLE .)
    STRING          reduce using rule 60 (value -> VARIABLE .)


state 52

    (62) value -> constant_use .

    SEMI            reduce using rule 62 (value -> constant_use .)
    RPAREN          reduce using rule 62 (value -> constant_use .)
    PLUS            reduce using rule 62 (value -> constant_use .)
    MINUS           reduce using rule 62 (value -> constant_use .)
    TIMES           reduce using rule 62 (value -> constant_use .)
    DIVIDE          reduce using rule 62 (value -> constant_use .)
    LT              reduce using rule 62 (value -> constant_use .)
    GT              reduce using rule 62 (value -> constant_use .)
    LE              reduce using rule 62 (value -> constant_use .)
    GE              reduce using rule 62 (value -> constant_use .)
    EQ              reduce using rule 62 (value -> constant_use .)
    NE              reduce using rule 62 (value -> constant_use .)
    RBRACE          reduce using rule 62 (value -> constant_use .)
    COMMA           reduce using rule 62 (value -> constant_use .)
    INTEGER         reduce using rule 62 (value -> constant_use .)
    STRING          reduce using rule 62 (value -> constant_use .)


state 53

    (68) expression -> value operator . value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 73
    constant_use                   shift and go to state 52

state 54

    (64) operator -> PLUS .

    VARIABLE        reduce using rule 64 (operator -> PLUS .)
    INTEGER         reduce using rule 64 (operator -> PLUS .)
    FLOAT           reduce using rule 64 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 64 (operator -> PLUS .)


state 55

    (65) operator -> MINUS .

    VARIABLE        reduce using rule 65 (operator -> MINUS .)
    INTEGER         reduce using rule 65 (operator -> MINUS .)
    FLOAT           reduce using rule 65 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 65 (operator -> MINUS .)


state 56

    (66) operator -> TIMES .

    VARIABLE        reduce using rule 66 (operator -> TIMES .)
    INTEGER         reduce using rule 66 (operator -> TIMES .)
    FLOAT           reduce using rule 66 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 66 (operator -> TIMES .)


state 57

    (67) operator -> DIVIDE .

    VARIABLE        reduce using rule 67 (operator -> DIVIDE .)
    INTEGER         reduce using rule 67 (operator -> DIVIDE .)
    FLOAT           reduce using rule 67 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 67 (operator -> DIVIDE .)


state 58

    (23) declaration -> VARIABLE SET . value
    (24) declaration -> VARIABLE SET . STRING
    (25) declaration -> VARIABLE SET . expression
    (26) declaration -> VARIABLE SET . condition
    (35) input -> VARIABLE SET . READLINE LPAREN STRING RPAREN
    (37) array_declaration -> VARIABLE SET . ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> VARIABLE SET . ARRAY LPAREN empty RPAREN
    (52) function_arrow -> VARIABLE SET . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (68) expression -> . value operator value
    (69) expression -> . value
    (47) condition -> . value comparison_operator value
    (81) constant_use -> . IDENTIFIER

    STRING          shift and go to state 75
    READLINE        shift and go to state 78
    ARRAY           shift and go to state 79
    FUNCTION        shift and go to state 80
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 74
    expression                     shift and go to state 76
    condition                      shift and go to state 77
    constant_use                   shift and go to state 52

state 59

    (36) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 81


state 60

    (72) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 82


state 61

    (87) property_declaration -> visibility VARIABLE .

    SEMI            reduce using rule 87 (property_declaration -> visibility VARIABLE .)
    PUBLIC          reduce using rule 87 (property_declaration -> visibility VARIABLE .)
    PROTECTED       reduce using rule 87 (property_declaration -> visibility VARIABLE .)
    PRIVATE         reduce using rule 87 (property_declaration -> visibility VARIABLE .)
    RBRACE          reduce using rule 87 (property_declaration -> visibility VARIABLE .)


state 62

    (27) function_statement -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 83


state 63

    (29) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 84


state 64

    (101) function_anonymous -> FUNCTION LPAREN . parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (53) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow
    (93) parameters -> . parameter COMMA parameters
    (94) parameters -> . parameter
    (95) parameters -> . IDENTIFIER
    (96) parameters -> . empty
    (97) parameter -> . TYPE VARIABLE
    (98) parameter -> . VARIABLE
    (107) empty -> .

    VARIABLE        shift and go to state 86
    IDENTIFIER      shift and go to state 88
    TYPE            shift and go to state 90
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 85
    parameter                      shift and go to state 87
    empty                          shift and go to state 89

state 65

    (28) while -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (47) condition -> . value comparison_operator value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    condition                      shift and go to state 91
    value                          shift and go to state 92
    constant_use                   shift and go to state 52

state 66

    (79) constant_declaration -> DEFINE LPAREN . STRING COMMA expression RPAREN SEMI

    STRING          shift and go to state 93


state 67

    (80) constant_declaration -> CONST IDENTIFIER . SET expression SEMI

    SET             shift and go to state 94


state 68

    (82) try_catch -> TRY LBRACE . statements RBRACE catch_list
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 95
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 69

    (85) catch_item -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> CATCH LPAREN . EXCEPTION empty RPAREN LBRACE statements RBRACE

    EXCEPTION       shift and go to state 97


state 70

    (42) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (47) condition -> . value comparison_operator value
    (48) conditions -> . LBRACE condition RBRACE logical_operator conditions
    (49) conditions -> . LBRACE condition RBRACE
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    LBRACE          shift and go to state 99
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    condition                      shift and go to state 98
    conditions                     shift and go to state 100
    value                          shift and go to state 92
    constant_use                   shift and go to state 52

state 71

    (30) print -> ECHO LPAREN value . RPAREN

    RPAREN          shift and go to state 101


state 72

    (32) print -> ECHO LPAREN STRING . RPAREN

    RPAREN          shift and go to state 102


state 73

    (68) expression -> value operator value .

    SEMI            reduce using rule 68 (expression -> value operator value .)
    RPAREN          reduce using rule 68 (expression -> value operator value .)


state 74

    (23) declaration -> VARIABLE SET value .
    (68) expression -> value . operator value
    (69) expression -> value .
    (47) condition -> value . comparison_operator value
    (64) operator -> . PLUS
    (65) operator -> . MINUS
    (66) operator -> . TIMES
    (67) operator -> . DIVIDE
    (54) comparison_operator -> . LT
    (55) comparison_operator -> . GT
    (56) comparison_operator -> . LE
    (57) comparison_operator -> . GE
    (58) comparison_operator -> . EQ
    (59) comparison_operator -> . NE

  ! reduce/reduce conflict for SEMI resolved using rule 23 (declaration -> VARIABLE SET value .)
    SEMI            reduce using rule 23 (declaration -> VARIABLE SET value .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LT              shift and go to state 104
    GT              shift and go to state 105
    LE              shift and go to state 106
    GE              shift and go to state 107
    EQ              shift and go to state 108
    NE              shift and go to state 109

  ! SEMI            [ reduce using rule 69 (expression -> value .) ]

    operator                       shift and go to state 53
    comparison_operator            shift and go to state 103

state 75

    (24) declaration -> VARIABLE SET STRING .

    SEMI            reduce using rule 24 (declaration -> VARIABLE SET STRING .)


state 76

    (25) declaration -> VARIABLE SET expression .

    SEMI            reduce using rule 25 (declaration -> VARIABLE SET expression .)


state 77

    (26) declaration -> VARIABLE SET condition .

    SEMI            reduce using rule 26 (declaration -> VARIABLE SET condition .)


state 78

    (35) input -> VARIABLE SET READLINE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 110


state 79

    (37) array_declaration -> VARIABLE SET ARRAY . LPAREN arrayArg RPAREN
    (38) array_declaration -> VARIABLE SET ARRAY . LPAREN empty RPAREN

    LPAREN          shift and go to state 111


state 80

    (52) function_arrow -> VARIABLE SET FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI

    LPAREN          shift and go to state 112


state 81

    (36) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 113


state 82

    (72) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (73) class_body -> . class_member_list
    (74) class_member_list -> . class_member class_member_list
    (75) class_member_list -> . class_member
    (76) class_member -> . property_declaration
    (77) class_member -> . method_declaration
    (78) class_member -> . constructor_declaration
    (87) property_declaration -> . visibility VARIABLE
    (88) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (89) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    class_body                     shift and go to state 114
    class_member_list              shift and go to state 115
    class_member                   shift and go to state 116
    property_declaration           shift and go to state 117
    method_declaration             shift and go to state 118
    constructor_declaration        shift and go to state 119
    visibility                     shift and go to state 120

state 83

    (27) function_statement -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 121


state 84

    (29) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 122


state 85

    (101) function_anonymous -> FUNCTION LPAREN parameters . RPAREN use_clause_opt LBRACE statements RBRACE

    RPAREN          shift and go to state 123


state 86

    (53) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow
    (98) parameter -> VARIABLE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 124
    COMMA           reduce using rule 98 (parameter -> VARIABLE .)

  ! RPAREN          [ reduce using rule 98 (parameter -> VARIABLE .) ]


state 87

    (93) parameters -> parameter . COMMA parameters
    (94) parameters -> parameter .

    COMMA           shift and go to state 125
    RPAREN          reduce using rule 94 (parameters -> parameter .)


state 88

    (95) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 95 (parameters -> IDENTIFIER .)


state 89

    (96) parameters -> empty .

    RPAREN          reduce using rule 96 (parameters -> empty .)


state 90

    (97) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 126


state 91

    (28) while -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 127


state 92

    (47) condition -> value . comparison_operator value
    (54) comparison_operator -> . LT
    (55) comparison_operator -> . GT
    (56) comparison_operator -> . LE
    (57) comparison_operator -> . GE
    (58) comparison_operator -> . EQ
    (59) comparison_operator -> . NE

    LT              shift and go to state 104
    GT              shift and go to state 105
    LE              shift and go to state 106
    GE              shift and go to state 107
    EQ              shift and go to state 108
    NE              shift and go to state 109

    comparison_operator            shift and go to state 103

state 93

    (79) constant_declaration -> DEFINE LPAREN STRING . COMMA expression RPAREN SEMI

    COMMA           shift and go to state 128


state 94

    (80) constant_declaration -> CONST IDENTIFIER SET . expression SEMI
    (68) expression -> . value operator value
    (69) expression -> . value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    expression                     shift and go to state 129
    value                          shift and go to state 23
    constant_use                   shift and go to state 52

state 95

    (82) try_catch -> TRY LBRACE statements . RBRACE catch_list

    RBRACE          shift and go to state 130


state 96

    (21) statements -> statement . statements
    (22) statements -> statement .
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! reduce/reduce conflict for RBRACE resolved using rule 22 (statements -> statement .)
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    RBRACE          reduce using rule 22 (statements -> statement .)
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]
  ! RBRACE          [ reduce using rule 107 (empty -> .) ]

    statement                      shift and go to state 96
    statements                     shift and go to state 131
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 97

    (85) catch_item -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> CATCH LPAREN EXCEPTION . empty RPAREN LBRACE statements RBRACE
    (107) empty -> .

    VARIABLE        shift and go to state 132
    RPAREN          reduce using rule 107 (empty -> .)

    empty                          shift and go to state 133

state 98

    (42) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE SEMI
    (44) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE elseif
    (45) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 134


state 99

    (48) conditions -> LBRACE . condition RBRACE logical_operator conditions
    (49) conditions -> LBRACE . condition RBRACE
    (47) condition -> . value comparison_operator value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    condition                      shift and go to state 135
    value                          shift and go to state 92
    constant_use                   shift and go to state 52

state 100

    (43) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE SEMI

    RPAREN          shift and go to state 136


state 101

    (30) print -> ECHO LPAREN value RPAREN .

    SEMI            reduce using rule 30 (print -> ECHO LPAREN value RPAREN .)


state 102

    (32) print -> ECHO LPAREN STRING RPAREN .

    SEMI            reduce using rule 32 (print -> ECHO LPAREN STRING RPAREN .)


state 103

    (47) condition -> value comparison_operator . value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 137
    constant_use                   shift and go to state 52

state 104

    (54) comparison_operator -> LT .

    VARIABLE        reduce using rule 54 (comparison_operator -> LT .)
    INTEGER         reduce using rule 54 (comparison_operator -> LT .)
    FLOAT           reduce using rule 54 (comparison_operator -> LT .)
    IDENTIFIER      reduce using rule 54 (comparison_operator -> LT .)


state 105

    (55) comparison_operator -> GT .

    VARIABLE        reduce using rule 55 (comparison_operator -> GT .)
    INTEGER         reduce using rule 55 (comparison_operator -> GT .)
    FLOAT           reduce using rule 55 (comparison_operator -> GT .)
    IDENTIFIER      reduce using rule 55 (comparison_operator -> GT .)


state 106

    (56) comparison_operator -> LE .

    VARIABLE        reduce using rule 56 (comparison_operator -> LE .)
    INTEGER         reduce using rule 56 (comparison_operator -> LE .)
    FLOAT           reduce using rule 56 (comparison_operator -> LE .)
    IDENTIFIER      reduce using rule 56 (comparison_operator -> LE .)


state 107

    (57) comparison_operator -> GE .

    VARIABLE        reduce using rule 57 (comparison_operator -> GE .)
    INTEGER         reduce using rule 57 (comparison_operator -> GE .)
    FLOAT           reduce using rule 57 (comparison_operator -> GE .)
    IDENTIFIER      reduce using rule 57 (comparison_operator -> GE .)


state 108

    (58) comparison_operator -> EQ .

    VARIABLE        reduce using rule 58 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 58 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 58 (comparison_operator -> EQ .)
    IDENTIFIER      reduce using rule 58 (comparison_operator -> EQ .)


state 109

    (59) comparison_operator -> NE .

    VARIABLE        reduce using rule 59 (comparison_operator -> NE .)
    INTEGER         reduce using rule 59 (comparison_operator -> NE .)
    FLOAT           reduce using rule 59 (comparison_operator -> NE .)
    IDENTIFIER      reduce using rule 59 (comparison_operator -> NE .)


state 110

    (35) input -> VARIABLE SET READLINE LPAREN . STRING RPAREN

    STRING          shift and go to state 138


state 111

    (37) array_declaration -> VARIABLE SET ARRAY LPAREN . arrayArg RPAREN
    (38) array_declaration -> VARIABLE SET ARRAY LPAREN . empty RPAREN
    (39) arrayArg -> . index ARROW value
    (40) arrayArg -> . index ARROW value arrayArg
    (41) arrayArg -> . index ARROW value COMMA arrayArg
    (107) empty -> .
    (50) index -> . INTEGER
    (51) index -> . STRING

    RPAREN          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 142
    STRING          shift and go to state 143

    arrayArg                       shift and go to state 139
    empty                          shift and go to state 140
    index                          shift and go to state 141

state 112

    (52) function_arrow -> VARIABLE SET FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI

    VARIABLE        shift and go to state 144


state 113

    (36) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 145


state 114

    (72) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 146


state 115

    (73) class_body -> class_member_list .

    RBRACE          reduce using rule 73 (class_body -> class_member_list .)


state 116

    (74) class_member_list -> class_member . class_member_list
    (75) class_member_list -> class_member .
    (74) class_member_list -> . class_member class_member_list
    (75) class_member_list -> . class_member
    (76) class_member -> . property_declaration
    (77) class_member -> . method_declaration
    (78) class_member -> . constructor_declaration
    (87) property_declaration -> . visibility VARIABLE
    (88) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (89) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

    RBRACE          reduce using rule 75 (class_member_list -> class_member .)
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    class_member                   shift and go to state 116
    class_member_list              shift and go to state 147
    property_declaration           shift and go to state 117
    method_declaration             shift and go to state 118
    constructor_declaration        shift and go to state 119
    visibility                     shift and go to state 120

state 117

    (76) class_member -> property_declaration .

    PUBLIC          reduce using rule 76 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 76 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 76 (class_member -> property_declaration .)
    RBRACE          reduce using rule 76 (class_member -> property_declaration .)


state 118

    (77) class_member -> method_declaration .

    PUBLIC          reduce using rule 77 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 77 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 77 (class_member -> method_declaration .)
    RBRACE          reduce using rule 77 (class_member -> method_declaration .)


state 119

    (78) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 78 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 78 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 78 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 78 (class_member -> constructor_declaration .)


state 120

    (87) property_declaration -> visibility . VARIABLE
    (88) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (89) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 61
    FUNCTION        shift and go to state 148


state 121

    (27) function_statement -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (93) parameters -> . parameter COMMA parameters
    (94) parameters -> . parameter
    (95) parameters -> . IDENTIFIER
    (96) parameters -> . empty
    (97) parameter -> . TYPE VARIABLE
    (98) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 88
    TYPE            shift and go to state 90
    VARIABLE        shift and go to state 150
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 149
    parameter                      shift and go to state 87
    empty                          shift and go to state 89

state 122

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 151


state 123

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN . use_clause_opt LBRACE statements RBRACE
    (102) use_clause_opt -> . USE LPAREN variables RPAREN

    USE             shift and go to state 153

    use_clause_opt                 shift and go to state 152

state 124

    (53) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW function_arrow

    ARROW           shift and go to state 154


state 125

    (93) parameters -> parameter COMMA . parameters
    (93) parameters -> . parameter COMMA parameters
    (94) parameters -> . parameter
    (95) parameters -> . IDENTIFIER
    (96) parameters -> . empty
    (97) parameter -> . TYPE VARIABLE
    (98) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 88
    TYPE            shift and go to state 90
    VARIABLE        shift and go to state 150
    RPAREN          reduce using rule 107 (empty -> .)

    parameter                      shift and go to state 87
    parameters                     shift and go to state 155
    empty                          shift and go to state 89

state 126

    (97) parameter -> TYPE VARIABLE .

    COMMA           reduce using rule 97 (parameter -> TYPE VARIABLE .)
    RPAREN          reduce using rule 97 (parameter -> TYPE VARIABLE .)


state 127

    (28) while -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 156


state 128

    (79) constant_declaration -> DEFINE LPAREN STRING COMMA . expression RPAREN SEMI
    (68) expression -> . value operator value
    (69) expression -> . value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    expression                     shift and go to state 157
    value                          shift and go to state 23
    constant_use                   shift and go to state 52

state 129

    (80) constant_declaration -> CONST IDENTIFIER SET expression . SEMI

    SEMI            shift and go to state 158


state 130

    (82) try_catch -> TRY LBRACE statements RBRACE . catch_list
    (83) catch_list -> . catch_item catch_list
    (84) catch_list -> . empty
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (107) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 34
    $end            reduce using rule 107 (empty -> .)
    ECHO            reduce using rule 107 (empty -> .)
    VARIABLE        reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)
    CLASS           reduce using rule 107 (empty -> .)
    FUNCTION        reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    DEFINE          reduce using rule 107 (empty -> .)
    CONST           reduce using rule 107 (empty -> .)
    IDENTIFIER      reduce using rule 107 (empty -> .)
    TRY             reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    INTEGER         reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    PUBLIC          reduce using rule 107 (empty -> .)
    PROTECTED       reduce using rule 107 (empty -> .)
    PRIVATE         reduce using rule 107 (empty -> .)
    RBRACE          reduce using rule 107 (empty -> .)

  ! CATCH           [ reduce using rule 107 (empty -> .) ]

    catch_list                     shift and go to state 159
    catch_item                     shift and go to state 160
    empty                          shift and go to state 161

state 131

    (21) statements -> statement statements .

    RBRACE          reduce using rule 21 (statements -> statement statements .)


state 132

    (85) catch_item -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 162


state 133

    (86) catch_item -> CATCH LPAREN EXCEPTION empty . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 163


state 134

    (42) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE SEMI
    (44) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE elseif
    (45) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 164


state 135

    (48) conditions -> LBRACE condition . RBRACE logical_operator conditions
    (49) conditions -> LBRACE condition . RBRACE

    RBRACE          shift and go to state 165


state 136

    (43) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 166


state 137

    (47) condition -> value comparison_operator value .

    SEMI            reduce using rule 47 (condition -> value comparison_operator value .)
    RPAREN          reduce using rule 47 (condition -> value comparison_operator value .)
    RBRACE          reduce using rule 47 (condition -> value comparison_operator value .)


state 138

    (35) input -> VARIABLE SET READLINE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 167


state 139

    (37) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg . RPAREN

    RPAREN          shift and go to state 168


state 140

    (38) array_declaration -> VARIABLE SET ARRAY LPAREN empty . RPAREN

    RPAREN          shift and go to state 169


state 141

    (39) arrayArg -> index . ARROW value
    (40) arrayArg -> index . ARROW value arrayArg
    (41) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 170


state 142

    (50) index -> INTEGER .

    ARROW           reduce using rule 50 (index -> INTEGER .)


state 143

    (51) index -> STRING .

    ARROW           reduce using rule 51 (index -> STRING .)


state 144

    (52) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI

    RPAREN          shift and go to state 171


state 145

    (36) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 172


state 146

    (72) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    $end            reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFINE          reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRY             reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CATCH           reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROTECTED       reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 72 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 147

    (74) class_member_list -> class_member class_member_list .

    RBRACE          reduce using rule 74 (class_member_list -> class_member class_member_list .)


state 148

    (88) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (89) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 173
    CONSTRUCT       shift and go to state 174


state 149

    (27) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 175


state 150

    (98) parameter -> VARIABLE .

    COMMA           reduce using rule 98 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 98 (parameter -> VARIABLE .)


state 151

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 176
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 152

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 177


state 153

    (102) use_clause_opt -> USE . LPAREN variables RPAREN

    LPAREN          shift and go to state 178


state 154

    (53) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . function_arrow
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 180
    FUNCTION        shift and go to state 179

    function_arrow                 shift and go to state 181

state 155

    (93) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 93 (parameters -> parameter COMMA parameters .)


state 156

    (28) while -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 182
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 157

    (79) constant_declaration -> DEFINE LPAREN STRING COMMA expression . RPAREN SEMI

    RPAREN          shift and go to state 183


state 158

    (80) constant_declaration -> CONST IDENTIFIER SET expression SEMI .

    $end            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    ECHO            reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VARIABLE        reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VAR             reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CLASS           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FUNCTION        reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    WHILE           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    DEFINE          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CONST           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IDENTIFIER      reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    TRY             reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CATCH           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IF              reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    INTEGER         reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FLOAT           reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PUBLIC          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PROTECTED       reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PRIVATE         reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    RBRACE          reduce using rule 80 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)


state 159

    (82) try_catch -> TRY LBRACE statements RBRACE catch_list .

    $end            reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    ECHO            reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VARIABLE        reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VAR             reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CLASS           reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FUNCTION        reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    WHILE           reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    DEFINE          reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CONST           reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IDENTIFIER      reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    TRY             reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CATCH           reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IF              reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    INTEGER         reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FLOAT           reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PUBLIC          reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PROTECTED       reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PRIVATE         reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    RBRACE          reduce using rule 82 (try_catch -> TRY LBRACE statements RBRACE catch_list .)


state 160

    (83) catch_list -> catch_item . catch_list
    (83) catch_list -> . catch_item catch_list
    (84) catch_list -> . empty
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (107) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 34
    $end            reduce using rule 107 (empty -> .)
    ECHO            reduce using rule 107 (empty -> .)
    VARIABLE        reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)
    CLASS           reduce using rule 107 (empty -> .)
    FUNCTION        reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    DEFINE          reduce using rule 107 (empty -> .)
    CONST           reduce using rule 107 (empty -> .)
    IDENTIFIER      reduce using rule 107 (empty -> .)
    TRY             reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    INTEGER         reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    PUBLIC          reduce using rule 107 (empty -> .)
    PROTECTED       reduce using rule 107 (empty -> .)
    PRIVATE         reduce using rule 107 (empty -> .)
    RBRACE          reduce using rule 107 (empty -> .)

  ! CATCH           [ reduce using rule 107 (empty -> .) ]

    catch_item                     shift and go to state 160
    catch_list                     shift and go to state 184
    empty                          shift and go to state 161

state 161

    (84) catch_list -> empty .

    $end            reduce using rule 84 (catch_list -> empty .)
    ECHO            reduce using rule 84 (catch_list -> empty .)
    VARIABLE        reduce using rule 84 (catch_list -> empty .)
    VAR             reduce using rule 84 (catch_list -> empty .)
    CLASS           reduce using rule 84 (catch_list -> empty .)
    FUNCTION        reduce using rule 84 (catch_list -> empty .)
    WHILE           reduce using rule 84 (catch_list -> empty .)
    DEFINE          reduce using rule 84 (catch_list -> empty .)
    CONST           reduce using rule 84 (catch_list -> empty .)
    IDENTIFIER      reduce using rule 84 (catch_list -> empty .)
    TRY             reduce using rule 84 (catch_list -> empty .)
    CATCH           reduce using rule 84 (catch_list -> empty .)
    IF              reduce using rule 84 (catch_list -> empty .)
    INTEGER         reduce using rule 84 (catch_list -> empty .)
    FLOAT           reduce using rule 84 (catch_list -> empty .)
    PUBLIC          reduce using rule 84 (catch_list -> empty .)
    PROTECTED       reduce using rule 84 (catch_list -> empty .)
    PRIVATE         reduce using rule 84 (catch_list -> empty .)
    RBRACE          reduce using rule 84 (catch_list -> empty .)


state 162

    (85) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 185


state 163

    (86) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 186


state 164

    (42) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE SEMI
    (44) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE elseif
    (45) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 187
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 165

    (48) conditions -> LBRACE condition RBRACE . logical_operator conditions
    (49) conditions -> LBRACE condition RBRACE .
    (105) logical_operator -> . AND
    (106) logical_operator -> . OR

    RPAREN          reduce using rule 49 (conditions -> LBRACE condition RBRACE .)
    AND             shift and go to state 189
    OR              shift and go to state 190

    logical_operator               shift and go to state 188

state 166

    (43) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE SEMI
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 191
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 167

    (35) input -> VARIABLE SET READLINE LPAREN STRING RPAREN .

    SEMI            reduce using rule 35 (input -> VARIABLE SET READLINE LPAREN STRING RPAREN .)


state 168

    (37) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .

    SEMI            reduce using rule 37 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)


state 169

    (38) array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .

    SEMI            reduce using rule 38 (array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .)


state 170

    (39) arrayArg -> index ARROW . value
    (40) arrayArg -> index ARROW . value arrayArg
    (41) arrayArg -> index ARROW . value COMMA arrayArg
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 192
    constant_use                   shift and go to state 52

state 171

    (52) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN . ARROW expression SEMI

    ARROW           shift and go to state 193


state 172

    (36) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 194


state 173

    (88) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 195


state 174

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 196


state 175

    (27) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 197


state 176

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 198


state 177

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 199
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 178

    (102) use_clause_opt -> USE LPAREN . variables RPAREN
    (103) variables -> . VARIABLE COMMA variables
    (104) variables -> . VARIABLE

    VARIABLE        shift and go to state 201

    variables                      shift and go to state 200

state 179

    (53) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    LPAREN          shift and go to state 202


state 180

    (52) function_arrow -> VARIABLE . SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI

    SET             shift and go to state 203


state 181

    (53) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .

    $end            reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    ECHO            reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VARIABLE        reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VAR             reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CLASS           reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FUNCTION        reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    WHILE           reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    DEFINE          reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CONST           reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IDENTIFIER      reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    TRY             reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CATCH           reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IF              reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    INTEGER         reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FLOAT           reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PUBLIC          reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PROTECTED       reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PRIVATE         reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    RBRACE          reduce using rule 53 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)


state 182

    (28) while -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 204


state 183

    (79) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN . SEMI

    SEMI            shift and go to state 205


state 184

    (83) catch_list -> catch_item catch_list .

    $end            reduce using rule 83 (catch_list -> catch_item catch_list .)
    ECHO            reduce using rule 83 (catch_list -> catch_item catch_list .)
    VARIABLE        reduce using rule 83 (catch_list -> catch_item catch_list .)
    VAR             reduce using rule 83 (catch_list -> catch_item catch_list .)
    CLASS           reduce using rule 83 (catch_list -> catch_item catch_list .)
    FUNCTION        reduce using rule 83 (catch_list -> catch_item catch_list .)
    WHILE           reduce using rule 83 (catch_list -> catch_item catch_list .)
    DEFINE          reduce using rule 83 (catch_list -> catch_item catch_list .)
    CONST           reduce using rule 83 (catch_list -> catch_item catch_list .)
    IDENTIFIER      reduce using rule 83 (catch_list -> catch_item catch_list .)
    TRY             reduce using rule 83 (catch_list -> catch_item catch_list .)
    CATCH           reduce using rule 83 (catch_list -> catch_item catch_list .)
    IF              reduce using rule 83 (catch_list -> catch_item catch_list .)
    INTEGER         reduce using rule 83 (catch_list -> catch_item catch_list .)
    FLOAT           reduce using rule 83 (catch_list -> catch_item catch_list .)
    PUBLIC          reduce using rule 83 (catch_list -> catch_item catch_list .)
    PROTECTED       reduce using rule 83 (catch_list -> catch_item catch_list .)
    PRIVATE         reduce using rule 83 (catch_list -> catch_item catch_list .)
    RBRACE          reduce using rule 83 (catch_list -> catch_item catch_list .)


state 185

    (85) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 206
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 186

    (86) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    empty                          shift and go to state 21
    statements                     shift and go to state 207
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 187

    (42) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE SEMI
    (44) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE elseif
    (45) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 208


state 188

    (48) conditions -> LBRACE condition RBRACE logical_operator . conditions
    (48) conditions -> . LBRACE condition RBRACE logical_operator conditions
    (49) conditions -> . LBRACE condition RBRACE

    LBRACE          shift and go to state 99

    conditions                     shift and go to state 209

state 189

    (105) logical_operator -> AND .

    LBRACE          reduce using rule 105 (logical_operator -> AND .)


state 190

    (106) logical_operator -> OR .

    LBRACE          reduce using rule 106 (logical_operator -> OR .)


state 191

    (43) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 210


state 192

    (39) arrayArg -> index ARROW value .
    (40) arrayArg -> index ARROW value . arrayArg
    (41) arrayArg -> index ARROW value . COMMA arrayArg
    (39) arrayArg -> . index ARROW value
    (40) arrayArg -> . index ARROW value arrayArg
    (41) arrayArg -> . index ARROW value COMMA arrayArg
    (50) index -> . INTEGER
    (51) index -> . STRING

    RPAREN          reduce using rule 39 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 212
    INTEGER         shift and go to state 142
    STRING          shift and go to state 143

    index                          shift and go to state 141
    arrayArg                       shift and go to state 211

state 193

    (52) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW . expression SEMI
    (68) expression -> . value operator value
    (69) expression -> . value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    expression                     shift and go to state 213
    value                          shift and go to state 23
    constant_use                   shift and go to state 52

state 194

    (36) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 214


state 195

    (88) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (93) parameters -> . parameter COMMA parameters
    (94) parameters -> . parameter
    (95) parameters -> . IDENTIFIER
    (96) parameters -> . empty
    (97) parameter -> . TYPE VARIABLE
    (98) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 88
    TYPE            shift and go to state 90
    VARIABLE        shift and go to state 150
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 215
    parameter                      shift and go to state 87
    empty                          shift and go to state 89

state 196

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameters RPAREN LBRACE statements RBRACE
    (93) parameters -> . parameter COMMA parameters
    (94) parameters -> . parameter
    (95) parameters -> . IDENTIFIER
    (96) parameters -> . empty
    (97) parameter -> . TYPE VARIABLE
    (98) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 88
    TYPE            shift and go to state 90
    VARIABLE        shift and go to state 150
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 216
    parameter                      shift and go to state 87
    empty                          shift and go to state 89

state 197

    (27) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    visibility                     shift and go to state 28
    statements                     shift and go to state 217
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23

state 198

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 199

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 218


state 200

    (102) use_clause_opt -> USE LPAREN variables . RPAREN

    RPAREN          shift and go to state 219


state 201

    (103) variables -> VARIABLE . COMMA variables
    (104) variables -> VARIABLE .

    COMMA           shift and go to state 220
    RPAREN          reduce using rule 104 (variables -> VARIABLE .)


state 202

    (53) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 221


state 203

    (52) function_arrow -> VARIABLE SET . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI

    FUNCTION        shift and go to state 80


state 204

    (28) while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 28 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 205

    (79) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .

    $end            reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    ECHO            reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VARIABLE        reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VAR             reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CLASS           reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FUNCTION        reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    WHILE           reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    DEFINE          reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CONST           reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    TRY             reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CATCH           reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IF              reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    INTEGER         reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FLOAT           reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PUBLIC          reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PROTECTED       reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PRIVATE         reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    RBRACE          reduce using rule 79 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)


state 206

    (85) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 222


state 207

    (86) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 223


state 208

    (42) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . SEMI
    (44) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . elseif
    (45) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (99) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (100) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
    (46) else -> . ELSE LBRACE statements RBRACE SEMI

    SEMI            shift and go to state 224
    ELSEIF          shift and go to state 227
    ELSE            shift and go to state 228

    elseif                         shift and go to state 225
    else                           shift and go to state 226

state 209

    (48) conditions -> LBRACE condition RBRACE logical_operator conditions .

    RPAREN          reduce using rule 48 (conditions -> LBRACE condition RBRACE logical_operator conditions .)


state 210

    (43) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 229


state 211

    (40) arrayArg -> index ARROW value arrayArg .

    RPAREN          reduce using rule 40 (arrayArg -> index ARROW value arrayArg .)


state 212

    (41) arrayArg -> index ARROW value COMMA . arrayArg
    (39) arrayArg -> . index ARROW value
    (40) arrayArg -> . index ARROW value arrayArg
    (41) arrayArg -> . index ARROW value COMMA arrayArg
    (50) index -> . INTEGER
    (51) index -> . STRING

    INTEGER         shift and go to state 142
    STRING          shift and go to state 143

    index                          shift and go to state 141
    arrayArg                       shift and go to state 230

state 213

    (52) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression . SEMI

    SEMI            shift and go to state 231


state 214

    (36) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CONST           reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IDENTIFIER      reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    TRY             reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CATCH           reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IF              reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 36 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 215

    (88) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 232


state 216

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 233


state 217

    (27) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 234


state 218

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    DEFINE          reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CONST           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    TRY             reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CATCH           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IF              reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)


state 219

    (102) use_clause_opt -> USE LPAREN variables RPAREN .

    LBRACE          reduce using rule 102 (use_clause_opt -> USE LPAREN variables RPAREN .)


state 220

    (103) variables -> VARIABLE COMMA . variables
    (103) variables -> . VARIABLE COMMA variables
    (104) variables -> . VARIABLE

    VARIABLE        shift and go to state 201

    variables                      shift and go to state 235

state 221

    (53) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow

    RPAREN          shift and go to state 124


state 222

    (85) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 85 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)


state 223

    (86) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 86 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)


state 224

    (42) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    DEFINE          reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CONST           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    IDENTIFIER      reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    TRY             reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CATCH           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)


state 225

    (44) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 44 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)


state 226

    (45) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 45 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)


state 227

    (99) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (100) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 236


state 228

    (46) else -> ELSE . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 237


state 229

    (43) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    DEFINE          reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CONST           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    IDENTIFIER      reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    TRY             reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CATCH           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)


state 230

    (41) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 41 (arrayArg -> index ARROW value COMMA arrayArg .)


state 231

    (52) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .

    $end            reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    ECHO            reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VARIABLE        reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VAR             reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CLASS           reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FUNCTION        reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    WHILE           reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    DEFINE          reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CONST           reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IDENTIFIER      reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    TRY             reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CATCH           reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IF              reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    INTEGER         reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FLOAT           reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PUBLIC          reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PROTECTED       reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PRIVATE         reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    RBRACE          reduce using rule 52 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)


state 232

    (88) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 238


state 233

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 239


state 234

    (27) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 27 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 235

    (103) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 103 (variables -> VARIABLE COMMA variables .)


state 236

    (99) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE elseif
    (100) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (47) condition -> . value comparison_operator value
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (81) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    condition                      shift and go to state 240
    value                          shift and go to state 92
    constant_use                   shift and go to state 52

state 237

    (46) else -> ELSE LBRACE . statements RBRACE SEMI
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 241
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 238

    (88) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    visibility                     shift and go to state 28
    statements                     shift and go to state 242
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23

state 239

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    visibility                     shift and go to state 28
    statements                     shift and go to state 243
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23

state 240

    (99) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE elseif
    (100) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 244


state 241

    (46) else -> ELSE LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 245


state 242

    (88) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 246


state 243

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 247


state 244

    (99) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE elseif
    (100) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 248


state 245

    (46) else -> ELSE LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 249


state 246

    (88) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 88 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 88 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 88 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 88 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 247

    (89) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 89 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 89 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 89 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 89 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 248

    (99) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE elseif
    (100) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . input SEMI
    (5) statement -> . expression SEMI
    (6) statement -> . object_declaration
    (7) statement -> . class_declaration
    (8) statement -> . array_declaration SEMI
    (9) statement -> . property_declaration SEMI
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . function_arrow
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (20) statement -> . empty
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO LPAREN STRING RPAREN
    (33) print -> . ECHO STRING
    (34) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (35) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (68) expression -> . value operator value
    (69) expression -> . value
    (36) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (72) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (37) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (87) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (52) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (53) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (28) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (79) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (80) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (81) constant_use -> . IDENTIFIER
    (82) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (85) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (86) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (44) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (45) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (107) empty -> .
    (60) value -> . VARIABLE
    (61) value -> . INTEGER
    (62) value -> . constant_use
    (63) value -> . FLOAT
    (90) visibility -> . PUBLIC
    (91) visibility -> . PROTECTED
    (92) visibility -> . PRIVATE

  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DEFINE resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for TRY resolved as shift
  ! shift/reduce conflict for CATCH resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
  ! shift/reduce conflict for PRIVATE resolved as shift
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    RBRACE          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

  ! ECHO            [ reduce using rule 107 (empty -> .) ]
  ! VARIABLE        [ reduce using rule 107 (empty -> .) ]
  ! VAR             [ reduce using rule 107 (empty -> .) ]
  ! CLASS           [ reduce using rule 107 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 107 (empty -> .) ]
  ! WHILE           [ reduce using rule 107 (empty -> .) ]
  ! DEFINE          [ reduce using rule 107 (empty -> .) ]
  ! CONST           [ reduce using rule 107 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 107 (empty -> .) ]
  ! TRY             [ reduce using rule 107 (empty -> .) ]
  ! CATCH           [ reduce using rule 107 (empty -> .) ]
  ! IF              [ reduce using rule 107 (empty -> .) ]
  ! INTEGER         [ reduce using rule 107 (empty -> .) ]
  ! FLOAT           [ reduce using rule 107 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 107 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 107 (empty -> .) ]
  ! PRIVATE         [ reduce using rule 107 (empty -> .) ]

    statements                     shift and go to state 250
    statement                      shift and go to state 96
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    input                          shift and go to state 5
    expression                     shift and go to state 6
    object_declaration             shift and go to state 7
    class_declaration              shift and go to state 8
    array_declaration              shift and go to state 9
    property_declaration           shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    function_arrow                 shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    empty                          shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 249

    (46) else -> ELSE LBRACE statements RBRACE SEMI .

    $end            reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    DEFINE          reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CONST           reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    IDENTIFIER      reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    TRY             reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CATCH           reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 46 (else -> ELSE LBRACE statements RBRACE SEMI .)


state 250

    (99) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE elseif
    (100) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 251


state 251

    (99) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE . elseif
    (100) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (99) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (100) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
    (46) else -> . ELSE LBRACE statements RBRACE SEMI

    ELSEIF          shift and go to state 227
    ELSE            shift and go to state 228

    elseif                         shift and go to state 252
    else                           shift and go to state 253

state 252

    (99) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 99 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)


state 253

    (100) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 100 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ECHO in state 68 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 68 resolved as shift
WARNING: shift/reduce conflict for VAR in state 68 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 68 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 68 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 68 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 68 resolved as shift
WARNING: shift/reduce conflict for CONST in state 68 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 68 resolved as shift
WARNING: shift/reduce conflict for TRY in state 68 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 68 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 68 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 68 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 68 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 68 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 68 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 96 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 96 resolved as shift
WARNING: shift/reduce conflict for VAR in state 96 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 96 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 96 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 96 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 96 resolved as shift
WARNING: shift/reduce conflict for CONST in state 96 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 96 resolved as shift
WARNING: shift/reduce conflict for TRY in state 96 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 96 resolved as shift
WARNING: shift/reduce conflict for IF in state 96 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 96 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 96 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 96 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 96 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 96 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 130 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 151 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 151 resolved as shift
WARNING: shift/reduce conflict for VAR in state 151 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 151 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 151 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 151 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 151 resolved as shift
WARNING: shift/reduce conflict for CONST in state 151 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 151 resolved as shift
WARNING: shift/reduce conflict for TRY in state 151 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 151 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 151 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 151 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 151 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 151 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 156 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 156 resolved as shift
WARNING: shift/reduce conflict for VAR in state 156 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 156 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 156 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 156 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 156 resolved as shift
WARNING: shift/reduce conflict for CONST in state 156 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 156 resolved as shift
WARNING: shift/reduce conflict for TRY in state 156 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 156 resolved as shift
WARNING: shift/reduce conflict for IF in state 156 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 156 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 156 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 156 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 156 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 156 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 160 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 164 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 164 resolved as shift
WARNING: shift/reduce conflict for VAR in state 164 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 164 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 164 resolved as shift
WARNING: shift/reduce conflict for CONST in state 164 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 164 resolved as shift
WARNING: shift/reduce conflict for TRY in state 164 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 164 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 164 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 164 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 164 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 164 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 166 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 166 resolved as shift
WARNING: shift/reduce conflict for VAR in state 166 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 166 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 166 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 166 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 166 resolved as shift
WARNING: shift/reduce conflict for CONST in state 166 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 166 resolved as shift
WARNING: shift/reduce conflict for TRY in state 166 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 166 resolved as shift
WARNING: shift/reduce conflict for IF in state 166 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 166 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 166 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 166 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 166 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 166 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 177 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 177 resolved as shift
WARNING: shift/reduce conflict for VAR in state 177 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 177 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 177 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 177 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 177 resolved as shift
WARNING: shift/reduce conflict for CONST in state 177 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 177 resolved as shift
WARNING: shift/reduce conflict for TRY in state 177 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 177 resolved as shift
WARNING: shift/reduce conflict for IF in state 177 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 177 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 177 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 177 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 177 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 177 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 185 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 185 resolved as shift
WARNING: shift/reduce conflict for VAR in state 185 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 185 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 185 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 185 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 185 resolved as shift
WARNING: shift/reduce conflict for CONST in state 185 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 185 resolved as shift
WARNING: shift/reduce conflict for TRY in state 185 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 185 resolved as shift
WARNING: shift/reduce conflict for IF in state 185 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 185 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 185 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 185 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 185 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 185 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 186 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 186 resolved as shift
WARNING: shift/reduce conflict for VAR in state 186 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 186 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 186 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 186 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 186 resolved as shift
WARNING: shift/reduce conflict for CONST in state 186 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 186 resolved as shift
WARNING: shift/reduce conflict for TRY in state 186 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 186 resolved as shift
WARNING: shift/reduce conflict for IF in state 186 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 186 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 186 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 186 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 186 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 186 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 197 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 197 resolved as shift
WARNING: shift/reduce conflict for VAR in state 197 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 197 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 197 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 197 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 197 resolved as shift
WARNING: shift/reduce conflict for CONST in state 197 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 197 resolved as shift
WARNING: shift/reduce conflict for TRY in state 197 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 197 resolved as shift
WARNING: shift/reduce conflict for IF in state 197 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 197 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 197 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 197 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 197 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 197 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 237 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 237 resolved as shift
WARNING: shift/reduce conflict for VAR in state 237 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 237 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 237 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 237 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 237 resolved as shift
WARNING: shift/reduce conflict for CONST in state 237 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 237 resolved as shift
WARNING: shift/reduce conflict for TRY in state 237 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 237 resolved as shift
WARNING: shift/reduce conflict for IF in state 237 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 237 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 237 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 237 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 237 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 237 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 238 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 238 resolved as shift
WARNING: shift/reduce conflict for VAR in state 238 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 238 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 238 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 238 resolved as shift
WARNING: shift/reduce conflict for CONST in state 238 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 238 resolved as shift
WARNING: shift/reduce conflict for TRY in state 238 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 238 resolved as shift
WARNING: shift/reduce conflict for IF in state 238 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 238 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 238 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 238 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 238 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 239 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 239 resolved as shift
WARNING: shift/reduce conflict for VAR in state 239 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 239 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 239 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 239 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 239 resolved as shift
WARNING: shift/reduce conflict for CONST in state 239 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 239 resolved as shift
WARNING: shift/reduce conflict for TRY in state 239 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 239 resolved as shift
WARNING: shift/reduce conflict for IF in state 239 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 239 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 239 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 239 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 239 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 239 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 248 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 248 resolved as shift
WARNING: shift/reduce conflict for VAR in state 248 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 248 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 248 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 248 resolved as shift
WARNING: shift/reduce conflict for DEFINE in state 248 resolved as shift
WARNING: shift/reduce conflict for CONST in state 248 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 248 resolved as shift
WARNING: shift/reduce conflict for TRY in state 248 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 248 resolved as shift
WARNING: shift/reduce conflict for IF in state 248 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 248 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 248 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 248 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 248 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 248 resolved as shift
WARNING: reduce/reduce conflict in state 74 resolved using rule (declaration -> VARIABLE SET value)
WARNING: rejected rule (expression -> value) in state 74
WARNING: reduce/reduce conflict in state 96 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 96
