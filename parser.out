Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOLLAR
    ERROR
    EXP
    FOR
    IDENTICAL
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    PHP_CLOSE
    PHP_OPEN
    RBRACKET
    RETURN
    STATIC
    THROW

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> print_error
Rule 3     statement -> declaration SEMI
Rule 4     statement -> declaration_error
Rule 5     statement -> input SEMI
Rule 6     statement -> expression SEMI
Rule 7     statement -> object_declaration
Rule 8     statement -> class_declaration
Rule 9     statement -> array_declaration SEMI
Rule 10    statement -> property_declaration SEMI
Rule 11    statement -> function_statement
Rule 12    statement -> function_variable
Rule 13    statement -> function_anonymous
Rule 14    statement -> function_arrow
Rule 15    statement -> while
Rule 16    statement -> constant_declaration
Rule 17    statement -> constant_use
Rule 18    statement -> try_catch
Rule 19    statement -> catch_item
Rule 20    statement -> if
Rule 21    statements -> statement statements
Rule 22    statements -> statement
Rule 23    declaration -> VARIABLE SET value
Rule 24    declaration -> VARIABLE SET STRING
Rule 25    declaration -> VARIABLE SET expression
Rule 26    declaration -> VARIABLE SET condition
Rule 27    declaration_error -> VARIABLE SET error
Rule 28    function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 29    while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 30    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 31    print -> ECHO LPAREN value RPAREN
Rule 32    print -> ECHO value
Rule 33    print -> ECHO LPAREN STRING RPAREN
Rule 34    print -> ECHO STRING
Rule 35    print_error -> ECHO error
Rule 36    input -> VARIABLE SET READLINE LPAREN STRING RPAREN
Rule 37    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 38    array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN
Rule 39    array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN
Rule 40    arrayArg -> index ARROW value
Rule 41    arrayArg -> index ARROW value COMMA arrayArg
Rule 42    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE
Rule 43    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
Rule 44    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else
Rule 45    elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE
Rule 46    elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
Rule 47    elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else
Rule 48    else -> ELSE LBRACE statements RBRACE
Rule 49    condition -> value comparison_operator value
Rule 50    conditions -> condition logical_operator conditions
Rule 51    conditions -> condition
Rule 52    index -> INTEGER
Rule 53    index -> STRING
Rule 54    function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 55    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
Rule 56    comparison_operator -> LT
Rule 57    comparison_operator -> GT
Rule 58    comparison_operator -> LE
Rule 59    comparison_operator -> GE
Rule 60    comparison_operator -> EQ
Rule 61    comparison_operator -> NE
Rule 62    value -> VARIABLE
Rule 63    value -> INTEGER
Rule 64    value -> constant_use
Rule 65    value -> FLOAT
Rule 66    operator -> PLUS
Rule 67    operator -> MINUS
Rule 68    operator -> TIMES
Rule 69    operator -> DIVIDE
Rule 70    expression -> value operator value
Rule 71    expression -> value
Rule 72    expressions -> expression COMMA expressions
Rule 73    expressions -> expression
Rule 74    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 75    class_body -> class_member_list
Rule 76    class_member_list -> class_member class_member_list
Rule 77    class_member_list -> class_member
Rule 78    class_member -> property_declaration
Rule 79    class_member -> method_declaration
Rule 80    class_member -> constructor_declaration
Rule 81    constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI
Rule 82    constant_declaration -> CONST IDENTIFIER SET expression SEMI
Rule 83    constant_use -> IDENTIFIER
Rule 84    try_catch -> TRY LBRACE statements RBRACE catch_list
Rule 85    catch_list -> catch_item catch_list
Rule 86    catch_list -> empty
Rule 87    catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
Rule 88    catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
Rule 89    property_declaration -> visibility VARIABLE
Rule 90    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 91    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 92    visibility -> PUBLIC
Rule 93    visibility -> PROTECTED
Rule 94    visibility -> PRIVATE
Rule 95    parameters -> parameter COMMA parameters
Rule 96    parameters -> parameter
Rule 97    parameters -> IDENTIFIER
Rule 98    parameters -> empty
Rule 99    parameter -> TYPE VARIABLE
Rule 100   parameter -> VARIABLE
Rule 101   function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
Rule 102   use_clause_opt -> USE LPAREN variables RPAREN
Rule 103   variables -> VARIABLE COMMA variables
Rule 104   variables -> VARIABLE
Rule 105   logical_operator -> AND
Rule 106   logical_operator -> OR
Rule 107   empty -> <empty>

Terminals, with rules where they appear

AND                  : 105
ARRAY                : 38 39
ARROW                : 40 41 54 55
CATCH                : 87 88
CLASS                : 37 74
COMMA                : 41 72 81 95 103
COMMENT              : 
CONST                : 82
CONSTRUCT            : 91
DEFINE               : 81
DIVIDE               : 69
DOLLAR               : 
ECHO                 : 31 32 33 34 35
ELSE                 : 48
ELSEIF               : 45 46 47
EQ                   : 60
ERROR                : 
EXCEPTION            : 87 88
EXP                  : 
FLOAT                : 65
FOR                  : 
FUNCTION             : 28 30 54 55 90 91 101
GE                   : 59
GT                   : 57
IDENTICAL            : 
IDENTIFIER           : 28 74 82 83 90 97
IF                   : 42 43 44
INTEGER              : 52 63
LBRACE               : 28 29 30 42 43 44 45 46 47 48 74 84 87 88 90 91 101
LBRACKET             : 
LE                   : 58
LPAREN               : 28 29 30 31 33 36 37 38 39 42 43 44 45 46 47 54 55 81 87 88 90 91 101 102
LT                   : 56
MINUS                : 67
MOD                  : 
NE                   : 61
NEW                  : 37
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 106
PHP_CLOSE            : 
PHP_OPEN             : 
PLUS                 : 66
PRIVATE              : 94
PROTECTED            : 93
PUBLIC               : 92
RBRACE               : 28 29 30 42 43 44 45 46 47 48 74 84 87 88 90 91 101
RBRACKET             : 
READLINE             : 36
RETURN               : 
RPAREN               : 28 29 30 31 33 36 37 38 39 42 43 44 45 46 47 54 55 81 87 88 90 91 101 102
SEMI                 : 1 3 5 6 9 10 37 54 81 82
SET                  : 23 24 25 26 27 36 37 38 39 54 82
STATIC               : 
STRING               : 24 33 34 36 53 81
THROW                : 
TIMES                : 68
TRY                  : 84
TYPE                 : 99
USE                  : 102
VAR                  : 37
VARIABLE             : 23 24 25 26 27 30 36 37 38 39 54 54 55 62 87 89 99 100 103 104
WHILE                : 29
error                : 27 35

Nonterminals, with rules where they appear

arrayArg             : 38 41
array_declaration    : 9
catch_item           : 19 85
catch_list           : 84 85
class_body           : 74
class_declaration    : 8
class_member         : 76 77
class_member_list    : 75 76
comparison_operator  : 49
condition            : 26 29 50 51
conditions           : 42 43 44 45 46 47 50
constant_declaration : 16
constant_use         : 17 64
constructor_declaration : 80
declaration          : 3
declaration_error    : 4
else                 : 44 47
elseif               : 43 46
empty                : 39 86 88 98
expression           : 6 25 54 72 73 81 82
expressions          : 72
function_anonymous   : 13
function_arrow       : 14 55
function_statement   : 11
function_variable    : 12
if                   : 20
index                : 40 41
input                : 5
logical_operator     : 50
method_declaration   : 79
object_declaration   : 7
operator             : 70
parameter            : 95 96
parameters           : 28 90 91 95 101
print                : 1
print_error          : 2
property_declaration : 10 78
statement            : 21 22 0
statements           : 21 28 29 30 42 43 44 45 46 47 48 84 87 88 90 91 101
try_catch            : 18
use_clause_opt       : 101
value                : 23 31 32 40 41 49 49 70 70 71
variables            : 102 103
visibility           : 28 89 90 91
while                : 15

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statement                      shift and go to state 1
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 41


state 3

    (2) statement -> print_error .

    $end            reduce using rule 2 (statement -> print_error .)
    ECHO            reduce using rule 2 (statement -> print_error .)
    VARIABLE        reduce using rule 2 (statement -> print_error .)
    VAR             reduce using rule 2 (statement -> print_error .)
    CLASS           reduce using rule 2 (statement -> print_error .)
    FUNCTION        reduce using rule 2 (statement -> print_error .)
    WHILE           reduce using rule 2 (statement -> print_error .)
    DEFINE          reduce using rule 2 (statement -> print_error .)
    CONST           reduce using rule 2 (statement -> print_error .)
    IDENTIFIER      reduce using rule 2 (statement -> print_error .)
    TRY             reduce using rule 2 (statement -> print_error .)
    CATCH           reduce using rule 2 (statement -> print_error .)
    IF              reduce using rule 2 (statement -> print_error .)
    INTEGER         reduce using rule 2 (statement -> print_error .)
    FLOAT           reduce using rule 2 (statement -> print_error .)
    PUBLIC          reduce using rule 2 (statement -> print_error .)
    PROTECTED       reduce using rule 2 (statement -> print_error .)
    PRIVATE         reduce using rule 2 (statement -> print_error .)
    RBRACE          reduce using rule 2 (statement -> print_error .)


state 4

    (3) statement -> declaration . SEMI

    SEMI            shift and go to state 42


state 5

    (4) statement -> declaration_error .

    $end            reduce using rule 4 (statement -> declaration_error .)
    ECHO            reduce using rule 4 (statement -> declaration_error .)
    VARIABLE        reduce using rule 4 (statement -> declaration_error .)
    VAR             reduce using rule 4 (statement -> declaration_error .)
    CLASS           reduce using rule 4 (statement -> declaration_error .)
    FUNCTION        reduce using rule 4 (statement -> declaration_error .)
    WHILE           reduce using rule 4 (statement -> declaration_error .)
    DEFINE          reduce using rule 4 (statement -> declaration_error .)
    CONST           reduce using rule 4 (statement -> declaration_error .)
    IDENTIFIER      reduce using rule 4 (statement -> declaration_error .)
    TRY             reduce using rule 4 (statement -> declaration_error .)
    CATCH           reduce using rule 4 (statement -> declaration_error .)
    IF              reduce using rule 4 (statement -> declaration_error .)
    INTEGER         reduce using rule 4 (statement -> declaration_error .)
    FLOAT           reduce using rule 4 (statement -> declaration_error .)
    PUBLIC          reduce using rule 4 (statement -> declaration_error .)
    PROTECTED       reduce using rule 4 (statement -> declaration_error .)
    PRIVATE         reduce using rule 4 (statement -> declaration_error .)
    RBRACE          reduce using rule 4 (statement -> declaration_error .)


state 6

    (5) statement -> input . SEMI

    SEMI            shift and go to state 43


state 7

    (6) statement -> expression . SEMI

    SEMI            shift and go to state 44


state 8

    (7) statement -> object_declaration .

    $end            reduce using rule 7 (statement -> object_declaration .)
    ECHO            reduce using rule 7 (statement -> object_declaration .)
    VARIABLE        reduce using rule 7 (statement -> object_declaration .)
    VAR             reduce using rule 7 (statement -> object_declaration .)
    CLASS           reduce using rule 7 (statement -> object_declaration .)
    FUNCTION        reduce using rule 7 (statement -> object_declaration .)
    WHILE           reduce using rule 7 (statement -> object_declaration .)
    DEFINE          reduce using rule 7 (statement -> object_declaration .)
    CONST           reduce using rule 7 (statement -> object_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> object_declaration .)
    TRY             reduce using rule 7 (statement -> object_declaration .)
    CATCH           reduce using rule 7 (statement -> object_declaration .)
    IF              reduce using rule 7 (statement -> object_declaration .)
    INTEGER         reduce using rule 7 (statement -> object_declaration .)
    FLOAT           reduce using rule 7 (statement -> object_declaration .)
    PUBLIC          reduce using rule 7 (statement -> object_declaration .)
    PROTECTED       reduce using rule 7 (statement -> object_declaration .)
    PRIVATE         reduce using rule 7 (statement -> object_declaration .)
    RBRACE          reduce using rule 7 (statement -> object_declaration .)


state 9

    (8) statement -> class_declaration .

    $end            reduce using rule 8 (statement -> class_declaration .)
    ECHO            reduce using rule 8 (statement -> class_declaration .)
    VARIABLE        reduce using rule 8 (statement -> class_declaration .)
    VAR             reduce using rule 8 (statement -> class_declaration .)
    CLASS           reduce using rule 8 (statement -> class_declaration .)
    FUNCTION        reduce using rule 8 (statement -> class_declaration .)
    WHILE           reduce using rule 8 (statement -> class_declaration .)
    DEFINE          reduce using rule 8 (statement -> class_declaration .)
    CONST           reduce using rule 8 (statement -> class_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> class_declaration .)
    TRY             reduce using rule 8 (statement -> class_declaration .)
    CATCH           reduce using rule 8 (statement -> class_declaration .)
    IF              reduce using rule 8 (statement -> class_declaration .)
    INTEGER         reduce using rule 8 (statement -> class_declaration .)
    FLOAT           reduce using rule 8 (statement -> class_declaration .)
    PUBLIC          reduce using rule 8 (statement -> class_declaration .)
    PROTECTED       reduce using rule 8 (statement -> class_declaration .)
    PRIVATE         reduce using rule 8 (statement -> class_declaration .)
    RBRACE          reduce using rule 8 (statement -> class_declaration .)


state 10

    (9) statement -> array_declaration . SEMI

    SEMI            shift and go to state 45


state 11

    (10) statement -> property_declaration . SEMI

    SEMI            shift and go to state 46


state 12

    (11) statement -> function_statement .

    $end            reduce using rule 11 (statement -> function_statement .)
    ECHO            reduce using rule 11 (statement -> function_statement .)
    VARIABLE        reduce using rule 11 (statement -> function_statement .)
    VAR             reduce using rule 11 (statement -> function_statement .)
    CLASS           reduce using rule 11 (statement -> function_statement .)
    FUNCTION        reduce using rule 11 (statement -> function_statement .)
    WHILE           reduce using rule 11 (statement -> function_statement .)
    DEFINE          reduce using rule 11 (statement -> function_statement .)
    CONST           reduce using rule 11 (statement -> function_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> function_statement .)
    TRY             reduce using rule 11 (statement -> function_statement .)
    CATCH           reduce using rule 11 (statement -> function_statement .)
    IF              reduce using rule 11 (statement -> function_statement .)
    INTEGER         reduce using rule 11 (statement -> function_statement .)
    FLOAT           reduce using rule 11 (statement -> function_statement .)
    PUBLIC          reduce using rule 11 (statement -> function_statement .)
    PROTECTED       reduce using rule 11 (statement -> function_statement .)
    PRIVATE         reduce using rule 11 (statement -> function_statement .)
    RBRACE          reduce using rule 11 (statement -> function_statement .)


state 13

    (12) statement -> function_variable .

    $end            reduce using rule 12 (statement -> function_variable .)
    ECHO            reduce using rule 12 (statement -> function_variable .)
    VARIABLE        reduce using rule 12 (statement -> function_variable .)
    VAR             reduce using rule 12 (statement -> function_variable .)
    CLASS           reduce using rule 12 (statement -> function_variable .)
    FUNCTION        reduce using rule 12 (statement -> function_variable .)
    WHILE           reduce using rule 12 (statement -> function_variable .)
    DEFINE          reduce using rule 12 (statement -> function_variable .)
    CONST           reduce using rule 12 (statement -> function_variable .)
    IDENTIFIER      reduce using rule 12 (statement -> function_variable .)
    TRY             reduce using rule 12 (statement -> function_variable .)
    CATCH           reduce using rule 12 (statement -> function_variable .)
    IF              reduce using rule 12 (statement -> function_variable .)
    INTEGER         reduce using rule 12 (statement -> function_variable .)
    FLOAT           reduce using rule 12 (statement -> function_variable .)
    PUBLIC          reduce using rule 12 (statement -> function_variable .)
    PROTECTED       reduce using rule 12 (statement -> function_variable .)
    PRIVATE         reduce using rule 12 (statement -> function_variable .)
    RBRACE          reduce using rule 12 (statement -> function_variable .)


state 14

    (13) statement -> function_anonymous .

    $end            reduce using rule 13 (statement -> function_anonymous .)
    ECHO            reduce using rule 13 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 13 (statement -> function_anonymous .)
    VAR             reduce using rule 13 (statement -> function_anonymous .)
    CLASS           reduce using rule 13 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 13 (statement -> function_anonymous .)
    WHILE           reduce using rule 13 (statement -> function_anonymous .)
    DEFINE          reduce using rule 13 (statement -> function_anonymous .)
    CONST           reduce using rule 13 (statement -> function_anonymous .)
    IDENTIFIER      reduce using rule 13 (statement -> function_anonymous .)
    TRY             reduce using rule 13 (statement -> function_anonymous .)
    CATCH           reduce using rule 13 (statement -> function_anonymous .)
    IF              reduce using rule 13 (statement -> function_anonymous .)
    INTEGER         reduce using rule 13 (statement -> function_anonymous .)
    FLOAT           reduce using rule 13 (statement -> function_anonymous .)
    PUBLIC          reduce using rule 13 (statement -> function_anonymous .)
    PROTECTED       reduce using rule 13 (statement -> function_anonymous .)
    PRIVATE         reduce using rule 13 (statement -> function_anonymous .)
    RBRACE          reduce using rule 13 (statement -> function_anonymous .)


state 15

    (14) statement -> function_arrow .

    $end            reduce using rule 14 (statement -> function_arrow .)
    ECHO            reduce using rule 14 (statement -> function_arrow .)
    VARIABLE        reduce using rule 14 (statement -> function_arrow .)
    VAR             reduce using rule 14 (statement -> function_arrow .)
    CLASS           reduce using rule 14 (statement -> function_arrow .)
    FUNCTION        reduce using rule 14 (statement -> function_arrow .)
    WHILE           reduce using rule 14 (statement -> function_arrow .)
    DEFINE          reduce using rule 14 (statement -> function_arrow .)
    CONST           reduce using rule 14 (statement -> function_arrow .)
    IDENTIFIER      reduce using rule 14 (statement -> function_arrow .)
    TRY             reduce using rule 14 (statement -> function_arrow .)
    CATCH           reduce using rule 14 (statement -> function_arrow .)
    IF              reduce using rule 14 (statement -> function_arrow .)
    INTEGER         reduce using rule 14 (statement -> function_arrow .)
    FLOAT           reduce using rule 14 (statement -> function_arrow .)
    PUBLIC          reduce using rule 14 (statement -> function_arrow .)
    PROTECTED       reduce using rule 14 (statement -> function_arrow .)
    PRIVATE         reduce using rule 14 (statement -> function_arrow .)
    RBRACE          reduce using rule 14 (statement -> function_arrow .)


state 16

    (15) statement -> while .

    $end            reduce using rule 15 (statement -> while .)
    ECHO            reduce using rule 15 (statement -> while .)
    VARIABLE        reduce using rule 15 (statement -> while .)
    VAR             reduce using rule 15 (statement -> while .)
    CLASS           reduce using rule 15 (statement -> while .)
    FUNCTION        reduce using rule 15 (statement -> while .)
    WHILE           reduce using rule 15 (statement -> while .)
    DEFINE          reduce using rule 15 (statement -> while .)
    CONST           reduce using rule 15 (statement -> while .)
    IDENTIFIER      reduce using rule 15 (statement -> while .)
    TRY             reduce using rule 15 (statement -> while .)
    CATCH           reduce using rule 15 (statement -> while .)
    IF              reduce using rule 15 (statement -> while .)
    INTEGER         reduce using rule 15 (statement -> while .)
    FLOAT           reduce using rule 15 (statement -> while .)
    PUBLIC          reduce using rule 15 (statement -> while .)
    PROTECTED       reduce using rule 15 (statement -> while .)
    PRIVATE         reduce using rule 15 (statement -> while .)
    RBRACE          reduce using rule 15 (statement -> while .)


state 17

    (16) statement -> constant_declaration .

    $end            reduce using rule 16 (statement -> constant_declaration .)
    ECHO            reduce using rule 16 (statement -> constant_declaration .)
    VARIABLE        reduce using rule 16 (statement -> constant_declaration .)
    VAR             reduce using rule 16 (statement -> constant_declaration .)
    CLASS           reduce using rule 16 (statement -> constant_declaration .)
    FUNCTION        reduce using rule 16 (statement -> constant_declaration .)
    WHILE           reduce using rule 16 (statement -> constant_declaration .)
    DEFINE          reduce using rule 16 (statement -> constant_declaration .)
    CONST           reduce using rule 16 (statement -> constant_declaration .)
    IDENTIFIER      reduce using rule 16 (statement -> constant_declaration .)
    TRY             reduce using rule 16 (statement -> constant_declaration .)
    CATCH           reduce using rule 16 (statement -> constant_declaration .)
    IF              reduce using rule 16 (statement -> constant_declaration .)
    INTEGER         reduce using rule 16 (statement -> constant_declaration .)
    FLOAT           reduce using rule 16 (statement -> constant_declaration .)
    PUBLIC          reduce using rule 16 (statement -> constant_declaration .)
    PROTECTED       reduce using rule 16 (statement -> constant_declaration .)
    PRIVATE         reduce using rule 16 (statement -> constant_declaration .)
    RBRACE          reduce using rule 16 (statement -> constant_declaration .)


state 18

    (17) statement -> constant_use .
    (64) value -> constant_use .

    $end            reduce using rule 17 (statement -> constant_use .)
    ECHO            reduce using rule 17 (statement -> constant_use .)
    VARIABLE        reduce using rule 17 (statement -> constant_use .)
    VAR             reduce using rule 17 (statement -> constant_use .)
    CLASS           reduce using rule 17 (statement -> constant_use .)
    FUNCTION        reduce using rule 17 (statement -> constant_use .)
    WHILE           reduce using rule 17 (statement -> constant_use .)
    DEFINE          reduce using rule 17 (statement -> constant_use .)
    CONST           reduce using rule 17 (statement -> constant_use .)
    IDENTIFIER      reduce using rule 17 (statement -> constant_use .)
    TRY             reduce using rule 17 (statement -> constant_use .)
    CATCH           reduce using rule 17 (statement -> constant_use .)
    IF              reduce using rule 17 (statement -> constant_use .)
    INTEGER         reduce using rule 17 (statement -> constant_use .)
    FLOAT           reduce using rule 17 (statement -> constant_use .)
    PUBLIC          reduce using rule 17 (statement -> constant_use .)
    PROTECTED       reduce using rule 17 (statement -> constant_use .)
    PRIVATE         reduce using rule 17 (statement -> constant_use .)
    RBRACE          reduce using rule 17 (statement -> constant_use .)
    PLUS            reduce using rule 64 (value -> constant_use .)
    MINUS           reduce using rule 64 (value -> constant_use .)
    TIMES           reduce using rule 64 (value -> constant_use .)
    DIVIDE          reduce using rule 64 (value -> constant_use .)
    SEMI            reduce using rule 64 (value -> constant_use .)


state 19

    (18) statement -> try_catch .

    $end            reduce using rule 18 (statement -> try_catch .)
    ECHO            reduce using rule 18 (statement -> try_catch .)
    VARIABLE        reduce using rule 18 (statement -> try_catch .)
    VAR             reduce using rule 18 (statement -> try_catch .)
    CLASS           reduce using rule 18 (statement -> try_catch .)
    FUNCTION        reduce using rule 18 (statement -> try_catch .)
    WHILE           reduce using rule 18 (statement -> try_catch .)
    DEFINE          reduce using rule 18 (statement -> try_catch .)
    CONST           reduce using rule 18 (statement -> try_catch .)
    IDENTIFIER      reduce using rule 18 (statement -> try_catch .)
    TRY             reduce using rule 18 (statement -> try_catch .)
    CATCH           reduce using rule 18 (statement -> try_catch .)
    IF              reduce using rule 18 (statement -> try_catch .)
    INTEGER         reduce using rule 18 (statement -> try_catch .)
    FLOAT           reduce using rule 18 (statement -> try_catch .)
    PUBLIC          reduce using rule 18 (statement -> try_catch .)
    PROTECTED       reduce using rule 18 (statement -> try_catch .)
    PRIVATE         reduce using rule 18 (statement -> try_catch .)
    RBRACE          reduce using rule 18 (statement -> try_catch .)


state 20

    (19) statement -> catch_item .

    $end            reduce using rule 19 (statement -> catch_item .)
    ECHO            reduce using rule 19 (statement -> catch_item .)
    VARIABLE        reduce using rule 19 (statement -> catch_item .)
    VAR             reduce using rule 19 (statement -> catch_item .)
    CLASS           reduce using rule 19 (statement -> catch_item .)
    FUNCTION        reduce using rule 19 (statement -> catch_item .)
    WHILE           reduce using rule 19 (statement -> catch_item .)
    DEFINE          reduce using rule 19 (statement -> catch_item .)
    CONST           reduce using rule 19 (statement -> catch_item .)
    IDENTIFIER      reduce using rule 19 (statement -> catch_item .)
    TRY             reduce using rule 19 (statement -> catch_item .)
    CATCH           reduce using rule 19 (statement -> catch_item .)
    IF              reduce using rule 19 (statement -> catch_item .)
    INTEGER         reduce using rule 19 (statement -> catch_item .)
    FLOAT           reduce using rule 19 (statement -> catch_item .)
    PUBLIC          reduce using rule 19 (statement -> catch_item .)
    PROTECTED       reduce using rule 19 (statement -> catch_item .)
    PRIVATE         reduce using rule 19 (statement -> catch_item .)
    RBRACE          reduce using rule 19 (statement -> catch_item .)


state 21

    (20) statement -> if .

    $end            reduce using rule 20 (statement -> if .)
    ECHO            reduce using rule 20 (statement -> if .)
    VARIABLE        reduce using rule 20 (statement -> if .)
    VAR             reduce using rule 20 (statement -> if .)
    CLASS           reduce using rule 20 (statement -> if .)
    FUNCTION        reduce using rule 20 (statement -> if .)
    WHILE           reduce using rule 20 (statement -> if .)
    DEFINE          reduce using rule 20 (statement -> if .)
    CONST           reduce using rule 20 (statement -> if .)
    IDENTIFIER      reduce using rule 20 (statement -> if .)
    TRY             reduce using rule 20 (statement -> if .)
    CATCH           reduce using rule 20 (statement -> if .)
    IF              reduce using rule 20 (statement -> if .)
    INTEGER         reduce using rule 20 (statement -> if .)
    FLOAT           reduce using rule 20 (statement -> if .)
    PUBLIC          reduce using rule 20 (statement -> if .)
    PROTECTED       reduce using rule 20 (statement -> if .)
    PRIVATE         reduce using rule 20 (statement -> if .)
    RBRACE          reduce using rule 20 (statement -> if .)


state 22

    (31) print -> ECHO . LPAREN value RPAREN
    (32) print -> ECHO . value
    (33) print -> ECHO . LPAREN STRING RPAREN
    (34) print -> ECHO . STRING
    (35) print_error -> ECHO . error
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    LPAREN          shift and go to state 47
    STRING          shift and go to state 49
    error           shift and go to state 50
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 48
    constant_use                   shift and go to state 52

state 23

    (70) expression -> value . operator value
    (71) expression -> value .
    (66) operator -> . PLUS
    (67) operator -> . MINUS
    (68) operator -> . TIMES
    (69) operator -> . DIVIDE

    SEMI            reduce using rule 71 (expression -> value .)
    RPAREN          reduce using rule 71 (expression -> value .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57

    operator                       shift and go to state 53

state 24

    (23) declaration -> VARIABLE . SET value
    (24) declaration -> VARIABLE . SET STRING
    (25) declaration -> VARIABLE . SET expression
    (26) declaration -> VARIABLE . SET condition
    (27) declaration_error -> VARIABLE . SET error
    (36) input -> VARIABLE . SET READLINE LPAREN STRING RPAREN
    (38) array_declaration -> VARIABLE . SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> VARIABLE . SET ARRAY LPAREN empty RPAREN
    (54) function_arrow -> VARIABLE . SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (62) value -> VARIABLE .

    SET             shift and go to state 58
    PLUS            reduce using rule 62 (value -> VARIABLE .)
    MINUS           reduce using rule 62 (value -> VARIABLE .)
    TIMES           reduce using rule 62 (value -> VARIABLE .)
    DIVIDE          reduce using rule 62 (value -> VARIABLE .)
    SEMI            reduce using rule 62 (value -> VARIABLE .)


state 25

    (37) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 59


state 26

    (74) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 60


state 27

    (83) constant_use -> IDENTIFIER .

    $end            reduce using rule 83 (constant_use -> IDENTIFIER .)
    PLUS            reduce using rule 83 (constant_use -> IDENTIFIER .)
    MINUS           reduce using rule 83 (constant_use -> IDENTIFIER .)
    TIMES           reduce using rule 83 (constant_use -> IDENTIFIER .)
    DIVIDE          reduce using rule 83 (constant_use -> IDENTIFIER .)
    SEMI            reduce using rule 83 (constant_use -> IDENTIFIER .)
    RPAREN          reduce using rule 83 (constant_use -> IDENTIFIER .)
    LT              reduce using rule 83 (constant_use -> IDENTIFIER .)
    GT              reduce using rule 83 (constant_use -> IDENTIFIER .)
    LE              reduce using rule 83 (constant_use -> IDENTIFIER .)
    GE              reduce using rule 83 (constant_use -> IDENTIFIER .)
    EQ              reduce using rule 83 (constant_use -> IDENTIFIER .)
    NE              reduce using rule 83 (constant_use -> IDENTIFIER .)
    ECHO            reduce using rule 83 (constant_use -> IDENTIFIER .)
    VARIABLE        reduce using rule 83 (constant_use -> IDENTIFIER .)
    VAR             reduce using rule 83 (constant_use -> IDENTIFIER .)
    CLASS           reduce using rule 83 (constant_use -> IDENTIFIER .)
    FUNCTION        reduce using rule 83 (constant_use -> IDENTIFIER .)
    WHILE           reduce using rule 83 (constant_use -> IDENTIFIER .)
    DEFINE          reduce using rule 83 (constant_use -> IDENTIFIER .)
    CONST           reduce using rule 83 (constant_use -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 83 (constant_use -> IDENTIFIER .)
    TRY             reduce using rule 83 (constant_use -> IDENTIFIER .)
    CATCH           reduce using rule 83 (constant_use -> IDENTIFIER .)
    IF              reduce using rule 83 (constant_use -> IDENTIFIER .)
    INTEGER         reduce using rule 83 (constant_use -> IDENTIFIER .)
    FLOAT           reduce using rule 83 (constant_use -> IDENTIFIER .)
    PUBLIC          reduce using rule 83 (constant_use -> IDENTIFIER .)
    PROTECTED       reduce using rule 83 (constant_use -> IDENTIFIER .)
    PRIVATE         reduce using rule 83 (constant_use -> IDENTIFIER .)
    RBRACE          reduce using rule 83 (constant_use -> IDENTIFIER .)
    AND             reduce using rule 83 (constant_use -> IDENTIFIER .)
    OR              reduce using rule 83 (constant_use -> IDENTIFIER .)
    COMMA           reduce using rule 83 (constant_use -> IDENTIFIER .)


state 28

    (89) property_declaration -> visibility . VARIABLE
    (28) function_statement -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 61
    FUNCTION        shift and go to state 62


state 29

    (30) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> FUNCTION . LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (55) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 63
    LPAREN          shift and go to state 64


state 30

    (29) while -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 65


state 31

    (81) constant_declaration -> DEFINE . LPAREN STRING COMMA expression RPAREN SEMI

    LPAREN          shift and go to state 66


state 32

    (82) constant_declaration -> CONST . IDENTIFIER SET expression SEMI

    IDENTIFIER      shift and go to state 67


state 33

    (84) try_catch -> TRY . LBRACE statements RBRACE catch_list

    LBRACE          shift and go to state 68


state 34

    (87) catch_item -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> CATCH . LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 69


state 35

    (42) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 70


state 36

    (63) value -> INTEGER .

    PLUS            reduce using rule 63 (value -> INTEGER .)
    MINUS           reduce using rule 63 (value -> INTEGER .)
    TIMES           reduce using rule 63 (value -> INTEGER .)
    DIVIDE          reduce using rule 63 (value -> INTEGER .)
    SEMI            reduce using rule 63 (value -> INTEGER .)
    RPAREN          reduce using rule 63 (value -> INTEGER .)
    LT              reduce using rule 63 (value -> INTEGER .)
    GT              reduce using rule 63 (value -> INTEGER .)
    LE              reduce using rule 63 (value -> INTEGER .)
    GE              reduce using rule 63 (value -> INTEGER .)
    EQ              reduce using rule 63 (value -> INTEGER .)
    NE              reduce using rule 63 (value -> INTEGER .)
    AND             reduce using rule 63 (value -> INTEGER .)
    OR              reduce using rule 63 (value -> INTEGER .)
    COMMA           reduce using rule 63 (value -> INTEGER .)


state 37

    (65) value -> FLOAT .

    PLUS            reduce using rule 65 (value -> FLOAT .)
    MINUS           reduce using rule 65 (value -> FLOAT .)
    TIMES           reduce using rule 65 (value -> FLOAT .)
    DIVIDE          reduce using rule 65 (value -> FLOAT .)
    SEMI            reduce using rule 65 (value -> FLOAT .)
    RPAREN          reduce using rule 65 (value -> FLOAT .)
    LT              reduce using rule 65 (value -> FLOAT .)
    GT              reduce using rule 65 (value -> FLOAT .)
    LE              reduce using rule 65 (value -> FLOAT .)
    GE              reduce using rule 65 (value -> FLOAT .)
    EQ              reduce using rule 65 (value -> FLOAT .)
    NE              reduce using rule 65 (value -> FLOAT .)
    AND             reduce using rule 65 (value -> FLOAT .)
    OR              reduce using rule 65 (value -> FLOAT .)
    COMMA           reduce using rule 65 (value -> FLOAT .)


state 38

    (92) visibility -> PUBLIC .

    VARIABLE        reduce using rule 92 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 92 (visibility -> PUBLIC .)


state 39

    (93) visibility -> PROTECTED .

    VARIABLE        reduce using rule 93 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 93 (visibility -> PROTECTED .)


state 40

    (94) visibility -> PRIVATE .

    VARIABLE        reduce using rule 94 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 94 (visibility -> PRIVATE .)


state 41

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    DEFINE          reduce using rule 1 (statement -> print SEMI .)
    CONST           reduce using rule 1 (statement -> print SEMI .)
    IDENTIFIER      reduce using rule 1 (statement -> print SEMI .)
    TRY             reduce using rule 1 (statement -> print SEMI .)
    CATCH           reduce using rule 1 (statement -> print SEMI .)
    IF              reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    PUBLIC          reduce using rule 1 (statement -> print SEMI .)
    PROTECTED       reduce using rule 1 (statement -> print SEMI .)
    PRIVATE         reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 42

    (3) statement -> declaration SEMI .

    $end            reduce using rule 3 (statement -> declaration SEMI .)
    ECHO            reduce using rule 3 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 3 (statement -> declaration SEMI .)
    VAR             reduce using rule 3 (statement -> declaration SEMI .)
    CLASS           reduce using rule 3 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 3 (statement -> declaration SEMI .)
    WHILE           reduce using rule 3 (statement -> declaration SEMI .)
    DEFINE          reduce using rule 3 (statement -> declaration SEMI .)
    CONST           reduce using rule 3 (statement -> declaration SEMI .)
    IDENTIFIER      reduce using rule 3 (statement -> declaration SEMI .)
    TRY             reduce using rule 3 (statement -> declaration SEMI .)
    CATCH           reduce using rule 3 (statement -> declaration SEMI .)
    IF              reduce using rule 3 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 3 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 3 (statement -> declaration SEMI .)
    PUBLIC          reduce using rule 3 (statement -> declaration SEMI .)
    PROTECTED       reduce using rule 3 (statement -> declaration SEMI .)
    PRIVATE         reduce using rule 3 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 3 (statement -> declaration SEMI .)


state 43

    (5) statement -> input SEMI .

    $end            reduce using rule 5 (statement -> input SEMI .)
    ECHO            reduce using rule 5 (statement -> input SEMI .)
    VARIABLE        reduce using rule 5 (statement -> input SEMI .)
    VAR             reduce using rule 5 (statement -> input SEMI .)
    CLASS           reduce using rule 5 (statement -> input SEMI .)
    FUNCTION        reduce using rule 5 (statement -> input SEMI .)
    WHILE           reduce using rule 5 (statement -> input SEMI .)
    DEFINE          reduce using rule 5 (statement -> input SEMI .)
    CONST           reduce using rule 5 (statement -> input SEMI .)
    IDENTIFIER      reduce using rule 5 (statement -> input SEMI .)
    TRY             reduce using rule 5 (statement -> input SEMI .)
    CATCH           reduce using rule 5 (statement -> input SEMI .)
    IF              reduce using rule 5 (statement -> input SEMI .)
    INTEGER         reduce using rule 5 (statement -> input SEMI .)
    FLOAT           reduce using rule 5 (statement -> input SEMI .)
    PUBLIC          reduce using rule 5 (statement -> input SEMI .)
    PROTECTED       reduce using rule 5 (statement -> input SEMI .)
    PRIVATE         reduce using rule 5 (statement -> input SEMI .)
    RBRACE          reduce using rule 5 (statement -> input SEMI .)


state 44

    (6) statement -> expression SEMI .

    $end            reduce using rule 6 (statement -> expression SEMI .)
    ECHO            reduce using rule 6 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 6 (statement -> expression SEMI .)
    VAR             reduce using rule 6 (statement -> expression SEMI .)
    CLASS           reduce using rule 6 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 6 (statement -> expression SEMI .)
    WHILE           reduce using rule 6 (statement -> expression SEMI .)
    DEFINE          reduce using rule 6 (statement -> expression SEMI .)
    CONST           reduce using rule 6 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 6 (statement -> expression SEMI .)
    TRY             reduce using rule 6 (statement -> expression SEMI .)
    CATCH           reduce using rule 6 (statement -> expression SEMI .)
    IF              reduce using rule 6 (statement -> expression SEMI .)
    INTEGER         reduce using rule 6 (statement -> expression SEMI .)
    FLOAT           reduce using rule 6 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 6 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 6 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 6 (statement -> expression SEMI .)
    RBRACE          reduce using rule 6 (statement -> expression SEMI .)


state 45

    (9) statement -> array_declaration SEMI .

    $end            reduce using rule 9 (statement -> array_declaration SEMI .)
    ECHO            reduce using rule 9 (statement -> array_declaration SEMI .)
    VARIABLE        reduce using rule 9 (statement -> array_declaration SEMI .)
    VAR             reduce using rule 9 (statement -> array_declaration SEMI .)
    CLASS           reduce using rule 9 (statement -> array_declaration SEMI .)
    FUNCTION        reduce using rule 9 (statement -> array_declaration SEMI .)
    WHILE           reduce using rule 9 (statement -> array_declaration SEMI .)
    DEFINE          reduce using rule 9 (statement -> array_declaration SEMI .)
    CONST           reduce using rule 9 (statement -> array_declaration SEMI .)
    IDENTIFIER      reduce using rule 9 (statement -> array_declaration SEMI .)
    TRY             reduce using rule 9 (statement -> array_declaration SEMI .)
    CATCH           reduce using rule 9 (statement -> array_declaration SEMI .)
    IF              reduce using rule 9 (statement -> array_declaration SEMI .)
    INTEGER         reduce using rule 9 (statement -> array_declaration SEMI .)
    FLOAT           reduce using rule 9 (statement -> array_declaration SEMI .)
    PUBLIC          reduce using rule 9 (statement -> array_declaration SEMI .)
    PROTECTED       reduce using rule 9 (statement -> array_declaration SEMI .)
    PRIVATE         reduce using rule 9 (statement -> array_declaration SEMI .)
    RBRACE          reduce using rule 9 (statement -> array_declaration SEMI .)


state 46

    (10) statement -> property_declaration SEMI .

    $end            reduce using rule 10 (statement -> property_declaration SEMI .)
    ECHO            reduce using rule 10 (statement -> property_declaration SEMI .)
    VARIABLE        reduce using rule 10 (statement -> property_declaration SEMI .)
    VAR             reduce using rule 10 (statement -> property_declaration SEMI .)
    CLASS           reduce using rule 10 (statement -> property_declaration SEMI .)
    FUNCTION        reduce using rule 10 (statement -> property_declaration SEMI .)
    WHILE           reduce using rule 10 (statement -> property_declaration SEMI .)
    DEFINE          reduce using rule 10 (statement -> property_declaration SEMI .)
    CONST           reduce using rule 10 (statement -> property_declaration SEMI .)
    IDENTIFIER      reduce using rule 10 (statement -> property_declaration SEMI .)
    TRY             reduce using rule 10 (statement -> property_declaration SEMI .)
    CATCH           reduce using rule 10 (statement -> property_declaration SEMI .)
    IF              reduce using rule 10 (statement -> property_declaration SEMI .)
    INTEGER         reduce using rule 10 (statement -> property_declaration SEMI .)
    FLOAT           reduce using rule 10 (statement -> property_declaration SEMI .)
    PUBLIC          reduce using rule 10 (statement -> property_declaration SEMI .)
    PROTECTED       reduce using rule 10 (statement -> property_declaration SEMI .)
    PRIVATE         reduce using rule 10 (statement -> property_declaration SEMI .)
    RBRACE          reduce using rule 10 (statement -> property_declaration SEMI .)


state 47

    (31) print -> ECHO LPAREN . value RPAREN
    (33) print -> ECHO LPAREN . STRING RPAREN
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    STRING          shift and go to state 72
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 71
    constant_use                   shift and go to state 52

state 48

    (32) print -> ECHO value .

    SEMI            reduce using rule 32 (print -> ECHO value .)


state 49

    (34) print -> ECHO STRING .

    SEMI            reduce using rule 34 (print -> ECHO STRING .)


state 50

    (35) print_error -> ECHO error .

    $end            reduce using rule 35 (print_error -> ECHO error .)
    ECHO            reduce using rule 35 (print_error -> ECHO error .)
    VARIABLE        reduce using rule 35 (print_error -> ECHO error .)
    VAR             reduce using rule 35 (print_error -> ECHO error .)
    CLASS           reduce using rule 35 (print_error -> ECHO error .)
    FUNCTION        reduce using rule 35 (print_error -> ECHO error .)
    WHILE           reduce using rule 35 (print_error -> ECHO error .)
    DEFINE          reduce using rule 35 (print_error -> ECHO error .)
    CONST           reduce using rule 35 (print_error -> ECHO error .)
    IDENTIFIER      reduce using rule 35 (print_error -> ECHO error .)
    TRY             reduce using rule 35 (print_error -> ECHO error .)
    CATCH           reduce using rule 35 (print_error -> ECHO error .)
    IF              reduce using rule 35 (print_error -> ECHO error .)
    INTEGER         reduce using rule 35 (print_error -> ECHO error .)
    FLOAT           reduce using rule 35 (print_error -> ECHO error .)
    PUBLIC          reduce using rule 35 (print_error -> ECHO error .)
    PROTECTED       reduce using rule 35 (print_error -> ECHO error .)
    PRIVATE         reduce using rule 35 (print_error -> ECHO error .)
    RBRACE          reduce using rule 35 (print_error -> ECHO error .)


state 51

    (62) value -> VARIABLE .

    SEMI            reduce using rule 62 (value -> VARIABLE .)
    RPAREN          reduce using rule 62 (value -> VARIABLE .)
    PLUS            reduce using rule 62 (value -> VARIABLE .)
    MINUS           reduce using rule 62 (value -> VARIABLE .)
    TIMES           reduce using rule 62 (value -> VARIABLE .)
    DIVIDE          reduce using rule 62 (value -> VARIABLE .)
    LT              reduce using rule 62 (value -> VARIABLE .)
    GT              reduce using rule 62 (value -> VARIABLE .)
    LE              reduce using rule 62 (value -> VARIABLE .)
    GE              reduce using rule 62 (value -> VARIABLE .)
    EQ              reduce using rule 62 (value -> VARIABLE .)
    NE              reduce using rule 62 (value -> VARIABLE .)
    AND             reduce using rule 62 (value -> VARIABLE .)
    OR              reduce using rule 62 (value -> VARIABLE .)
    COMMA           reduce using rule 62 (value -> VARIABLE .)


state 52

    (64) value -> constant_use .

    SEMI            reduce using rule 64 (value -> constant_use .)
    RPAREN          reduce using rule 64 (value -> constant_use .)
    PLUS            reduce using rule 64 (value -> constant_use .)
    MINUS           reduce using rule 64 (value -> constant_use .)
    TIMES           reduce using rule 64 (value -> constant_use .)
    DIVIDE          reduce using rule 64 (value -> constant_use .)
    LT              reduce using rule 64 (value -> constant_use .)
    GT              reduce using rule 64 (value -> constant_use .)
    LE              reduce using rule 64 (value -> constant_use .)
    GE              reduce using rule 64 (value -> constant_use .)
    EQ              reduce using rule 64 (value -> constant_use .)
    NE              reduce using rule 64 (value -> constant_use .)
    AND             reduce using rule 64 (value -> constant_use .)
    OR              reduce using rule 64 (value -> constant_use .)
    COMMA           reduce using rule 64 (value -> constant_use .)


state 53

    (70) expression -> value operator . value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 73
    constant_use                   shift and go to state 52

state 54

    (66) operator -> PLUS .

    VARIABLE        reduce using rule 66 (operator -> PLUS .)
    INTEGER         reduce using rule 66 (operator -> PLUS .)
    FLOAT           reduce using rule 66 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 66 (operator -> PLUS .)


state 55

    (67) operator -> MINUS .

    VARIABLE        reduce using rule 67 (operator -> MINUS .)
    INTEGER         reduce using rule 67 (operator -> MINUS .)
    FLOAT           reduce using rule 67 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 67 (operator -> MINUS .)


state 56

    (68) operator -> TIMES .

    VARIABLE        reduce using rule 68 (operator -> TIMES .)
    INTEGER         reduce using rule 68 (operator -> TIMES .)
    FLOAT           reduce using rule 68 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 68 (operator -> TIMES .)


state 57

    (69) operator -> DIVIDE .

    VARIABLE        reduce using rule 69 (operator -> DIVIDE .)
    INTEGER         reduce using rule 69 (operator -> DIVIDE .)
    FLOAT           reduce using rule 69 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 69 (operator -> DIVIDE .)


state 58

    (23) declaration -> VARIABLE SET . value
    (24) declaration -> VARIABLE SET . STRING
    (25) declaration -> VARIABLE SET . expression
    (26) declaration -> VARIABLE SET . condition
    (27) declaration_error -> VARIABLE SET . error
    (36) input -> VARIABLE SET . READLINE LPAREN STRING RPAREN
    (38) array_declaration -> VARIABLE SET . ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> VARIABLE SET . ARRAY LPAREN empty RPAREN
    (54) function_arrow -> VARIABLE SET . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (70) expression -> . value operator value
    (71) expression -> . value
    (49) condition -> . value comparison_operator value
    (83) constant_use -> . IDENTIFIER

    STRING          shift and go to state 75
    error           shift and go to state 78
    READLINE        shift and go to state 79
    ARRAY           shift and go to state 80
    FUNCTION        shift and go to state 81
    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 74
    expression                     shift and go to state 76
    condition                      shift and go to state 77
    constant_use                   shift and go to state 52

state 59

    (37) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 82


state 60

    (74) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 83


state 61

    (89) property_declaration -> visibility VARIABLE .

    SEMI            reduce using rule 89 (property_declaration -> visibility VARIABLE .)
    PUBLIC          reduce using rule 89 (property_declaration -> visibility VARIABLE .)
    PROTECTED       reduce using rule 89 (property_declaration -> visibility VARIABLE .)
    PRIVATE         reduce using rule 89 (property_declaration -> visibility VARIABLE .)
    RBRACE          reduce using rule 89 (property_declaration -> visibility VARIABLE .)


state 62

    (28) function_statement -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 84


state 63

    (30) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 85


state 64

    (101) function_anonymous -> FUNCTION LPAREN . parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (55) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow
    (95) parameters -> . parameter COMMA parameters
    (96) parameters -> . parameter
    (97) parameters -> . IDENTIFIER
    (98) parameters -> . empty
    (99) parameter -> . TYPE VARIABLE
    (100) parameter -> . VARIABLE
    (107) empty -> .

    VARIABLE        shift and go to state 87
    IDENTIFIER      shift and go to state 89
    TYPE            shift and go to state 91
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 86
    parameter                      shift and go to state 88
    empty                          shift and go to state 90

state 65

    (29) while -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (49) condition -> . value comparison_operator value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    condition                      shift and go to state 92
    value                          shift and go to state 93
    constant_use                   shift and go to state 52

state 66

    (81) constant_declaration -> DEFINE LPAREN . STRING COMMA expression RPAREN SEMI

    STRING          shift and go to state 94


state 67

    (82) constant_declaration -> CONST IDENTIFIER . SET expression SEMI

    SET             shift and go to state 95


state 68

    (84) try_catch -> TRY LBRACE . statements RBRACE catch_list
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 96
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 69

    (87) catch_item -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> CATCH LPAREN . EXCEPTION empty RPAREN LBRACE statements RBRACE

    EXCEPTION       shift and go to state 98


state 70

    (42) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE
    (43) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE else
    (50) conditions -> . condition logical_operator conditions
    (51) conditions -> . condition
    (49) condition -> . value comparison_operator value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    conditions                     shift and go to state 99
    condition                      shift and go to state 100
    value                          shift and go to state 93
    constant_use                   shift and go to state 52

state 71

    (31) print -> ECHO LPAREN value . RPAREN

    RPAREN          shift and go to state 101


state 72

    (33) print -> ECHO LPAREN STRING . RPAREN

    RPAREN          shift and go to state 102


state 73

    (70) expression -> value operator value .

    SEMI            reduce using rule 70 (expression -> value operator value .)
    RPAREN          reduce using rule 70 (expression -> value operator value .)


state 74

    (23) declaration -> VARIABLE SET value .
    (70) expression -> value . operator value
    (71) expression -> value .
    (49) condition -> value . comparison_operator value
    (66) operator -> . PLUS
    (67) operator -> . MINUS
    (68) operator -> . TIMES
    (69) operator -> . DIVIDE
    (56) comparison_operator -> . LT
    (57) comparison_operator -> . GT
    (58) comparison_operator -> . LE
    (59) comparison_operator -> . GE
    (60) comparison_operator -> . EQ
    (61) comparison_operator -> . NE

  ! reduce/reduce conflict for SEMI resolved using rule 23 (declaration -> VARIABLE SET value .)
    SEMI            reduce using rule 23 (declaration -> VARIABLE SET value .)
    PLUS            shift and go to state 54
    MINUS           shift and go to state 55
    TIMES           shift and go to state 56
    DIVIDE          shift and go to state 57
    LT              shift and go to state 104
    GT              shift and go to state 105
    LE              shift and go to state 106
    GE              shift and go to state 107
    EQ              shift and go to state 108
    NE              shift and go to state 109

  ! SEMI            [ reduce using rule 71 (expression -> value .) ]

    operator                       shift and go to state 53
    comparison_operator            shift and go to state 103

state 75

    (24) declaration -> VARIABLE SET STRING .

    SEMI            reduce using rule 24 (declaration -> VARIABLE SET STRING .)


state 76

    (25) declaration -> VARIABLE SET expression .

    SEMI            reduce using rule 25 (declaration -> VARIABLE SET expression .)


state 77

    (26) declaration -> VARIABLE SET condition .

    SEMI            reduce using rule 26 (declaration -> VARIABLE SET condition .)


state 78

    (27) declaration_error -> VARIABLE SET error .

    $end            reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    ECHO            reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    VARIABLE        reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    VAR             reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    CLASS           reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    FUNCTION        reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    WHILE           reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    DEFINE          reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    CONST           reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    IDENTIFIER      reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    TRY             reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    CATCH           reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    IF              reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    INTEGER         reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    FLOAT           reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    PUBLIC          reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    PROTECTED       reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    PRIVATE         reduce using rule 27 (declaration_error -> VARIABLE SET error .)
    RBRACE          reduce using rule 27 (declaration_error -> VARIABLE SET error .)


state 79

    (36) input -> VARIABLE SET READLINE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 110


state 80

    (38) array_declaration -> VARIABLE SET ARRAY . LPAREN arrayArg RPAREN
    (39) array_declaration -> VARIABLE SET ARRAY . LPAREN empty RPAREN

    LPAREN          shift and go to state 111


state 81

    (54) function_arrow -> VARIABLE SET FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI

    LPAREN          shift and go to state 112


state 82

    (37) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 113


state 83

    (74) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (75) class_body -> . class_member_list
    (76) class_member_list -> . class_member class_member_list
    (77) class_member_list -> . class_member
    (78) class_member -> . property_declaration
    (79) class_member -> . method_declaration
    (80) class_member -> . constructor_declaration
    (89) property_declaration -> . visibility VARIABLE
    (90) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (91) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    class_body                     shift and go to state 114
    class_member_list              shift and go to state 115
    class_member                   shift and go to state 116
    property_declaration           shift and go to state 117
    method_declaration             shift and go to state 118
    constructor_declaration        shift and go to state 119
    visibility                     shift and go to state 120

state 84

    (28) function_statement -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 121


state 85

    (30) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 122


state 86

    (101) function_anonymous -> FUNCTION LPAREN parameters . RPAREN use_clause_opt LBRACE statements RBRACE

    RPAREN          shift and go to state 123


state 87

    (55) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow
    (100) parameter -> VARIABLE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 124
    COMMA           reduce using rule 100 (parameter -> VARIABLE .)

  ! RPAREN          [ reduce using rule 100 (parameter -> VARIABLE .) ]


state 88

    (95) parameters -> parameter . COMMA parameters
    (96) parameters -> parameter .

    COMMA           shift and go to state 125
    RPAREN          reduce using rule 96 (parameters -> parameter .)


state 89

    (97) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 97 (parameters -> IDENTIFIER .)


state 90

    (98) parameters -> empty .

    RPAREN          reduce using rule 98 (parameters -> empty .)


state 91

    (99) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 126


state 92

    (29) while -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 127


state 93

    (49) condition -> value . comparison_operator value
    (56) comparison_operator -> . LT
    (57) comparison_operator -> . GT
    (58) comparison_operator -> . LE
    (59) comparison_operator -> . GE
    (60) comparison_operator -> . EQ
    (61) comparison_operator -> . NE

    LT              shift and go to state 104
    GT              shift and go to state 105
    LE              shift and go to state 106
    GE              shift and go to state 107
    EQ              shift and go to state 108
    NE              shift and go to state 109

    comparison_operator            shift and go to state 103

state 94

    (81) constant_declaration -> DEFINE LPAREN STRING . COMMA expression RPAREN SEMI

    COMMA           shift and go to state 128


state 95

    (82) constant_declaration -> CONST IDENTIFIER SET . expression SEMI
    (70) expression -> . value operator value
    (71) expression -> . value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    expression                     shift and go to state 129
    value                          shift and go to state 23
    constant_use                   shift and go to state 52

state 96

    (84) try_catch -> TRY LBRACE statements . RBRACE catch_list

    RBRACE          shift and go to state 130


state 97

    (21) statements -> statement . statements
    (22) statements -> statement .
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    RBRACE          reduce using rule 22 (statements -> statement .)
    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statement                      shift and go to state 97
    statements                     shift and go to state 131
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 98

    (87) catch_item -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> CATCH LPAREN EXCEPTION . empty RPAREN LBRACE statements RBRACE
    (107) empty -> .

    VARIABLE        shift and go to state 132
    RPAREN          reduce using rule 107 (empty -> .)

    empty                          shift and go to state 133

state 99

    (42) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE
    (43) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE elseif
    (44) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 134


state 100

    (50) conditions -> condition . logical_operator conditions
    (51) conditions -> condition .
    (105) logical_operator -> . AND
    (106) logical_operator -> . OR

    RPAREN          reduce using rule 51 (conditions -> condition .)
    AND             shift and go to state 136
    OR              shift and go to state 137

    logical_operator               shift and go to state 135

state 101

    (31) print -> ECHO LPAREN value RPAREN .

    SEMI            reduce using rule 31 (print -> ECHO LPAREN value RPAREN .)


state 102

    (33) print -> ECHO LPAREN STRING RPAREN .

    SEMI            reduce using rule 33 (print -> ECHO LPAREN STRING RPAREN .)


state 103

    (49) condition -> value comparison_operator . value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 138
    constant_use                   shift and go to state 52

state 104

    (56) comparison_operator -> LT .

    VARIABLE        reduce using rule 56 (comparison_operator -> LT .)
    INTEGER         reduce using rule 56 (comparison_operator -> LT .)
    FLOAT           reduce using rule 56 (comparison_operator -> LT .)
    IDENTIFIER      reduce using rule 56 (comparison_operator -> LT .)


state 105

    (57) comparison_operator -> GT .

    VARIABLE        reduce using rule 57 (comparison_operator -> GT .)
    INTEGER         reduce using rule 57 (comparison_operator -> GT .)
    FLOAT           reduce using rule 57 (comparison_operator -> GT .)
    IDENTIFIER      reduce using rule 57 (comparison_operator -> GT .)


state 106

    (58) comparison_operator -> LE .

    VARIABLE        reduce using rule 58 (comparison_operator -> LE .)
    INTEGER         reduce using rule 58 (comparison_operator -> LE .)
    FLOAT           reduce using rule 58 (comparison_operator -> LE .)
    IDENTIFIER      reduce using rule 58 (comparison_operator -> LE .)


state 107

    (59) comparison_operator -> GE .

    VARIABLE        reduce using rule 59 (comparison_operator -> GE .)
    INTEGER         reduce using rule 59 (comparison_operator -> GE .)
    FLOAT           reduce using rule 59 (comparison_operator -> GE .)
    IDENTIFIER      reduce using rule 59 (comparison_operator -> GE .)


state 108

    (60) comparison_operator -> EQ .

    VARIABLE        reduce using rule 60 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 60 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 60 (comparison_operator -> EQ .)
    IDENTIFIER      reduce using rule 60 (comparison_operator -> EQ .)


state 109

    (61) comparison_operator -> NE .

    VARIABLE        reduce using rule 61 (comparison_operator -> NE .)
    INTEGER         reduce using rule 61 (comparison_operator -> NE .)
    FLOAT           reduce using rule 61 (comparison_operator -> NE .)
    IDENTIFIER      reduce using rule 61 (comparison_operator -> NE .)


state 110

    (36) input -> VARIABLE SET READLINE LPAREN . STRING RPAREN

    STRING          shift and go to state 139


state 111

    (38) array_declaration -> VARIABLE SET ARRAY LPAREN . arrayArg RPAREN
    (39) array_declaration -> VARIABLE SET ARRAY LPAREN . empty RPAREN
    (40) arrayArg -> . index ARROW value
    (41) arrayArg -> . index ARROW value COMMA arrayArg
    (107) empty -> .
    (52) index -> . INTEGER
    (53) index -> . STRING

    RPAREN          reduce using rule 107 (empty -> .)
    INTEGER         shift and go to state 143
    STRING          shift and go to state 144

    arrayArg                       shift and go to state 140
    empty                          shift and go to state 141
    index                          shift and go to state 142

state 112

    (54) function_arrow -> VARIABLE SET FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI

    VARIABLE        shift and go to state 145


state 113

    (37) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 146


state 114

    (74) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 147


state 115

    (75) class_body -> class_member_list .

    RBRACE          reduce using rule 75 (class_body -> class_member_list .)


state 116

    (76) class_member_list -> class_member . class_member_list
    (77) class_member_list -> class_member .
    (76) class_member_list -> . class_member class_member_list
    (77) class_member_list -> . class_member
    (78) class_member -> . property_declaration
    (79) class_member -> . method_declaration
    (80) class_member -> . constructor_declaration
    (89) property_declaration -> . visibility VARIABLE
    (90) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (91) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    RBRACE          reduce using rule 77 (class_member_list -> class_member .)
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    class_member                   shift and go to state 116
    class_member_list              shift and go to state 148
    property_declaration           shift and go to state 117
    method_declaration             shift and go to state 118
    constructor_declaration        shift and go to state 119
    visibility                     shift and go to state 120

state 117

    (78) class_member -> property_declaration .

    PUBLIC          reduce using rule 78 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 78 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 78 (class_member -> property_declaration .)
    RBRACE          reduce using rule 78 (class_member -> property_declaration .)


state 118

    (79) class_member -> method_declaration .

    PUBLIC          reduce using rule 79 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 79 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 79 (class_member -> method_declaration .)
    RBRACE          reduce using rule 79 (class_member -> method_declaration .)


state 119

    (80) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 80 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 80 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 80 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 80 (class_member -> constructor_declaration .)


state 120

    (89) property_declaration -> visibility . VARIABLE
    (90) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (91) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 61
    FUNCTION        shift and go to state 149


state 121

    (28) function_statement -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (95) parameters -> . parameter COMMA parameters
    (96) parameters -> . parameter
    (97) parameters -> . IDENTIFIER
    (98) parameters -> . empty
    (99) parameter -> . TYPE VARIABLE
    (100) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 89
    TYPE            shift and go to state 91
    VARIABLE        shift and go to state 151
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 150
    parameter                      shift and go to state 88
    empty                          shift and go to state 90

state 122

    (30) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 152


state 123

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN . use_clause_opt LBRACE statements RBRACE
    (102) use_clause_opt -> . USE LPAREN variables RPAREN

    USE             shift and go to state 154

    use_clause_opt                 shift and go to state 153

state 124

    (55) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW function_arrow

    ARROW           shift and go to state 155


state 125

    (95) parameters -> parameter COMMA . parameters
    (95) parameters -> . parameter COMMA parameters
    (96) parameters -> . parameter
    (97) parameters -> . IDENTIFIER
    (98) parameters -> . empty
    (99) parameter -> . TYPE VARIABLE
    (100) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 89
    TYPE            shift and go to state 91
    VARIABLE        shift and go to state 151
    RPAREN          reduce using rule 107 (empty -> .)

    parameter                      shift and go to state 88
    parameters                     shift and go to state 156
    empty                          shift and go to state 90

state 126

    (99) parameter -> TYPE VARIABLE .

    COMMA           reduce using rule 99 (parameter -> TYPE VARIABLE .)
    RPAREN          reduce using rule 99 (parameter -> TYPE VARIABLE .)


state 127

    (29) while -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 157


state 128

    (81) constant_declaration -> DEFINE LPAREN STRING COMMA . expression RPAREN SEMI
    (70) expression -> . value operator value
    (71) expression -> . value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    expression                     shift and go to state 158
    value                          shift and go to state 23
    constant_use                   shift and go to state 52

state 129

    (82) constant_declaration -> CONST IDENTIFIER SET expression . SEMI

    SEMI            shift and go to state 159


state 130

    (84) try_catch -> TRY LBRACE statements RBRACE . catch_list
    (85) catch_list -> . catch_item catch_list
    (86) catch_list -> . empty
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (107) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 34
    $end            reduce using rule 107 (empty -> .)
    ECHO            reduce using rule 107 (empty -> .)
    VARIABLE        reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)
    CLASS           reduce using rule 107 (empty -> .)
    FUNCTION        reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    DEFINE          reduce using rule 107 (empty -> .)
    CONST           reduce using rule 107 (empty -> .)
    IDENTIFIER      reduce using rule 107 (empty -> .)
    TRY             reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    INTEGER         reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    PUBLIC          reduce using rule 107 (empty -> .)
    PROTECTED       reduce using rule 107 (empty -> .)
    PRIVATE         reduce using rule 107 (empty -> .)
    RBRACE          reduce using rule 107 (empty -> .)

  ! CATCH           [ reduce using rule 107 (empty -> .) ]

    catch_list                     shift and go to state 160
    catch_item                     shift and go to state 161
    empty                          shift and go to state 162

state 131

    (21) statements -> statement statements .

    RBRACE          reduce using rule 21 (statements -> statement statements .)


state 132

    (87) catch_item -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 163


state 133

    (88) catch_item -> CATCH LPAREN EXCEPTION empty . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 164


state 134

    (42) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE
    (43) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE elseif
    (44) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 165


state 135

    (50) conditions -> condition logical_operator . conditions
    (50) conditions -> . condition logical_operator conditions
    (51) conditions -> . condition
    (49) condition -> . value comparison_operator value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    condition                      shift and go to state 100
    conditions                     shift and go to state 166
    value                          shift and go to state 93
    constant_use                   shift and go to state 52

state 136

    (105) logical_operator -> AND .

    VARIABLE        reduce using rule 105 (logical_operator -> AND .)
    INTEGER         reduce using rule 105 (logical_operator -> AND .)
    FLOAT           reduce using rule 105 (logical_operator -> AND .)
    IDENTIFIER      reduce using rule 105 (logical_operator -> AND .)


state 137

    (106) logical_operator -> OR .

    VARIABLE        reduce using rule 106 (logical_operator -> OR .)
    INTEGER         reduce using rule 106 (logical_operator -> OR .)
    FLOAT           reduce using rule 106 (logical_operator -> OR .)
    IDENTIFIER      reduce using rule 106 (logical_operator -> OR .)


state 138

    (49) condition -> value comparison_operator value .

    SEMI            reduce using rule 49 (condition -> value comparison_operator value .)
    RPAREN          reduce using rule 49 (condition -> value comparison_operator value .)
    AND             reduce using rule 49 (condition -> value comparison_operator value .)
    OR              reduce using rule 49 (condition -> value comparison_operator value .)


state 139

    (36) input -> VARIABLE SET READLINE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 167


state 140

    (38) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg . RPAREN

    RPAREN          shift and go to state 168


state 141

    (39) array_declaration -> VARIABLE SET ARRAY LPAREN empty . RPAREN

    RPAREN          shift and go to state 169


state 142

    (40) arrayArg -> index . ARROW value
    (41) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 170


state 143

    (52) index -> INTEGER .

    ARROW           reduce using rule 52 (index -> INTEGER .)


state 144

    (53) index -> STRING .

    ARROW           reduce using rule 53 (index -> STRING .)


state 145

    (54) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI

    RPAREN          shift and go to state 171


state 146

    (37) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 172


state 147

    (74) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    $end            reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFINE          reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRY             reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CATCH           reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROTECTED       reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 74 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 148

    (76) class_member_list -> class_member class_member_list .

    RBRACE          reduce using rule 76 (class_member_list -> class_member class_member_list .)


state 149

    (90) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (91) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 173
    CONSTRUCT       shift and go to state 174


state 150

    (28) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 175


state 151

    (100) parameter -> VARIABLE .

    COMMA           reduce using rule 100 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 100 (parameter -> VARIABLE .)


state 152

    (30) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 176
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 153

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 177


state 154

    (102) use_clause_opt -> USE . LPAREN variables RPAREN

    LPAREN          shift and go to state 178


state 155

    (55) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . function_arrow
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 180
    FUNCTION        shift and go to state 179

    function_arrow                 shift and go to state 181

state 156

    (95) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 95 (parameters -> parameter COMMA parameters .)


state 157

    (29) while -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 182
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 158

    (81) constant_declaration -> DEFINE LPAREN STRING COMMA expression . RPAREN SEMI

    RPAREN          shift and go to state 183


state 159

    (82) constant_declaration -> CONST IDENTIFIER SET expression SEMI .

    $end            reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    ECHO            reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VARIABLE        reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VAR             reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CLASS           reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FUNCTION        reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    WHILE           reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    DEFINE          reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CONST           reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IDENTIFIER      reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    TRY             reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CATCH           reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IF              reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    INTEGER         reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FLOAT           reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PUBLIC          reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PROTECTED       reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PRIVATE         reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    RBRACE          reduce using rule 82 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)


state 160

    (84) try_catch -> TRY LBRACE statements RBRACE catch_list .

    $end            reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    ECHO            reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VARIABLE        reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VAR             reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CLASS           reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FUNCTION        reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    WHILE           reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    DEFINE          reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CONST           reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IDENTIFIER      reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    TRY             reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CATCH           reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IF              reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    INTEGER         reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FLOAT           reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PUBLIC          reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PROTECTED       reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PRIVATE         reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    RBRACE          reduce using rule 84 (try_catch -> TRY LBRACE statements RBRACE catch_list .)


state 161

    (85) catch_list -> catch_item . catch_list
    (85) catch_list -> . catch_item catch_list
    (86) catch_list -> . empty
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (107) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 34
    $end            reduce using rule 107 (empty -> .)
    ECHO            reduce using rule 107 (empty -> .)
    VARIABLE        reduce using rule 107 (empty -> .)
    VAR             reduce using rule 107 (empty -> .)
    CLASS           reduce using rule 107 (empty -> .)
    FUNCTION        reduce using rule 107 (empty -> .)
    WHILE           reduce using rule 107 (empty -> .)
    DEFINE          reduce using rule 107 (empty -> .)
    CONST           reduce using rule 107 (empty -> .)
    IDENTIFIER      reduce using rule 107 (empty -> .)
    TRY             reduce using rule 107 (empty -> .)
    IF              reduce using rule 107 (empty -> .)
    INTEGER         reduce using rule 107 (empty -> .)
    FLOAT           reduce using rule 107 (empty -> .)
    PUBLIC          reduce using rule 107 (empty -> .)
    PROTECTED       reduce using rule 107 (empty -> .)
    PRIVATE         reduce using rule 107 (empty -> .)
    RBRACE          reduce using rule 107 (empty -> .)

  ! CATCH           [ reduce using rule 107 (empty -> .) ]

    catch_item                     shift and go to state 161
    catch_list                     shift and go to state 184
    empty                          shift and go to state 162

state 162

    (86) catch_list -> empty .

    $end            reduce using rule 86 (catch_list -> empty .)
    ECHO            reduce using rule 86 (catch_list -> empty .)
    VARIABLE        reduce using rule 86 (catch_list -> empty .)
    VAR             reduce using rule 86 (catch_list -> empty .)
    CLASS           reduce using rule 86 (catch_list -> empty .)
    FUNCTION        reduce using rule 86 (catch_list -> empty .)
    WHILE           reduce using rule 86 (catch_list -> empty .)
    DEFINE          reduce using rule 86 (catch_list -> empty .)
    CONST           reduce using rule 86 (catch_list -> empty .)
    IDENTIFIER      reduce using rule 86 (catch_list -> empty .)
    TRY             reduce using rule 86 (catch_list -> empty .)
    CATCH           reduce using rule 86 (catch_list -> empty .)
    IF              reduce using rule 86 (catch_list -> empty .)
    INTEGER         reduce using rule 86 (catch_list -> empty .)
    FLOAT           reduce using rule 86 (catch_list -> empty .)
    PUBLIC          reduce using rule 86 (catch_list -> empty .)
    PROTECTED       reduce using rule 86 (catch_list -> empty .)
    PRIVATE         reduce using rule 86 (catch_list -> empty .)
    RBRACE          reduce using rule 86 (catch_list -> empty .)


state 163

    (87) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 185


state 164

    (88) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 186


state 165

    (42) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE
    (43) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE elseif
    (44) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE else
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 187
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 166

    (50) conditions -> condition logical_operator conditions .

    RPAREN          reduce using rule 50 (conditions -> condition logical_operator conditions .)


state 167

    (36) input -> VARIABLE SET READLINE LPAREN STRING RPAREN .

    SEMI            reduce using rule 36 (input -> VARIABLE SET READLINE LPAREN STRING RPAREN .)


state 168

    (38) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .

    SEMI            reduce using rule 38 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)


state 169

    (39) array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .

    SEMI            reduce using rule 39 (array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .)


state 170

    (40) arrayArg -> index ARROW . value
    (41) arrayArg -> index ARROW . value COMMA arrayArg
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    value                          shift and go to state 188
    constant_use                   shift and go to state 52

state 171

    (54) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN . ARROW expression SEMI

    ARROW           shift and go to state 189


state 172

    (37) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 190


state 173

    (90) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 191


state 174

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 192


state 175

    (28) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 193


state 176

    (30) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 194


state 177

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 195
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 178

    (102) use_clause_opt -> USE LPAREN . variables RPAREN
    (103) variables -> . VARIABLE COMMA variables
    (104) variables -> . VARIABLE

    VARIABLE        shift and go to state 197

    variables                      shift and go to state 196

state 179

    (55) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    LPAREN          shift and go to state 198


state 180

    (54) function_arrow -> VARIABLE . SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI

    SET             shift and go to state 199


state 181

    (55) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .

    $end            reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    ECHO            reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VARIABLE        reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VAR             reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CLASS           reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FUNCTION        reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    WHILE           reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    DEFINE          reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CONST           reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IDENTIFIER      reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    TRY             reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CATCH           reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IF              reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    INTEGER         reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FLOAT           reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PUBLIC          reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PROTECTED       reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PRIVATE         reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    RBRACE          reduce using rule 55 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)


state 182

    (29) while -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 200


state 183

    (81) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN . SEMI

    SEMI            shift and go to state 201


state 184

    (85) catch_list -> catch_item catch_list .

    $end            reduce using rule 85 (catch_list -> catch_item catch_list .)
    ECHO            reduce using rule 85 (catch_list -> catch_item catch_list .)
    VARIABLE        reduce using rule 85 (catch_list -> catch_item catch_list .)
    VAR             reduce using rule 85 (catch_list -> catch_item catch_list .)
    CLASS           reduce using rule 85 (catch_list -> catch_item catch_list .)
    FUNCTION        reduce using rule 85 (catch_list -> catch_item catch_list .)
    WHILE           reduce using rule 85 (catch_list -> catch_item catch_list .)
    DEFINE          reduce using rule 85 (catch_list -> catch_item catch_list .)
    CONST           reduce using rule 85 (catch_list -> catch_item catch_list .)
    IDENTIFIER      reduce using rule 85 (catch_list -> catch_item catch_list .)
    TRY             reduce using rule 85 (catch_list -> catch_item catch_list .)
    CATCH           reduce using rule 85 (catch_list -> catch_item catch_list .)
    IF              reduce using rule 85 (catch_list -> catch_item catch_list .)
    INTEGER         reduce using rule 85 (catch_list -> catch_item catch_list .)
    FLOAT           reduce using rule 85 (catch_list -> catch_item catch_list .)
    PUBLIC          reduce using rule 85 (catch_list -> catch_item catch_list .)
    PROTECTED       reduce using rule 85 (catch_list -> catch_item catch_list .)
    PRIVATE         reduce using rule 85 (catch_list -> catch_item catch_list .)
    RBRACE          reduce using rule 85 (catch_list -> catch_item catch_list .)


state 185

    (87) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 202
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 186

    (88) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 203
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 187

    (42) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE
    (43) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE elseif
    (44) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 204


state 188

    (40) arrayArg -> index ARROW value .
    (41) arrayArg -> index ARROW value . COMMA arrayArg

    RPAREN          reduce using rule 40 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 205


state 189

    (54) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW . expression SEMI
    (70) expression -> . value operator value
    (71) expression -> . value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    expression                     shift and go to state 206
    value                          shift and go to state 23
    constant_use                   shift and go to state 52

state 190

    (37) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 207


state 191

    (90) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (95) parameters -> . parameter COMMA parameters
    (96) parameters -> . parameter
    (97) parameters -> . IDENTIFIER
    (98) parameters -> . empty
    (99) parameter -> . TYPE VARIABLE
    (100) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 89
    TYPE            shift and go to state 91
    VARIABLE        shift and go to state 151
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 208
    parameter                      shift and go to state 88
    empty                          shift and go to state 90

state 192

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameters RPAREN LBRACE statements RBRACE
    (95) parameters -> . parameter COMMA parameters
    (96) parameters -> . parameter
    (97) parameters -> . IDENTIFIER
    (98) parameters -> . empty
    (99) parameter -> . TYPE VARIABLE
    (100) parameter -> . VARIABLE
    (107) empty -> .

    IDENTIFIER      shift and go to state 89
    TYPE            shift and go to state 91
    VARIABLE        shift and go to state 151
    RPAREN          reduce using rule 107 (empty -> .)

    parameters                     shift and go to state 209
    parameter                      shift and go to state 88
    empty                          shift and go to state 90

state 193

    (28) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    visibility                     shift and go to state 28
    statements                     shift and go to state 210
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23

state 194

    (30) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 30 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 195

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 211


state 196

    (102) use_clause_opt -> USE LPAREN variables . RPAREN

    RPAREN          shift and go to state 212


state 197

    (103) variables -> VARIABLE . COMMA variables
    (104) variables -> VARIABLE .

    COMMA           shift and go to state 213
    RPAREN          reduce using rule 104 (variables -> VARIABLE .)


state 198

    (55) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 214


state 199

    (54) function_arrow -> VARIABLE SET . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI

    FUNCTION        shift and go to state 81


state 200

    (29) while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 29 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 201

    (81) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .

    $end            reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    ECHO            reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VARIABLE        reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VAR             reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CLASS           reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FUNCTION        reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    WHILE           reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    DEFINE          reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CONST           reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    TRY             reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CATCH           reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IF              reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    INTEGER         reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FLOAT           reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PUBLIC          reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PROTECTED       reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PRIVATE         reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    RBRACE          reduce using rule 81 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)


state 202

    (87) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 215


state 203

    (88) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 216


state 204

    (42) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .
    (43) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . elseif
    (44) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . else
    (45) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE
    (46) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (47) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (48) else -> . ELSE LBRACE statements RBRACE

    $end            reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 42 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ELSEIF          shift and go to state 219
    ELSE            shift and go to state 220

    elseif                         shift and go to state 217
    else                           shift and go to state 218

state 205

    (41) arrayArg -> index ARROW value COMMA . arrayArg
    (40) arrayArg -> . index ARROW value
    (41) arrayArg -> . index ARROW value COMMA arrayArg
    (52) index -> . INTEGER
    (53) index -> . STRING

    INTEGER         shift and go to state 143
    STRING          shift and go to state 144

    index                          shift and go to state 142
    arrayArg                       shift and go to state 221

state 206

    (54) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression . SEMI

    SEMI            shift and go to state 222


state 207

    (37) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CONST           reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IDENTIFIER      reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    TRY             reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CATCH           reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IF              reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 37 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 208

    (90) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 223


state 209

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 224


state 210

    (28) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 225


state 211

    (101) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    DEFINE          reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CONST           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    TRY             reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CATCH           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IF              reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 101 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)


state 212

    (102) use_clause_opt -> USE LPAREN variables RPAREN .

    LBRACE          reduce using rule 102 (use_clause_opt -> USE LPAREN variables RPAREN .)


state 213

    (103) variables -> VARIABLE COMMA . variables
    (103) variables -> . VARIABLE COMMA variables
    (104) variables -> . VARIABLE

    VARIABLE        shift and go to state 197

    variables                      shift and go to state 226

state 214

    (55) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow

    RPAREN          shift and go to state 124


state 215

    (87) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 87 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)


state 216

    (88) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 88 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)


state 217

    (43) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 43 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)


state 218

    (44) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)


state 219

    (45) elseif -> ELSEIF . LPAREN conditions RPAREN LBRACE statements RBRACE
    (46) elseif -> ELSEIF . LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (47) elseif -> ELSEIF . LPAREN conditions RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 227


state 220

    (48) else -> ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 228


state 221

    (41) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 41 (arrayArg -> index ARROW value COMMA arrayArg .)


state 222

    (54) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .

    $end            reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    ECHO            reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VARIABLE        reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VAR             reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CLASS           reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FUNCTION        reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    WHILE           reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    DEFINE          reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CONST           reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IDENTIFIER      reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    TRY             reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CATCH           reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IF              reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    INTEGER         reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FLOAT           reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PUBLIC          reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PROTECTED       reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PRIVATE         reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    RBRACE          reduce using rule 54 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)


state 223

    (90) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 229


state 224

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 230


state 225

    (28) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 28 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 226

    (103) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 103 (variables -> VARIABLE COMMA variables .)


state 227

    (45) elseif -> ELSEIF LPAREN . conditions RPAREN LBRACE statements RBRACE
    (46) elseif -> ELSEIF LPAREN . conditions RPAREN LBRACE statements RBRACE elseif
    (47) elseif -> ELSEIF LPAREN . conditions RPAREN LBRACE statements RBRACE else
    (50) conditions -> . condition logical_operator conditions
    (51) conditions -> . condition
    (49) condition -> . value comparison_operator value
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (83) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 51
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    IDENTIFIER      shift and go to state 27

    conditions                     shift and go to state 231
    condition                      shift and go to state 100
    value                          shift and go to state 93
    constant_use                   shift and go to state 52

state 228

    (48) else -> ELSE LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 232
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 229

    (90) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    visibility                     shift and go to state 28
    statements                     shift and go to state 233
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23

state 230

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE . statements RBRACE
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    visibility                     shift and go to state 28
    statements                     shift and go to state 234
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23

state 231

    (45) elseif -> ELSEIF LPAREN conditions . RPAREN LBRACE statements RBRACE
    (46) elseif -> ELSEIF LPAREN conditions . RPAREN LBRACE statements RBRACE elseif
    (47) elseif -> ELSEIF LPAREN conditions . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 235


state 232

    (48) else -> ELSE LBRACE statements . RBRACE

    RBRACE          shift and go to state 236


state 233

    (90) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 237


state 234

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 238


state 235

    (45) elseif -> ELSEIF LPAREN conditions RPAREN . LBRACE statements RBRACE
    (46) elseif -> ELSEIF LPAREN conditions RPAREN . LBRACE statements RBRACE elseif
    (47) elseif -> ELSEIF LPAREN conditions RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 239


state 236

    (48) else -> ELSE LBRACE statements RBRACE .

    $end            reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    ECHO            reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    VAR             reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    CLASS           reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    DEFINE          reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    CONST           reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    TRY             reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    CATCH           reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    INTEGER         reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    FLOAT           reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 48 (else -> ELSE LBRACE statements RBRACE .)


state 237

    (90) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 90 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 90 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 90 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 90 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 238

    (91) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 91 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 91 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 91 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 91 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 239

    (45) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE . statements RBRACE
    (46) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE . statements RBRACE elseif
    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE . statements RBRACE else
    (21) statements -> . statement statements
    (22) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . if
    (31) print -> . ECHO LPAREN value RPAREN
    (32) print -> . ECHO value
    (33) print -> . ECHO LPAREN STRING RPAREN
    (34) print -> . ECHO STRING
    (35) print_error -> . ECHO error
    (23) declaration -> . VARIABLE SET value
    (24) declaration -> . VARIABLE SET STRING
    (25) declaration -> . VARIABLE SET expression
    (26) declaration -> . VARIABLE SET condition
    (27) declaration_error -> . VARIABLE SET error
    (36) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (70) expression -> . value operator value
    (71) expression -> . value
    (37) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (74) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (38) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (39) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (89) property_declaration -> . visibility VARIABLE
    (28) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (30) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (101) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (54) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (55) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (29) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (81) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (82) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (83) constant_use -> . IDENTIFIER
    (84) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (87) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (88) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (42) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (43) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (62) value -> . VARIABLE
    (63) value -> . INTEGER
    (64) value -> . constant_use
    (65) value -> . FLOAT
    (92) visibility -> . PUBLIC
    (93) visibility -> . PROTECTED
    (94) visibility -> . PRIVATE

    ECHO            shift and go to state 22
    VARIABLE        shift and go to state 24
    VAR             shift and go to state 25
    CLASS           shift and go to state 26
    FUNCTION        shift and go to state 29
    WHILE           shift and go to state 30
    DEFINE          shift and go to state 31
    CONST           shift and go to state 32
    IDENTIFIER      shift and go to state 27
    TRY             shift and go to state 33
    CATCH           shift and go to state 34
    IF              shift and go to state 35
    INTEGER         shift and go to state 36
    FLOAT           shift and go to state 37
    PUBLIC          shift and go to state 38
    PROTECTED       shift and go to state 39
    PRIVATE         shift and go to state 40

    statements                     shift and go to state 240
    statement                      shift and go to state 97
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    if                             shift and go to state 21
    value                          shift and go to state 23
    visibility                     shift and go to state 28

state 240

    (45) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements . RBRACE
    (46) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements . RBRACE elseif
    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 241


state 241

    (45) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .
    (46) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE . elseif
    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE . else
    (45) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE
    (46) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (47) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (48) else -> . ELSE LBRACE statements RBRACE

    $end            reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 45 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ELSEIF          shift and go to state 219
    ELSE            shift and go to state 220

    elseif                         shift and go to state 242
    else                           shift and go to state 243

state 242

    (46) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 46 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)


state 243

    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 130 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 161 resolved as shift
WARNING: reduce/reduce conflict in state 74 resolved using rule (declaration -> VARIABLE SET value)
WARNING: rejected rule (expression -> value) in state 74
