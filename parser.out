Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> print_error
Rule 3     statement -> declaration SEMI
Rule 4     statement -> declaration_error
Rule 5     statement -> input SEMI
Rule 6     statement -> expression SEMI
Rule 7     statement -> object_declaration
Rule 8     statement -> class_declaration
Rule 9     statement -> array_declaration SEMI
Rule 10    statement -> property_declaration SEMI
Rule 11    statement -> function_statement
Rule 12    statement -> function_variable
Rule 13    statement -> function_anonymous
Rule 14    statement -> function_arrow
Rule 15    statement -> while
Rule 16    statement -> constant_declaration
Rule 17    statement -> constant_use
Rule 18    statement -> try_catch
Rule 19    statement -> catch_item
Rule 20    statement -> throw_statement
Rule 21    statement -> if
Rule 22    statements -> statement statements
Rule 23    statements -> statement
Rule 24    statements -> empty
Rule 25    declaration -> VARIABLE SET value
Rule 26    declaration -> VARIABLE SET STRING
Rule 27    declaration -> VARIABLE SET expression
Rule 28    declaration -> VARIABLE SET condition
Rule 29    declaration_error -> VARIABLE SET error
Rule 30    function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 31    while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE
Rule 32    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 33    print -> ECHO LPAREN value RPAREN
Rule 34    print -> ECHO value
Rule 35    print -> ECHO LPAREN STRING RPAREN
Rule 36    print -> ECHO STRING
Rule 37    print_error -> ECHO error
Rule 38    input -> VARIABLE SET READLINE LPAREN STRING RPAREN
Rule 39    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 40    array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN
Rule 41    array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN
Rule 42    arrayArg -> index ARROW value
Rule 43    arrayArg -> index ARROW value COMMA arrayArg
Rule 44    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE
Rule 45    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
Rule 46    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else
Rule 47    elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE
Rule 48    elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
Rule 49    elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else
Rule 50    else -> ELSE LBRACE statements RBRACE
Rule 51    condition -> value comparison_operator value
Rule 52    conditions -> condition logical_operator conditions
Rule 53    conditions -> condition
Rule 54    index -> INTEGER
Rule 55    index -> STRING
Rule 56    function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 57    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
Rule 58    comparison_operator -> LT
Rule 59    comparison_operator -> GT
Rule 60    comparison_operator -> LE
Rule 61    comparison_operator -> GE
Rule 62    comparison_operator -> EQ
Rule 63    comparison_operator -> NE
Rule 64    value -> VARIABLE
Rule 65    value -> INTEGER
Rule 66    value -> constant_use
Rule 67    value -> FLOAT
Rule 68    operator -> PLUS
Rule 69    operator -> MINUS
Rule 70    operator -> TIMES
Rule 71    operator -> DIVIDE
Rule 72    expression -> value operator value
Rule 73    expression -> value
Rule 74    expressions -> expression COMMA expressions
Rule 75    expressions -> expression
Rule 76    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 77    class_body -> class_member_list
Rule 78    class_member_list -> class_member class_member_list
Rule 79    class_member_list -> class_member
Rule 80    class_member -> property_declaration
Rule 81    class_member -> method_declaration
Rule 82    class_member -> constructor_declaration
Rule 83    constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI
Rule 84    constant_declaration -> CONST IDENTIFIER SET expression SEMI
Rule 85    constant_use -> IDENTIFIER
Rule 86    try_catch -> TRY LBRACE statements RBRACE catch_list
Rule 87    catch_list -> catch_item catch_list
Rule 88    catch_list -> empty
Rule 89    catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
Rule 90    catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
Rule 91    throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI
Rule 92    property_declaration -> visibility VARIABLE
Rule 93    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 94    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 95    visibility -> PUBLIC
Rule 96    visibility -> PROTECTED
Rule 97    visibility -> PRIVATE
Rule 98    parameters -> parameter COMMA parameters
Rule 99    parameters -> parameter
Rule 100   parameters -> IDENTIFIER
Rule 101   parameters -> empty
Rule 102   parameter -> TYPE VARIABLE
Rule 103   parameter -> VARIABLE
Rule 104   function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
Rule 105   use_clause_opt -> USE LPAREN variables RPAREN
Rule 106   variables -> VARIABLE COMMA variables
Rule 107   variables -> VARIABLE
Rule 108   logical_operator -> AND
Rule 109   logical_operator -> OR
Rule 110   empty -> <empty>

Terminals, with rules where they appear

AND                  : 108
ARRAY                : 40 41
ARROW                : 42 43 56 57
CATCH                : 89 90
CLASS                : 39 76
COMMA                : 43 74 83 98 106
CONST                : 84
CONSTRUCT            : 94
DEFINE               : 83
DIVIDE               : 71
ECHO                 : 33 34 35 36 37
ELSE                 : 50
ELSEIF               : 47 48 49
EQ                   : 62
EXCEPTION            : 89 90 91
FLOAT                : 67
FUNCTION             : 30 32 56 57 93 94 104
GE                   : 61
GT                   : 59
IDENTIFIER           : 30 76 84 85 93 100
IF                   : 44 45 46
INTEGER              : 54 65
LBRACE               : 30 31 32 44 45 46 47 48 49 50 76 86 89 90 93 94 104
LE                   : 60
LPAREN               : 30 31 32 33 35 38 39 40 41 44 45 46 47 48 49 56 57 83 89 90 91 93 94 104 105
LT                   : 58
MINUS                : 69
NE                   : 63
NEW                  : 39 91
NEWLINE              : 
OR                   : 109
PLUS                 : 68
PRIVATE              : 97
PROTECTED            : 96
PUBLIC               : 95
RBRACE               : 30 31 32 44 45 46 47 48 49 50 76 86 89 90 93 94 104
READLINE             : 38
RPAREN               : 30 31 32 33 35 38 39 40 41 44 45 46 47 48 49 56 57 83 89 90 91 93 94 104 105
SEMI                 : 1 3 5 6 9 10 39 56 83 84 91
SET                  : 25 26 27 28 29 38 39 40 41 56 84
STRING               : 26 35 36 38 55 83
THROW                : 91
TIMES                : 70
TRY                  : 86
TYPE                 : 102
USE                  : 105
VAR                  : 39
VARIABLE             : 25 26 27 28 29 32 38 39 40 41 56 56 57 64 89 92 102 103 106 107
WHILE                : 31
error                : 29 37

Nonterminals, with rules where they appear

arrayArg             : 40 43
array_declaration    : 9
catch_item           : 19 87
catch_list           : 86 87
class_body           : 76
class_declaration    : 8
class_member         : 78 79
class_member_list    : 77 78
comparison_operator  : 51
condition            : 28 31 52 53
conditions           : 44 45 46 47 48 49 52
constant_declaration : 16
constant_use         : 17 66
constructor_declaration : 82
declaration          : 3
declaration_error    : 4
else                 : 46 49
elseif               : 45 48
empty                : 24 41 88 90 101
expression           : 6 27 56 74 75 83 84
expressions          : 74
function_anonymous   : 13
function_arrow       : 14 57
function_statement   : 11
function_variable    : 12
if                   : 21
index                : 42 43
input                : 5
logical_operator     : 52
method_declaration   : 81
object_declaration   : 7
operator             : 72
parameter            : 98 99
parameters           : 30 93 94 98 104
print                : 1
print_error          : 2
property_declaration : 10 80
statement            : 22 23 0
statements           : 22 30 31 32 44 45 46 47 48 49 50 86 89 90 93 94 104
throw_statement      : 20
try_catch            : 18
use_clause_opt       : 104
value                : 25 33 34 42 43 51 51 72 72 73
variables            : 105 106
visibility           : 30 92 93 94
while                : 15

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statement                      shift and go to state 1
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 43


state 3

    (2) statement -> print_error .

    $end            reduce using rule 2 (statement -> print_error .)
    ECHO            reduce using rule 2 (statement -> print_error .)
    VARIABLE        reduce using rule 2 (statement -> print_error .)
    VAR             reduce using rule 2 (statement -> print_error .)
    CLASS           reduce using rule 2 (statement -> print_error .)
    FUNCTION        reduce using rule 2 (statement -> print_error .)
    WHILE           reduce using rule 2 (statement -> print_error .)
    DEFINE          reduce using rule 2 (statement -> print_error .)
    CONST           reduce using rule 2 (statement -> print_error .)
    IDENTIFIER      reduce using rule 2 (statement -> print_error .)
    TRY             reduce using rule 2 (statement -> print_error .)
    CATCH           reduce using rule 2 (statement -> print_error .)
    THROW           reduce using rule 2 (statement -> print_error .)
    IF              reduce using rule 2 (statement -> print_error .)
    INTEGER         reduce using rule 2 (statement -> print_error .)
    FLOAT           reduce using rule 2 (statement -> print_error .)
    PUBLIC          reduce using rule 2 (statement -> print_error .)
    PROTECTED       reduce using rule 2 (statement -> print_error .)
    PRIVATE         reduce using rule 2 (statement -> print_error .)
    RBRACE          reduce using rule 2 (statement -> print_error .)


state 4

    (3) statement -> declaration . SEMI

    SEMI            shift and go to state 44


state 5

    (4) statement -> declaration_error .

    $end            reduce using rule 4 (statement -> declaration_error .)
    ECHO            reduce using rule 4 (statement -> declaration_error .)
    VARIABLE        reduce using rule 4 (statement -> declaration_error .)
    VAR             reduce using rule 4 (statement -> declaration_error .)
    CLASS           reduce using rule 4 (statement -> declaration_error .)
    FUNCTION        reduce using rule 4 (statement -> declaration_error .)
    WHILE           reduce using rule 4 (statement -> declaration_error .)
    DEFINE          reduce using rule 4 (statement -> declaration_error .)
    CONST           reduce using rule 4 (statement -> declaration_error .)
    IDENTIFIER      reduce using rule 4 (statement -> declaration_error .)
    TRY             reduce using rule 4 (statement -> declaration_error .)
    CATCH           reduce using rule 4 (statement -> declaration_error .)
    THROW           reduce using rule 4 (statement -> declaration_error .)
    IF              reduce using rule 4 (statement -> declaration_error .)
    INTEGER         reduce using rule 4 (statement -> declaration_error .)
    FLOAT           reduce using rule 4 (statement -> declaration_error .)
    PUBLIC          reduce using rule 4 (statement -> declaration_error .)
    PROTECTED       reduce using rule 4 (statement -> declaration_error .)
    PRIVATE         reduce using rule 4 (statement -> declaration_error .)
    RBRACE          reduce using rule 4 (statement -> declaration_error .)


state 6

    (5) statement -> input . SEMI

    SEMI            shift and go to state 45


state 7

    (6) statement -> expression . SEMI

    SEMI            shift and go to state 46


state 8

    (7) statement -> object_declaration .

    $end            reduce using rule 7 (statement -> object_declaration .)
    ECHO            reduce using rule 7 (statement -> object_declaration .)
    VARIABLE        reduce using rule 7 (statement -> object_declaration .)
    VAR             reduce using rule 7 (statement -> object_declaration .)
    CLASS           reduce using rule 7 (statement -> object_declaration .)
    FUNCTION        reduce using rule 7 (statement -> object_declaration .)
    WHILE           reduce using rule 7 (statement -> object_declaration .)
    DEFINE          reduce using rule 7 (statement -> object_declaration .)
    CONST           reduce using rule 7 (statement -> object_declaration .)
    IDENTIFIER      reduce using rule 7 (statement -> object_declaration .)
    TRY             reduce using rule 7 (statement -> object_declaration .)
    CATCH           reduce using rule 7 (statement -> object_declaration .)
    THROW           reduce using rule 7 (statement -> object_declaration .)
    IF              reduce using rule 7 (statement -> object_declaration .)
    INTEGER         reduce using rule 7 (statement -> object_declaration .)
    FLOAT           reduce using rule 7 (statement -> object_declaration .)
    PUBLIC          reduce using rule 7 (statement -> object_declaration .)
    PROTECTED       reduce using rule 7 (statement -> object_declaration .)
    PRIVATE         reduce using rule 7 (statement -> object_declaration .)
    RBRACE          reduce using rule 7 (statement -> object_declaration .)


state 9

    (8) statement -> class_declaration .

    $end            reduce using rule 8 (statement -> class_declaration .)
    ECHO            reduce using rule 8 (statement -> class_declaration .)
    VARIABLE        reduce using rule 8 (statement -> class_declaration .)
    VAR             reduce using rule 8 (statement -> class_declaration .)
    CLASS           reduce using rule 8 (statement -> class_declaration .)
    FUNCTION        reduce using rule 8 (statement -> class_declaration .)
    WHILE           reduce using rule 8 (statement -> class_declaration .)
    DEFINE          reduce using rule 8 (statement -> class_declaration .)
    CONST           reduce using rule 8 (statement -> class_declaration .)
    IDENTIFIER      reduce using rule 8 (statement -> class_declaration .)
    TRY             reduce using rule 8 (statement -> class_declaration .)
    CATCH           reduce using rule 8 (statement -> class_declaration .)
    THROW           reduce using rule 8 (statement -> class_declaration .)
    IF              reduce using rule 8 (statement -> class_declaration .)
    INTEGER         reduce using rule 8 (statement -> class_declaration .)
    FLOAT           reduce using rule 8 (statement -> class_declaration .)
    PUBLIC          reduce using rule 8 (statement -> class_declaration .)
    PROTECTED       reduce using rule 8 (statement -> class_declaration .)
    PRIVATE         reduce using rule 8 (statement -> class_declaration .)
    RBRACE          reduce using rule 8 (statement -> class_declaration .)


state 10

    (9) statement -> array_declaration . SEMI

    SEMI            shift and go to state 47


state 11

    (10) statement -> property_declaration . SEMI

    SEMI            shift and go to state 48


state 12

    (11) statement -> function_statement .

    $end            reduce using rule 11 (statement -> function_statement .)
    ECHO            reduce using rule 11 (statement -> function_statement .)
    VARIABLE        reduce using rule 11 (statement -> function_statement .)
    VAR             reduce using rule 11 (statement -> function_statement .)
    CLASS           reduce using rule 11 (statement -> function_statement .)
    FUNCTION        reduce using rule 11 (statement -> function_statement .)
    WHILE           reduce using rule 11 (statement -> function_statement .)
    DEFINE          reduce using rule 11 (statement -> function_statement .)
    CONST           reduce using rule 11 (statement -> function_statement .)
    IDENTIFIER      reduce using rule 11 (statement -> function_statement .)
    TRY             reduce using rule 11 (statement -> function_statement .)
    CATCH           reduce using rule 11 (statement -> function_statement .)
    THROW           reduce using rule 11 (statement -> function_statement .)
    IF              reduce using rule 11 (statement -> function_statement .)
    INTEGER         reduce using rule 11 (statement -> function_statement .)
    FLOAT           reduce using rule 11 (statement -> function_statement .)
    PUBLIC          reduce using rule 11 (statement -> function_statement .)
    PROTECTED       reduce using rule 11 (statement -> function_statement .)
    PRIVATE         reduce using rule 11 (statement -> function_statement .)
    RBRACE          reduce using rule 11 (statement -> function_statement .)


state 13

    (12) statement -> function_variable .

    $end            reduce using rule 12 (statement -> function_variable .)
    ECHO            reduce using rule 12 (statement -> function_variable .)
    VARIABLE        reduce using rule 12 (statement -> function_variable .)
    VAR             reduce using rule 12 (statement -> function_variable .)
    CLASS           reduce using rule 12 (statement -> function_variable .)
    FUNCTION        reduce using rule 12 (statement -> function_variable .)
    WHILE           reduce using rule 12 (statement -> function_variable .)
    DEFINE          reduce using rule 12 (statement -> function_variable .)
    CONST           reduce using rule 12 (statement -> function_variable .)
    IDENTIFIER      reduce using rule 12 (statement -> function_variable .)
    TRY             reduce using rule 12 (statement -> function_variable .)
    CATCH           reduce using rule 12 (statement -> function_variable .)
    THROW           reduce using rule 12 (statement -> function_variable .)
    IF              reduce using rule 12 (statement -> function_variable .)
    INTEGER         reduce using rule 12 (statement -> function_variable .)
    FLOAT           reduce using rule 12 (statement -> function_variable .)
    PUBLIC          reduce using rule 12 (statement -> function_variable .)
    PROTECTED       reduce using rule 12 (statement -> function_variable .)
    PRIVATE         reduce using rule 12 (statement -> function_variable .)
    RBRACE          reduce using rule 12 (statement -> function_variable .)


state 14

    (13) statement -> function_anonymous .

    $end            reduce using rule 13 (statement -> function_anonymous .)
    ECHO            reduce using rule 13 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 13 (statement -> function_anonymous .)
    VAR             reduce using rule 13 (statement -> function_anonymous .)
    CLASS           reduce using rule 13 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 13 (statement -> function_anonymous .)
    WHILE           reduce using rule 13 (statement -> function_anonymous .)
    DEFINE          reduce using rule 13 (statement -> function_anonymous .)
    CONST           reduce using rule 13 (statement -> function_anonymous .)
    IDENTIFIER      reduce using rule 13 (statement -> function_anonymous .)
    TRY             reduce using rule 13 (statement -> function_anonymous .)
    CATCH           reduce using rule 13 (statement -> function_anonymous .)
    THROW           reduce using rule 13 (statement -> function_anonymous .)
    IF              reduce using rule 13 (statement -> function_anonymous .)
    INTEGER         reduce using rule 13 (statement -> function_anonymous .)
    FLOAT           reduce using rule 13 (statement -> function_anonymous .)
    PUBLIC          reduce using rule 13 (statement -> function_anonymous .)
    PROTECTED       reduce using rule 13 (statement -> function_anonymous .)
    PRIVATE         reduce using rule 13 (statement -> function_anonymous .)
    RBRACE          reduce using rule 13 (statement -> function_anonymous .)


state 15

    (14) statement -> function_arrow .

    $end            reduce using rule 14 (statement -> function_arrow .)
    ECHO            reduce using rule 14 (statement -> function_arrow .)
    VARIABLE        reduce using rule 14 (statement -> function_arrow .)
    VAR             reduce using rule 14 (statement -> function_arrow .)
    CLASS           reduce using rule 14 (statement -> function_arrow .)
    FUNCTION        reduce using rule 14 (statement -> function_arrow .)
    WHILE           reduce using rule 14 (statement -> function_arrow .)
    DEFINE          reduce using rule 14 (statement -> function_arrow .)
    CONST           reduce using rule 14 (statement -> function_arrow .)
    IDENTIFIER      reduce using rule 14 (statement -> function_arrow .)
    TRY             reduce using rule 14 (statement -> function_arrow .)
    CATCH           reduce using rule 14 (statement -> function_arrow .)
    THROW           reduce using rule 14 (statement -> function_arrow .)
    IF              reduce using rule 14 (statement -> function_arrow .)
    INTEGER         reduce using rule 14 (statement -> function_arrow .)
    FLOAT           reduce using rule 14 (statement -> function_arrow .)
    PUBLIC          reduce using rule 14 (statement -> function_arrow .)
    PROTECTED       reduce using rule 14 (statement -> function_arrow .)
    PRIVATE         reduce using rule 14 (statement -> function_arrow .)
    RBRACE          reduce using rule 14 (statement -> function_arrow .)


state 16

    (15) statement -> while .

    $end            reduce using rule 15 (statement -> while .)
    ECHO            reduce using rule 15 (statement -> while .)
    VARIABLE        reduce using rule 15 (statement -> while .)
    VAR             reduce using rule 15 (statement -> while .)
    CLASS           reduce using rule 15 (statement -> while .)
    FUNCTION        reduce using rule 15 (statement -> while .)
    WHILE           reduce using rule 15 (statement -> while .)
    DEFINE          reduce using rule 15 (statement -> while .)
    CONST           reduce using rule 15 (statement -> while .)
    IDENTIFIER      reduce using rule 15 (statement -> while .)
    TRY             reduce using rule 15 (statement -> while .)
    CATCH           reduce using rule 15 (statement -> while .)
    THROW           reduce using rule 15 (statement -> while .)
    IF              reduce using rule 15 (statement -> while .)
    INTEGER         reduce using rule 15 (statement -> while .)
    FLOAT           reduce using rule 15 (statement -> while .)
    PUBLIC          reduce using rule 15 (statement -> while .)
    PROTECTED       reduce using rule 15 (statement -> while .)
    PRIVATE         reduce using rule 15 (statement -> while .)
    RBRACE          reduce using rule 15 (statement -> while .)


state 17

    (16) statement -> constant_declaration .

    $end            reduce using rule 16 (statement -> constant_declaration .)
    ECHO            reduce using rule 16 (statement -> constant_declaration .)
    VARIABLE        reduce using rule 16 (statement -> constant_declaration .)
    VAR             reduce using rule 16 (statement -> constant_declaration .)
    CLASS           reduce using rule 16 (statement -> constant_declaration .)
    FUNCTION        reduce using rule 16 (statement -> constant_declaration .)
    WHILE           reduce using rule 16 (statement -> constant_declaration .)
    DEFINE          reduce using rule 16 (statement -> constant_declaration .)
    CONST           reduce using rule 16 (statement -> constant_declaration .)
    IDENTIFIER      reduce using rule 16 (statement -> constant_declaration .)
    TRY             reduce using rule 16 (statement -> constant_declaration .)
    CATCH           reduce using rule 16 (statement -> constant_declaration .)
    THROW           reduce using rule 16 (statement -> constant_declaration .)
    IF              reduce using rule 16 (statement -> constant_declaration .)
    INTEGER         reduce using rule 16 (statement -> constant_declaration .)
    FLOAT           reduce using rule 16 (statement -> constant_declaration .)
    PUBLIC          reduce using rule 16 (statement -> constant_declaration .)
    PROTECTED       reduce using rule 16 (statement -> constant_declaration .)
    PRIVATE         reduce using rule 16 (statement -> constant_declaration .)
    RBRACE          reduce using rule 16 (statement -> constant_declaration .)


state 18

    (17) statement -> constant_use .
    (66) value -> constant_use .

    $end            reduce using rule 17 (statement -> constant_use .)
    ECHO            reduce using rule 17 (statement -> constant_use .)
    VARIABLE        reduce using rule 17 (statement -> constant_use .)
    VAR             reduce using rule 17 (statement -> constant_use .)
    CLASS           reduce using rule 17 (statement -> constant_use .)
    FUNCTION        reduce using rule 17 (statement -> constant_use .)
    WHILE           reduce using rule 17 (statement -> constant_use .)
    DEFINE          reduce using rule 17 (statement -> constant_use .)
    CONST           reduce using rule 17 (statement -> constant_use .)
    IDENTIFIER      reduce using rule 17 (statement -> constant_use .)
    TRY             reduce using rule 17 (statement -> constant_use .)
    CATCH           reduce using rule 17 (statement -> constant_use .)
    THROW           reduce using rule 17 (statement -> constant_use .)
    IF              reduce using rule 17 (statement -> constant_use .)
    INTEGER         reduce using rule 17 (statement -> constant_use .)
    FLOAT           reduce using rule 17 (statement -> constant_use .)
    PUBLIC          reduce using rule 17 (statement -> constant_use .)
    PROTECTED       reduce using rule 17 (statement -> constant_use .)
    PRIVATE         reduce using rule 17 (statement -> constant_use .)
    RBRACE          reduce using rule 17 (statement -> constant_use .)
    PLUS            reduce using rule 66 (value -> constant_use .)
    MINUS           reduce using rule 66 (value -> constant_use .)
    TIMES           reduce using rule 66 (value -> constant_use .)
    DIVIDE          reduce using rule 66 (value -> constant_use .)
    SEMI            reduce using rule 66 (value -> constant_use .)


state 19

    (18) statement -> try_catch .

    $end            reduce using rule 18 (statement -> try_catch .)
    ECHO            reduce using rule 18 (statement -> try_catch .)
    VARIABLE        reduce using rule 18 (statement -> try_catch .)
    VAR             reduce using rule 18 (statement -> try_catch .)
    CLASS           reduce using rule 18 (statement -> try_catch .)
    FUNCTION        reduce using rule 18 (statement -> try_catch .)
    WHILE           reduce using rule 18 (statement -> try_catch .)
    DEFINE          reduce using rule 18 (statement -> try_catch .)
    CONST           reduce using rule 18 (statement -> try_catch .)
    IDENTIFIER      reduce using rule 18 (statement -> try_catch .)
    TRY             reduce using rule 18 (statement -> try_catch .)
    CATCH           reduce using rule 18 (statement -> try_catch .)
    THROW           reduce using rule 18 (statement -> try_catch .)
    IF              reduce using rule 18 (statement -> try_catch .)
    INTEGER         reduce using rule 18 (statement -> try_catch .)
    FLOAT           reduce using rule 18 (statement -> try_catch .)
    PUBLIC          reduce using rule 18 (statement -> try_catch .)
    PROTECTED       reduce using rule 18 (statement -> try_catch .)
    PRIVATE         reduce using rule 18 (statement -> try_catch .)
    RBRACE          reduce using rule 18 (statement -> try_catch .)


state 20

    (19) statement -> catch_item .

    $end            reduce using rule 19 (statement -> catch_item .)
    ECHO            reduce using rule 19 (statement -> catch_item .)
    VARIABLE        reduce using rule 19 (statement -> catch_item .)
    VAR             reduce using rule 19 (statement -> catch_item .)
    CLASS           reduce using rule 19 (statement -> catch_item .)
    FUNCTION        reduce using rule 19 (statement -> catch_item .)
    WHILE           reduce using rule 19 (statement -> catch_item .)
    DEFINE          reduce using rule 19 (statement -> catch_item .)
    CONST           reduce using rule 19 (statement -> catch_item .)
    IDENTIFIER      reduce using rule 19 (statement -> catch_item .)
    TRY             reduce using rule 19 (statement -> catch_item .)
    CATCH           reduce using rule 19 (statement -> catch_item .)
    THROW           reduce using rule 19 (statement -> catch_item .)
    IF              reduce using rule 19 (statement -> catch_item .)
    INTEGER         reduce using rule 19 (statement -> catch_item .)
    FLOAT           reduce using rule 19 (statement -> catch_item .)
    PUBLIC          reduce using rule 19 (statement -> catch_item .)
    PROTECTED       reduce using rule 19 (statement -> catch_item .)
    PRIVATE         reduce using rule 19 (statement -> catch_item .)
    RBRACE          reduce using rule 19 (statement -> catch_item .)


state 21

    (20) statement -> throw_statement .

    $end            reduce using rule 20 (statement -> throw_statement .)
    ECHO            reduce using rule 20 (statement -> throw_statement .)
    VARIABLE        reduce using rule 20 (statement -> throw_statement .)
    VAR             reduce using rule 20 (statement -> throw_statement .)
    CLASS           reduce using rule 20 (statement -> throw_statement .)
    FUNCTION        reduce using rule 20 (statement -> throw_statement .)
    WHILE           reduce using rule 20 (statement -> throw_statement .)
    DEFINE          reduce using rule 20 (statement -> throw_statement .)
    CONST           reduce using rule 20 (statement -> throw_statement .)
    IDENTIFIER      reduce using rule 20 (statement -> throw_statement .)
    TRY             reduce using rule 20 (statement -> throw_statement .)
    CATCH           reduce using rule 20 (statement -> throw_statement .)
    THROW           reduce using rule 20 (statement -> throw_statement .)
    IF              reduce using rule 20 (statement -> throw_statement .)
    INTEGER         reduce using rule 20 (statement -> throw_statement .)
    FLOAT           reduce using rule 20 (statement -> throw_statement .)
    PUBLIC          reduce using rule 20 (statement -> throw_statement .)
    PROTECTED       reduce using rule 20 (statement -> throw_statement .)
    PRIVATE         reduce using rule 20 (statement -> throw_statement .)
    RBRACE          reduce using rule 20 (statement -> throw_statement .)


state 22

    (21) statement -> if .

    $end            reduce using rule 21 (statement -> if .)
    ECHO            reduce using rule 21 (statement -> if .)
    VARIABLE        reduce using rule 21 (statement -> if .)
    VAR             reduce using rule 21 (statement -> if .)
    CLASS           reduce using rule 21 (statement -> if .)
    FUNCTION        reduce using rule 21 (statement -> if .)
    WHILE           reduce using rule 21 (statement -> if .)
    DEFINE          reduce using rule 21 (statement -> if .)
    CONST           reduce using rule 21 (statement -> if .)
    IDENTIFIER      reduce using rule 21 (statement -> if .)
    TRY             reduce using rule 21 (statement -> if .)
    CATCH           reduce using rule 21 (statement -> if .)
    THROW           reduce using rule 21 (statement -> if .)
    IF              reduce using rule 21 (statement -> if .)
    INTEGER         reduce using rule 21 (statement -> if .)
    FLOAT           reduce using rule 21 (statement -> if .)
    PUBLIC          reduce using rule 21 (statement -> if .)
    PROTECTED       reduce using rule 21 (statement -> if .)
    PRIVATE         reduce using rule 21 (statement -> if .)
    RBRACE          reduce using rule 21 (statement -> if .)


state 23

    (33) print -> ECHO . LPAREN value RPAREN
    (34) print -> ECHO . value
    (35) print -> ECHO . LPAREN STRING RPAREN
    (36) print -> ECHO . STRING
    (37) print_error -> ECHO . error
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    LPAREN          shift and go to state 49
    STRING          shift and go to state 51
    error           shift and go to state 52
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    value                          shift and go to state 50
    constant_use                   shift and go to state 54

state 24

    (72) expression -> value . operator value
    (73) expression -> value .
    (68) operator -> . PLUS
    (69) operator -> . MINUS
    (70) operator -> . TIMES
    (71) operator -> . DIVIDE

    SEMI            reduce using rule 73 (expression -> value .)
    RPAREN          reduce using rule 73 (expression -> value .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59

    operator                       shift and go to state 55

state 25

    (25) declaration -> VARIABLE . SET value
    (26) declaration -> VARIABLE . SET STRING
    (27) declaration -> VARIABLE . SET expression
    (28) declaration -> VARIABLE . SET condition
    (29) declaration_error -> VARIABLE . SET error
    (38) input -> VARIABLE . SET READLINE LPAREN STRING RPAREN
    (40) array_declaration -> VARIABLE . SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> VARIABLE . SET ARRAY LPAREN empty RPAREN
    (56) function_arrow -> VARIABLE . SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (64) value -> VARIABLE .

    SET             shift and go to state 60
    PLUS            reduce using rule 64 (value -> VARIABLE .)
    MINUS           reduce using rule 64 (value -> VARIABLE .)
    TIMES           reduce using rule 64 (value -> VARIABLE .)
    DIVIDE          reduce using rule 64 (value -> VARIABLE .)
    SEMI            reduce using rule 64 (value -> VARIABLE .)


state 26

    (39) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 61


state 27

    (76) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 62


state 28

    (85) constant_use -> IDENTIFIER .

    $end            reduce using rule 85 (constant_use -> IDENTIFIER .)
    PLUS            reduce using rule 85 (constant_use -> IDENTIFIER .)
    MINUS           reduce using rule 85 (constant_use -> IDENTIFIER .)
    TIMES           reduce using rule 85 (constant_use -> IDENTIFIER .)
    DIVIDE          reduce using rule 85 (constant_use -> IDENTIFIER .)
    SEMI            reduce using rule 85 (constant_use -> IDENTIFIER .)
    RPAREN          reduce using rule 85 (constant_use -> IDENTIFIER .)
    LT              reduce using rule 85 (constant_use -> IDENTIFIER .)
    GT              reduce using rule 85 (constant_use -> IDENTIFIER .)
    LE              reduce using rule 85 (constant_use -> IDENTIFIER .)
    GE              reduce using rule 85 (constant_use -> IDENTIFIER .)
    EQ              reduce using rule 85 (constant_use -> IDENTIFIER .)
    NE              reduce using rule 85 (constant_use -> IDENTIFIER .)
    ECHO            reduce using rule 85 (constant_use -> IDENTIFIER .)
    VARIABLE        reduce using rule 85 (constant_use -> IDENTIFIER .)
    VAR             reduce using rule 85 (constant_use -> IDENTIFIER .)
    CLASS           reduce using rule 85 (constant_use -> IDENTIFIER .)
    FUNCTION        reduce using rule 85 (constant_use -> IDENTIFIER .)
    WHILE           reduce using rule 85 (constant_use -> IDENTIFIER .)
    DEFINE          reduce using rule 85 (constant_use -> IDENTIFIER .)
    CONST           reduce using rule 85 (constant_use -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 85 (constant_use -> IDENTIFIER .)
    TRY             reduce using rule 85 (constant_use -> IDENTIFIER .)
    CATCH           reduce using rule 85 (constant_use -> IDENTIFIER .)
    THROW           reduce using rule 85 (constant_use -> IDENTIFIER .)
    IF              reduce using rule 85 (constant_use -> IDENTIFIER .)
    INTEGER         reduce using rule 85 (constant_use -> IDENTIFIER .)
    FLOAT           reduce using rule 85 (constant_use -> IDENTIFIER .)
    PUBLIC          reduce using rule 85 (constant_use -> IDENTIFIER .)
    PROTECTED       reduce using rule 85 (constant_use -> IDENTIFIER .)
    PRIVATE         reduce using rule 85 (constant_use -> IDENTIFIER .)
    RBRACE          reduce using rule 85 (constant_use -> IDENTIFIER .)
    AND             reduce using rule 85 (constant_use -> IDENTIFIER .)
    OR              reduce using rule 85 (constant_use -> IDENTIFIER .)
    COMMA           reduce using rule 85 (constant_use -> IDENTIFIER .)


state 29

    (92) property_declaration -> visibility . VARIABLE
    (30) function_statement -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 63
    FUNCTION        shift and go to state 64


state 30

    (32) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> FUNCTION . LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (57) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 65
    LPAREN          shift and go to state 66


state 31

    (31) while -> WHILE . LPAREN condition RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 67


state 32

    (83) constant_declaration -> DEFINE . LPAREN STRING COMMA expression RPAREN SEMI

    LPAREN          shift and go to state 68


state 33

    (84) constant_declaration -> CONST . IDENTIFIER SET expression SEMI

    IDENTIFIER      shift and go to state 69


state 34

    (86) try_catch -> TRY . LBRACE statements RBRACE catch_list

    LBRACE          shift and go to state 70


state 35

    (89) catch_item -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> CATCH . LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 71


state 36

    (91) throw_statement -> THROW . NEW EXCEPTION LPAREN RPAREN SEMI

    NEW             shift and go to state 72


state 37

    (44) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 73


state 38

    (65) value -> INTEGER .

    PLUS            reduce using rule 65 (value -> INTEGER .)
    MINUS           reduce using rule 65 (value -> INTEGER .)
    TIMES           reduce using rule 65 (value -> INTEGER .)
    DIVIDE          reduce using rule 65 (value -> INTEGER .)
    SEMI            reduce using rule 65 (value -> INTEGER .)
    RPAREN          reduce using rule 65 (value -> INTEGER .)
    LT              reduce using rule 65 (value -> INTEGER .)
    GT              reduce using rule 65 (value -> INTEGER .)
    LE              reduce using rule 65 (value -> INTEGER .)
    GE              reduce using rule 65 (value -> INTEGER .)
    EQ              reduce using rule 65 (value -> INTEGER .)
    NE              reduce using rule 65 (value -> INTEGER .)
    AND             reduce using rule 65 (value -> INTEGER .)
    OR              reduce using rule 65 (value -> INTEGER .)
    COMMA           reduce using rule 65 (value -> INTEGER .)


state 39

    (67) value -> FLOAT .

    PLUS            reduce using rule 67 (value -> FLOAT .)
    MINUS           reduce using rule 67 (value -> FLOAT .)
    TIMES           reduce using rule 67 (value -> FLOAT .)
    DIVIDE          reduce using rule 67 (value -> FLOAT .)
    SEMI            reduce using rule 67 (value -> FLOAT .)
    RPAREN          reduce using rule 67 (value -> FLOAT .)
    LT              reduce using rule 67 (value -> FLOAT .)
    GT              reduce using rule 67 (value -> FLOAT .)
    LE              reduce using rule 67 (value -> FLOAT .)
    GE              reduce using rule 67 (value -> FLOAT .)
    EQ              reduce using rule 67 (value -> FLOAT .)
    NE              reduce using rule 67 (value -> FLOAT .)
    AND             reduce using rule 67 (value -> FLOAT .)
    OR              reduce using rule 67 (value -> FLOAT .)
    COMMA           reduce using rule 67 (value -> FLOAT .)


state 40

    (95) visibility -> PUBLIC .

    VARIABLE        reduce using rule 95 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 95 (visibility -> PUBLIC .)


state 41

    (96) visibility -> PROTECTED .

    VARIABLE        reduce using rule 96 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 96 (visibility -> PROTECTED .)


state 42

    (97) visibility -> PRIVATE .

    VARIABLE        reduce using rule 97 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 97 (visibility -> PRIVATE .)


state 43

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    DEFINE          reduce using rule 1 (statement -> print SEMI .)
    CONST           reduce using rule 1 (statement -> print SEMI .)
    IDENTIFIER      reduce using rule 1 (statement -> print SEMI .)
    TRY             reduce using rule 1 (statement -> print SEMI .)
    CATCH           reduce using rule 1 (statement -> print SEMI .)
    THROW           reduce using rule 1 (statement -> print SEMI .)
    IF              reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    PUBLIC          reduce using rule 1 (statement -> print SEMI .)
    PROTECTED       reduce using rule 1 (statement -> print SEMI .)
    PRIVATE         reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 44

    (3) statement -> declaration SEMI .

    $end            reduce using rule 3 (statement -> declaration SEMI .)
    ECHO            reduce using rule 3 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 3 (statement -> declaration SEMI .)
    VAR             reduce using rule 3 (statement -> declaration SEMI .)
    CLASS           reduce using rule 3 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 3 (statement -> declaration SEMI .)
    WHILE           reduce using rule 3 (statement -> declaration SEMI .)
    DEFINE          reduce using rule 3 (statement -> declaration SEMI .)
    CONST           reduce using rule 3 (statement -> declaration SEMI .)
    IDENTIFIER      reduce using rule 3 (statement -> declaration SEMI .)
    TRY             reduce using rule 3 (statement -> declaration SEMI .)
    CATCH           reduce using rule 3 (statement -> declaration SEMI .)
    THROW           reduce using rule 3 (statement -> declaration SEMI .)
    IF              reduce using rule 3 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 3 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 3 (statement -> declaration SEMI .)
    PUBLIC          reduce using rule 3 (statement -> declaration SEMI .)
    PROTECTED       reduce using rule 3 (statement -> declaration SEMI .)
    PRIVATE         reduce using rule 3 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 3 (statement -> declaration SEMI .)


state 45

    (5) statement -> input SEMI .

    $end            reduce using rule 5 (statement -> input SEMI .)
    ECHO            reduce using rule 5 (statement -> input SEMI .)
    VARIABLE        reduce using rule 5 (statement -> input SEMI .)
    VAR             reduce using rule 5 (statement -> input SEMI .)
    CLASS           reduce using rule 5 (statement -> input SEMI .)
    FUNCTION        reduce using rule 5 (statement -> input SEMI .)
    WHILE           reduce using rule 5 (statement -> input SEMI .)
    DEFINE          reduce using rule 5 (statement -> input SEMI .)
    CONST           reduce using rule 5 (statement -> input SEMI .)
    IDENTIFIER      reduce using rule 5 (statement -> input SEMI .)
    TRY             reduce using rule 5 (statement -> input SEMI .)
    CATCH           reduce using rule 5 (statement -> input SEMI .)
    THROW           reduce using rule 5 (statement -> input SEMI .)
    IF              reduce using rule 5 (statement -> input SEMI .)
    INTEGER         reduce using rule 5 (statement -> input SEMI .)
    FLOAT           reduce using rule 5 (statement -> input SEMI .)
    PUBLIC          reduce using rule 5 (statement -> input SEMI .)
    PROTECTED       reduce using rule 5 (statement -> input SEMI .)
    PRIVATE         reduce using rule 5 (statement -> input SEMI .)
    RBRACE          reduce using rule 5 (statement -> input SEMI .)


state 46

    (6) statement -> expression SEMI .

    $end            reduce using rule 6 (statement -> expression SEMI .)
    ECHO            reduce using rule 6 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 6 (statement -> expression SEMI .)
    VAR             reduce using rule 6 (statement -> expression SEMI .)
    CLASS           reduce using rule 6 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 6 (statement -> expression SEMI .)
    WHILE           reduce using rule 6 (statement -> expression SEMI .)
    DEFINE          reduce using rule 6 (statement -> expression SEMI .)
    CONST           reduce using rule 6 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 6 (statement -> expression SEMI .)
    TRY             reduce using rule 6 (statement -> expression SEMI .)
    CATCH           reduce using rule 6 (statement -> expression SEMI .)
    THROW           reduce using rule 6 (statement -> expression SEMI .)
    IF              reduce using rule 6 (statement -> expression SEMI .)
    INTEGER         reduce using rule 6 (statement -> expression SEMI .)
    FLOAT           reduce using rule 6 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 6 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 6 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 6 (statement -> expression SEMI .)
    RBRACE          reduce using rule 6 (statement -> expression SEMI .)


state 47

    (9) statement -> array_declaration SEMI .

    $end            reduce using rule 9 (statement -> array_declaration SEMI .)
    ECHO            reduce using rule 9 (statement -> array_declaration SEMI .)
    VARIABLE        reduce using rule 9 (statement -> array_declaration SEMI .)
    VAR             reduce using rule 9 (statement -> array_declaration SEMI .)
    CLASS           reduce using rule 9 (statement -> array_declaration SEMI .)
    FUNCTION        reduce using rule 9 (statement -> array_declaration SEMI .)
    WHILE           reduce using rule 9 (statement -> array_declaration SEMI .)
    DEFINE          reduce using rule 9 (statement -> array_declaration SEMI .)
    CONST           reduce using rule 9 (statement -> array_declaration SEMI .)
    IDENTIFIER      reduce using rule 9 (statement -> array_declaration SEMI .)
    TRY             reduce using rule 9 (statement -> array_declaration SEMI .)
    CATCH           reduce using rule 9 (statement -> array_declaration SEMI .)
    THROW           reduce using rule 9 (statement -> array_declaration SEMI .)
    IF              reduce using rule 9 (statement -> array_declaration SEMI .)
    INTEGER         reduce using rule 9 (statement -> array_declaration SEMI .)
    FLOAT           reduce using rule 9 (statement -> array_declaration SEMI .)
    PUBLIC          reduce using rule 9 (statement -> array_declaration SEMI .)
    PROTECTED       reduce using rule 9 (statement -> array_declaration SEMI .)
    PRIVATE         reduce using rule 9 (statement -> array_declaration SEMI .)
    RBRACE          reduce using rule 9 (statement -> array_declaration SEMI .)


state 48

    (10) statement -> property_declaration SEMI .

    $end            reduce using rule 10 (statement -> property_declaration SEMI .)
    ECHO            reduce using rule 10 (statement -> property_declaration SEMI .)
    VARIABLE        reduce using rule 10 (statement -> property_declaration SEMI .)
    VAR             reduce using rule 10 (statement -> property_declaration SEMI .)
    CLASS           reduce using rule 10 (statement -> property_declaration SEMI .)
    FUNCTION        reduce using rule 10 (statement -> property_declaration SEMI .)
    WHILE           reduce using rule 10 (statement -> property_declaration SEMI .)
    DEFINE          reduce using rule 10 (statement -> property_declaration SEMI .)
    CONST           reduce using rule 10 (statement -> property_declaration SEMI .)
    IDENTIFIER      reduce using rule 10 (statement -> property_declaration SEMI .)
    TRY             reduce using rule 10 (statement -> property_declaration SEMI .)
    CATCH           reduce using rule 10 (statement -> property_declaration SEMI .)
    THROW           reduce using rule 10 (statement -> property_declaration SEMI .)
    IF              reduce using rule 10 (statement -> property_declaration SEMI .)
    INTEGER         reduce using rule 10 (statement -> property_declaration SEMI .)
    FLOAT           reduce using rule 10 (statement -> property_declaration SEMI .)
    PUBLIC          reduce using rule 10 (statement -> property_declaration SEMI .)
    PROTECTED       reduce using rule 10 (statement -> property_declaration SEMI .)
    PRIVATE         reduce using rule 10 (statement -> property_declaration SEMI .)
    RBRACE          reduce using rule 10 (statement -> property_declaration SEMI .)


state 49

    (33) print -> ECHO LPAREN . value RPAREN
    (35) print -> ECHO LPAREN . STRING RPAREN
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    STRING          shift and go to state 75
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    value                          shift and go to state 74
    constant_use                   shift and go to state 54

state 50

    (34) print -> ECHO value .

    SEMI            reduce using rule 34 (print -> ECHO value .)


state 51

    (36) print -> ECHO STRING .

    SEMI            reduce using rule 36 (print -> ECHO STRING .)


state 52

    (37) print_error -> ECHO error .

    $end            reduce using rule 37 (print_error -> ECHO error .)
    ECHO            reduce using rule 37 (print_error -> ECHO error .)
    VARIABLE        reduce using rule 37 (print_error -> ECHO error .)
    VAR             reduce using rule 37 (print_error -> ECHO error .)
    CLASS           reduce using rule 37 (print_error -> ECHO error .)
    FUNCTION        reduce using rule 37 (print_error -> ECHO error .)
    WHILE           reduce using rule 37 (print_error -> ECHO error .)
    DEFINE          reduce using rule 37 (print_error -> ECHO error .)
    CONST           reduce using rule 37 (print_error -> ECHO error .)
    IDENTIFIER      reduce using rule 37 (print_error -> ECHO error .)
    TRY             reduce using rule 37 (print_error -> ECHO error .)
    CATCH           reduce using rule 37 (print_error -> ECHO error .)
    THROW           reduce using rule 37 (print_error -> ECHO error .)
    IF              reduce using rule 37 (print_error -> ECHO error .)
    INTEGER         reduce using rule 37 (print_error -> ECHO error .)
    FLOAT           reduce using rule 37 (print_error -> ECHO error .)
    PUBLIC          reduce using rule 37 (print_error -> ECHO error .)
    PROTECTED       reduce using rule 37 (print_error -> ECHO error .)
    PRIVATE         reduce using rule 37 (print_error -> ECHO error .)
    RBRACE          reduce using rule 37 (print_error -> ECHO error .)


state 53

    (64) value -> VARIABLE .

    SEMI            reduce using rule 64 (value -> VARIABLE .)
    RPAREN          reduce using rule 64 (value -> VARIABLE .)
    PLUS            reduce using rule 64 (value -> VARIABLE .)
    MINUS           reduce using rule 64 (value -> VARIABLE .)
    TIMES           reduce using rule 64 (value -> VARIABLE .)
    DIVIDE          reduce using rule 64 (value -> VARIABLE .)
    LT              reduce using rule 64 (value -> VARIABLE .)
    GT              reduce using rule 64 (value -> VARIABLE .)
    LE              reduce using rule 64 (value -> VARIABLE .)
    GE              reduce using rule 64 (value -> VARIABLE .)
    EQ              reduce using rule 64 (value -> VARIABLE .)
    NE              reduce using rule 64 (value -> VARIABLE .)
    AND             reduce using rule 64 (value -> VARIABLE .)
    OR              reduce using rule 64 (value -> VARIABLE .)
    COMMA           reduce using rule 64 (value -> VARIABLE .)


state 54

    (66) value -> constant_use .

    SEMI            reduce using rule 66 (value -> constant_use .)
    RPAREN          reduce using rule 66 (value -> constant_use .)
    PLUS            reduce using rule 66 (value -> constant_use .)
    MINUS           reduce using rule 66 (value -> constant_use .)
    TIMES           reduce using rule 66 (value -> constant_use .)
    DIVIDE          reduce using rule 66 (value -> constant_use .)
    LT              reduce using rule 66 (value -> constant_use .)
    GT              reduce using rule 66 (value -> constant_use .)
    LE              reduce using rule 66 (value -> constant_use .)
    GE              reduce using rule 66 (value -> constant_use .)
    EQ              reduce using rule 66 (value -> constant_use .)
    NE              reduce using rule 66 (value -> constant_use .)
    AND             reduce using rule 66 (value -> constant_use .)
    OR              reduce using rule 66 (value -> constant_use .)
    COMMA           reduce using rule 66 (value -> constant_use .)


state 55

    (72) expression -> value operator . value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    value                          shift and go to state 76
    constant_use                   shift and go to state 54

state 56

    (68) operator -> PLUS .

    VARIABLE        reduce using rule 68 (operator -> PLUS .)
    INTEGER         reduce using rule 68 (operator -> PLUS .)
    FLOAT           reduce using rule 68 (operator -> PLUS .)
    IDENTIFIER      reduce using rule 68 (operator -> PLUS .)


state 57

    (69) operator -> MINUS .

    VARIABLE        reduce using rule 69 (operator -> MINUS .)
    INTEGER         reduce using rule 69 (operator -> MINUS .)
    FLOAT           reduce using rule 69 (operator -> MINUS .)
    IDENTIFIER      reduce using rule 69 (operator -> MINUS .)


state 58

    (70) operator -> TIMES .

    VARIABLE        reduce using rule 70 (operator -> TIMES .)
    INTEGER         reduce using rule 70 (operator -> TIMES .)
    FLOAT           reduce using rule 70 (operator -> TIMES .)
    IDENTIFIER      reduce using rule 70 (operator -> TIMES .)


state 59

    (71) operator -> DIVIDE .

    VARIABLE        reduce using rule 71 (operator -> DIVIDE .)
    INTEGER         reduce using rule 71 (operator -> DIVIDE .)
    FLOAT           reduce using rule 71 (operator -> DIVIDE .)
    IDENTIFIER      reduce using rule 71 (operator -> DIVIDE .)


state 60

    (25) declaration -> VARIABLE SET . value
    (26) declaration -> VARIABLE SET . STRING
    (27) declaration -> VARIABLE SET . expression
    (28) declaration -> VARIABLE SET . condition
    (29) declaration_error -> VARIABLE SET . error
    (38) input -> VARIABLE SET . READLINE LPAREN STRING RPAREN
    (40) array_declaration -> VARIABLE SET . ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> VARIABLE SET . ARRAY LPAREN empty RPAREN
    (56) function_arrow -> VARIABLE SET . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (72) expression -> . value operator value
    (73) expression -> . value
    (51) condition -> . value comparison_operator value
    (85) constant_use -> . IDENTIFIER

    STRING          shift and go to state 78
    error           shift and go to state 81
    READLINE        shift and go to state 82
    ARRAY           shift and go to state 83
    FUNCTION        shift and go to state 84
    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    value                          shift and go to state 77
    expression                     shift and go to state 79
    condition                      shift and go to state 80
    constant_use                   shift and go to state 54

state 61

    (39) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 85


state 62

    (76) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 86


state 63

    (92) property_declaration -> visibility VARIABLE .

    SEMI            reduce using rule 92 (property_declaration -> visibility VARIABLE .)
    PUBLIC          reduce using rule 92 (property_declaration -> visibility VARIABLE .)
    PROTECTED       reduce using rule 92 (property_declaration -> visibility VARIABLE .)
    PRIVATE         reduce using rule 92 (property_declaration -> visibility VARIABLE .)
    RBRACE          reduce using rule 92 (property_declaration -> visibility VARIABLE .)


state 64

    (30) function_statement -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 87


state 65

    (32) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 88


state 66

    (104) function_anonymous -> FUNCTION LPAREN . parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (57) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow
    (98) parameters -> . parameter COMMA parameters
    (99) parameters -> . parameter
    (100) parameters -> . IDENTIFIER
    (101) parameters -> . empty
    (102) parameter -> . TYPE VARIABLE
    (103) parameter -> . VARIABLE
    (110) empty -> .

    VARIABLE        shift and go to state 90
    IDENTIFIER      shift and go to state 92
    TYPE            shift and go to state 94
    RPAREN          reduce using rule 110 (empty -> .)

    parameters                     shift and go to state 89
    parameter                      shift and go to state 91
    empty                          shift and go to state 93

state 67

    (31) while -> WHILE LPAREN . condition RPAREN LBRACE statements RBRACE
    (51) condition -> . value comparison_operator value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    condition                      shift and go to state 95
    value                          shift and go to state 96
    constant_use                   shift and go to state 54

state 68

    (83) constant_declaration -> DEFINE LPAREN . STRING COMMA expression RPAREN SEMI

    STRING          shift and go to state 97


state 69

    (84) constant_declaration -> CONST IDENTIFIER . SET expression SEMI

    SET             shift and go to state 98


state 70

    (86) try_catch -> TRY LBRACE . statements RBRACE catch_list
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 99
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 71

    (89) catch_item -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> CATCH LPAREN . EXCEPTION empty RPAREN LBRACE statements RBRACE

    EXCEPTION       shift and go to state 102


state 72

    (91) throw_statement -> THROW NEW . EXCEPTION LPAREN RPAREN SEMI

    EXCEPTION       shift and go to state 103


state 73

    (44) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE
    (45) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE else
    (52) conditions -> . condition logical_operator conditions
    (53) conditions -> . condition
    (51) condition -> . value comparison_operator value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    conditions                     shift and go to state 104
    condition                      shift and go to state 105
    value                          shift and go to state 96
    constant_use                   shift and go to state 54

state 74

    (33) print -> ECHO LPAREN value . RPAREN

    RPAREN          shift and go to state 106


state 75

    (35) print -> ECHO LPAREN STRING . RPAREN

    RPAREN          shift and go to state 107


state 76

    (72) expression -> value operator value .

    SEMI            reduce using rule 72 (expression -> value operator value .)
    RPAREN          reduce using rule 72 (expression -> value operator value .)


state 77

    (25) declaration -> VARIABLE SET value .
    (72) expression -> value . operator value
    (73) expression -> value .
    (51) condition -> value . comparison_operator value
    (68) operator -> . PLUS
    (69) operator -> . MINUS
    (70) operator -> . TIMES
    (71) operator -> . DIVIDE
    (58) comparison_operator -> . LT
    (59) comparison_operator -> . GT
    (60) comparison_operator -> . LE
    (61) comparison_operator -> . GE
    (62) comparison_operator -> . EQ
    (63) comparison_operator -> . NE

  ! reduce/reduce conflict for SEMI resolved using rule 25 (declaration -> VARIABLE SET value .)
    SEMI            reduce using rule 25 (declaration -> VARIABLE SET value .)
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    TIMES           shift and go to state 58
    DIVIDE          shift and go to state 59
    LT              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

  ! SEMI            [ reduce using rule 73 (expression -> value .) ]

    operator                       shift and go to state 55
    comparison_operator            shift and go to state 108

state 78

    (26) declaration -> VARIABLE SET STRING .

    SEMI            reduce using rule 26 (declaration -> VARIABLE SET STRING .)


state 79

    (27) declaration -> VARIABLE SET expression .

    SEMI            reduce using rule 27 (declaration -> VARIABLE SET expression .)


state 80

    (28) declaration -> VARIABLE SET condition .

    SEMI            reduce using rule 28 (declaration -> VARIABLE SET condition .)


state 81

    (29) declaration_error -> VARIABLE SET error .

    $end            reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    ECHO            reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    VARIABLE        reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    VAR             reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    CLASS           reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    FUNCTION        reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    WHILE           reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    DEFINE          reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    CONST           reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    IDENTIFIER      reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    TRY             reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    CATCH           reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    THROW           reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    IF              reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    INTEGER         reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    FLOAT           reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    PUBLIC          reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    PROTECTED       reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    PRIVATE         reduce using rule 29 (declaration_error -> VARIABLE SET error .)
    RBRACE          reduce using rule 29 (declaration_error -> VARIABLE SET error .)


state 82

    (38) input -> VARIABLE SET READLINE . LPAREN STRING RPAREN

    LPAREN          shift and go to state 115


state 83

    (40) array_declaration -> VARIABLE SET ARRAY . LPAREN arrayArg RPAREN
    (41) array_declaration -> VARIABLE SET ARRAY . LPAREN empty RPAREN

    LPAREN          shift and go to state 116


state 84

    (56) function_arrow -> VARIABLE SET FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI

    LPAREN          shift and go to state 117


state 85

    (39) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 118


state 86

    (76) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (77) class_body -> . class_member_list
    (78) class_member_list -> . class_member class_member_list
    (79) class_member_list -> . class_member
    (80) class_member -> . property_declaration
    (81) class_member -> . method_declaration
    (82) class_member -> . constructor_declaration
    (92) property_declaration -> . visibility VARIABLE
    (93) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (94) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    class_body                     shift and go to state 119
    class_member_list              shift and go to state 120
    class_member                   shift and go to state 121
    property_declaration           shift and go to state 122
    method_declaration             shift and go to state 123
    constructor_declaration        shift and go to state 124
    visibility                     shift and go to state 125

state 87

    (30) function_statement -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 126


state 88

    (32) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 127


state 89

    (104) function_anonymous -> FUNCTION LPAREN parameters . RPAREN use_clause_opt LBRACE statements RBRACE

    RPAREN          shift and go to state 128


state 90

    (57) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow
    (103) parameter -> VARIABLE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 129
    COMMA           reduce using rule 103 (parameter -> VARIABLE .)

  ! RPAREN          [ reduce using rule 103 (parameter -> VARIABLE .) ]


state 91

    (98) parameters -> parameter . COMMA parameters
    (99) parameters -> parameter .

    COMMA           shift and go to state 130
    RPAREN          reduce using rule 99 (parameters -> parameter .)


state 92

    (100) parameters -> IDENTIFIER .

    RPAREN          reduce using rule 100 (parameters -> IDENTIFIER .)


state 93

    (101) parameters -> empty .

    RPAREN          reduce using rule 101 (parameters -> empty .)


state 94

    (102) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 131


state 95

    (31) while -> WHILE LPAREN condition . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 132


state 96

    (51) condition -> value . comparison_operator value
    (58) comparison_operator -> . LT
    (59) comparison_operator -> . GT
    (60) comparison_operator -> . LE
    (61) comparison_operator -> . GE
    (62) comparison_operator -> . EQ
    (63) comparison_operator -> . NE

    LT              shift and go to state 109
    GT              shift and go to state 110
    LE              shift and go to state 111
    GE              shift and go to state 112
    EQ              shift and go to state 113
    NE              shift and go to state 114

    comparison_operator            shift and go to state 108

state 97

    (83) constant_declaration -> DEFINE LPAREN STRING . COMMA expression RPAREN SEMI

    COMMA           shift and go to state 133


state 98

    (84) constant_declaration -> CONST IDENTIFIER SET . expression SEMI
    (72) expression -> . value operator value
    (73) expression -> . value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    expression                     shift and go to state 134
    value                          shift and go to state 24
    constant_use                   shift and go to state 54

state 99

    (86) try_catch -> TRY LBRACE statements . RBRACE catch_list

    RBRACE          shift and go to state 135


state 100

    (22) statements -> statement . statements
    (23) statements -> statement .
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

  ! reduce/reduce conflict for RBRACE resolved using rule 23 (statements -> statement .)
    RBRACE          reduce using rule 23 (statements -> statement .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

  ! RBRACE          [ reduce using rule 110 (empty -> .) ]

    statement                      shift and go to state 100
    statements                     shift and go to state 136
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 101

    (24) statements -> empty .

    RBRACE          reduce using rule 24 (statements -> empty .)


state 102

    (89) catch_item -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> CATCH LPAREN EXCEPTION . empty RPAREN LBRACE statements RBRACE
    (110) empty -> .

    VARIABLE        shift and go to state 137
    RPAREN          reduce using rule 110 (empty -> .)

    empty                          shift and go to state 138

state 103

    (91) throw_statement -> THROW NEW EXCEPTION . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 139


state 104

    (44) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE
    (45) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE elseif
    (46) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 140


state 105

    (52) conditions -> condition . logical_operator conditions
    (53) conditions -> condition .
    (108) logical_operator -> . AND
    (109) logical_operator -> . OR

    RPAREN          reduce using rule 53 (conditions -> condition .)
    AND             shift and go to state 142
    OR              shift and go to state 143

    logical_operator               shift and go to state 141

state 106

    (33) print -> ECHO LPAREN value RPAREN .

    SEMI            reduce using rule 33 (print -> ECHO LPAREN value RPAREN .)


state 107

    (35) print -> ECHO LPAREN STRING RPAREN .

    SEMI            reduce using rule 35 (print -> ECHO LPAREN STRING RPAREN .)


state 108

    (51) condition -> value comparison_operator . value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    value                          shift and go to state 144
    constant_use                   shift and go to state 54

state 109

    (58) comparison_operator -> LT .

    VARIABLE        reduce using rule 58 (comparison_operator -> LT .)
    INTEGER         reduce using rule 58 (comparison_operator -> LT .)
    FLOAT           reduce using rule 58 (comparison_operator -> LT .)
    IDENTIFIER      reduce using rule 58 (comparison_operator -> LT .)


state 110

    (59) comparison_operator -> GT .

    VARIABLE        reduce using rule 59 (comparison_operator -> GT .)
    INTEGER         reduce using rule 59 (comparison_operator -> GT .)
    FLOAT           reduce using rule 59 (comparison_operator -> GT .)
    IDENTIFIER      reduce using rule 59 (comparison_operator -> GT .)


state 111

    (60) comparison_operator -> LE .

    VARIABLE        reduce using rule 60 (comparison_operator -> LE .)
    INTEGER         reduce using rule 60 (comparison_operator -> LE .)
    FLOAT           reduce using rule 60 (comparison_operator -> LE .)
    IDENTIFIER      reduce using rule 60 (comparison_operator -> LE .)


state 112

    (61) comparison_operator -> GE .

    VARIABLE        reduce using rule 61 (comparison_operator -> GE .)
    INTEGER         reduce using rule 61 (comparison_operator -> GE .)
    FLOAT           reduce using rule 61 (comparison_operator -> GE .)
    IDENTIFIER      reduce using rule 61 (comparison_operator -> GE .)


state 113

    (62) comparison_operator -> EQ .

    VARIABLE        reduce using rule 62 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 62 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 62 (comparison_operator -> EQ .)
    IDENTIFIER      reduce using rule 62 (comparison_operator -> EQ .)


state 114

    (63) comparison_operator -> NE .

    VARIABLE        reduce using rule 63 (comparison_operator -> NE .)
    INTEGER         reduce using rule 63 (comparison_operator -> NE .)
    FLOAT           reduce using rule 63 (comparison_operator -> NE .)
    IDENTIFIER      reduce using rule 63 (comparison_operator -> NE .)


state 115

    (38) input -> VARIABLE SET READLINE LPAREN . STRING RPAREN

    STRING          shift and go to state 145


state 116

    (40) array_declaration -> VARIABLE SET ARRAY LPAREN . arrayArg RPAREN
    (41) array_declaration -> VARIABLE SET ARRAY LPAREN . empty RPAREN
    (42) arrayArg -> . index ARROW value
    (43) arrayArg -> . index ARROW value COMMA arrayArg
    (110) empty -> .
    (54) index -> . INTEGER
    (55) index -> . STRING

    RPAREN          reduce using rule 110 (empty -> .)
    INTEGER         shift and go to state 149
    STRING          shift and go to state 150

    arrayArg                       shift and go to state 146
    empty                          shift and go to state 147
    index                          shift and go to state 148

state 117

    (56) function_arrow -> VARIABLE SET FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI

    VARIABLE        shift and go to state 151


state 118

    (39) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 152


state 119

    (76) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 153


state 120

    (77) class_body -> class_member_list .

    RBRACE          reduce using rule 77 (class_body -> class_member_list .)


state 121

    (78) class_member_list -> class_member . class_member_list
    (79) class_member_list -> class_member .
    (78) class_member_list -> . class_member class_member_list
    (79) class_member_list -> . class_member
    (80) class_member -> . property_declaration
    (81) class_member -> . method_declaration
    (82) class_member -> . constructor_declaration
    (92) property_declaration -> . visibility VARIABLE
    (93) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (94) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 79 (class_member_list -> class_member .)
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    class_member                   shift and go to state 121
    class_member_list              shift and go to state 154
    property_declaration           shift and go to state 122
    method_declaration             shift and go to state 123
    constructor_declaration        shift and go to state 124
    visibility                     shift and go to state 125

state 122

    (80) class_member -> property_declaration .

    PUBLIC          reduce using rule 80 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 80 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 80 (class_member -> property_declaration .)
    RBRACE          reduce using rule 80 (class_member -> property_declaration .)


state 123

    (81) class_member -> method_declaration .

    PUBLIC          reduce using rule 81 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 81 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 81 (class_member -> method_declaration .)
    RBRACE          reduce using rule 81 (class_member -> method_declaration .)


state 124

    (82) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 82 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 82 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 82 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 82 (class_member -> constructor_declaration .)


state 125

    (92) property_declaration -> visibility . VARIABLE
    (93) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (94) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 63
    FUNCTION        shift and go to state 155


state 126

    (30) function_statement -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (98) parameters -> . parameter COMMA parameters
    (99) parameters -> . parameter
    (100) parameters -> . IDENTIFIER
    (101) parameters -> . empty
    (102) parameter -> . TYPE VARIABLE
    (103) parameter -> . VARIABLE
    (110) empty -> .

    IDENTIFIER      shift and go to state 92
    TYPE            shift and go to state 94
    VARIABLE        shift and go to state 157
    RPAREN          reduce using rule 110 (empty -> .)

    parameters                     shift and go to state 156
    parameter                      shift and go to state 91
    empty                          shift and go to state 93

state 127

    (32) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 158


state 128

    (104) function_anonymous -> FUNCTION LPAREN parameters RPAREN . use_clause_opt LBRACE statements RBRACE
    (105) use_clause_opt -> . USE LPAREN variables RPAREN

    USE             shift and go to state 160

    use_clause_opt                 shift and go to state 159

state 129

    (57) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW function_arrow

    ARROW           shift and go to state 161


state 130

    (98) parameters -> parameter COMMA . parameters
    (98) parameters -> . parameter COMMA parameters
    (99) parameters -> . parameter
    (100) parameters -> . IDENTIFIER
    (101) parameters -> . empty
    (102) parameter -> . TYPE VARIABLE
    (103) parameter -> . VARIABLE
    (110) empty -> .

    IDENTIFIER      shift and go to state 92
    TYPE            shift and go to state 94
    VARIABLE        shift and go to state 157
    RPAREN          reduce using rule 110 (empty -> .)

    parameter                      shift and go to state 91
    parameters                     shift and go to state 162
    empty                          shift and go to state 93

state 131

    (102) parameter -> TYPE VARIABLE .

    COMMA           reduce using rule 102 (parameter -> TYPE VARIABLE .)
    RPAREN          reduce using rule 102 (parameter -> TYPE VARIABLE .)


state 132

    (31) while -> WHILE LPAREN condition RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 163


state 133

    (83) constant_declaration -> DEFINE LPAREN STRING COMMA . expression RPAREN SEMI
    (72) expression -> . value operator value
    (73) expression -> . value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    expression                     shift and go to state 164
    value                          shift and go to state 24
    constant_use                   shift and go to state 54

state 134

    (84) constant_declaration -> CONST IDENTIFIER SET expression . SEMI

    SEMI            shift and go to state 165


state 135

    (86) try_catch -> TRY LBRACE statements RBRACE . catch_list
    (87) catch_list -> . catch_item catch_list
    (88) catch_list -> . empty
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (110) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 35
    $end            reduce using rule 110 (empty -> .)
    ECHO            reduce using rule 110 (empty -> .)
    VARIABLE        reduce using rule 110 (empty -> .)
    VAR             reduce using rule 110 (empty -> .)
    CLASS           reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    DEFINE          reduce using rule 110 (empty -> .)
    CONST           reduce using rule 110 (empty -> .)
    IDENTIFIER      reduce using rule 110 (empty -> .)
    TRY             reduce using rule 110 (empty -> .)
    THROW           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    INTEGER         reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    PUBLIC          reduce using rule 110 (empty -> .)
    PROTECTED       reduce using rule 110 (empty -> .)
    PRIVATE         reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

  ! CATCH           [ reduce using rule 110 (empty -> .) ]

    catch_list                     shift and go to state 166
    catch_item                     shift and go to state 167
    empty                          shift and go to state 168

state 136

    (22) statements -> statement statements .

    RBRACE          reduce using rule 22 (statements -> statement statements .)


state 137

    (89) catch_item -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 169


state 138

    (90) catch_item -> CATCH LPAREN EXCEPTION empty . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 170


state 139

    (91) throw_statement -> THROW NEW EXCEPTION LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 171


state 140

    (44) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE
    (45) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE elseif
    (46) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 172


state 141

    (52) conditions -> condition logical_operator . conditions
    (52) conditions -> . condition logical_operator conditions
    (53) conditions -> . condition
    (51) condition -> . value comparison_operator value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    condition                      shift and go to state 105
    conditions                     shift and go to state 173
    value                          shift and go to state 96
    constant_use                   shift and go to state 54

state 142

    (108) logical_operator -> AND .

    VARIABLE        reduce using rule 108 (logical_operator -> AND .)
    INTEGER         reduce using rule 108 (logical_operator -> AND .)
    FLOAT           reduce using rule 108 (logical_operator -> AND .)
    IDENTIFIER      reduce using rule 108 (logical_operator -> AND .)


state 143

    (109) logical_operator -> OR .

    VARIABLE        reduce using rule 109 (logical_operator -> OR .)
    INTEGER         reduce using rule 109 (logical_operator -> OR .)
    FLOAT           reduce using rule 109 (logical_operator -> OR .)
    IDENTIFIER      reduce using rule 109 (logical_operator -> OR .)


state 144

    (51) condition -> value comparison_operator value .

    SEMI            reduce using rule 51 (condition -> value comparison_operator value .)
    RPAREN          reduce using rule 51 (condition -> value comparison_operator value .)
    AND             reduce using rule 51 (condition -> value comparison_operator value .)
    OR              reduce using rule 51 (condition -> value comparison_operator value .)


state 145

    (38) input -> VARIABLE SET READLINE LPAREN STRING . RPAREN

    RPAREN          shift and go to state 174


state 146

    (40) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg . RPAREN

    RPAREN          shift and go to state 175


state 147

    (41) array_declaration -> VARIABLE SET ARRAY LPAREN empty . RPAREN

    RPAREN          shift and go to state 176


state 148

    (42) arrayArg -> index . ARROW value
    (43) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 177


state 149

    (54) index -> INTEGER .

    ARROW           reduce using rule 54 (index -> INTEGER .)


state 150

    (55) index -> STRING .

    ARROW           reduce using rule 55 (index -> STRING .)


state 151

    (56) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI

    RPAREN          shift and go to state 178


state 152

    (39) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 179


state 153

    (76) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    $end            reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFINE          reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRY             reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CATCH           reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    THROW           reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROTECTED       reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 76 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 154

    (78) class_member_list -> class_member class_member_list .

    RBRACE          reduce using rule 78 (class_member_list -> class_member class_member_list .)


state 155

    (93) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (94) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 180
    CONSTRUCT       shift and go to state 181


state 156

    (30) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 182


state 157

    (103) parameter -> VARIABLE .

    COMMA           reduce using rule 103 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 103 (parameter -> VARIABLE .)


state 158

    (32) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 183
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 159

    (104) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 184


state 160

    (105) use_clause_opt -> USE . LPAREN variables RPAREN

    LPAREN          shift and go to state 185


state 161

    (57) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . function_arrow
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 187
    FUNCTION        shift and go to state 186

    function_arrow                 shift and go to state 188

state 162

    (98) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 98 (parameters -> parameter COMMA parameters .)


state 163

    (31) while -> WHILE LPAREN condition RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 189
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 164

    (83) constant_declaration -> DEFINE LPAREN STRING COMMA expression . RPAREN SEMI

    RPAREN          shift and go to state 190


state 165

    (84) constant_declaration -> CONST IDENTIFIER SET expression SEMI .

    $end            reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    ECHO            reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VARIABLE        reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VAR             reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CLASS           reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FUNCTION        reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    WHILE           reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    DEFINE          reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CONST           reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IDENTIFIER      reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    TRY             reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CATCH           reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    THROW           reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IF              reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    INTEGER         reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FLOAT           reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PUBLIC          reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PROTECTED       reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PRIVATE         reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    RBRACE          reduce using rule 84 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)


state 166

    (86) try_catch -> TRY LBRACE statements RBRACE catch_list .

    $end            reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    ECHO            reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VARIABLE        reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VAR             reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CLASS           reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FUNCTION        reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    WHILE           reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    DEFINE          reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CONST           reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IDENTIFIER      reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    TRY             reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CATCH           reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    THROW           reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IF              reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    INTEGER         reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FLOAT           reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PUBLIC          reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PROTECTED       reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PRIVATE         reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    RBRACE          reduce using rule 86 (try_catch -> TRY LBRACE statements RBRACE catch_list .)


state 167

    (87) catch_list -> catch_item . catch_list
    (87) catch_list -> . catch_item catch_list
    (88) catch_list -> . empty
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (110) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 35
    $end            reduce using rule 110 (empty -> .)
    ECHO            reduce using rule 110 (empty -> .)
    VARIABLE        reduce using rule 110 (empty -> .)
    VAR             reduce using rule 110 (empty -> .)
    CLASS           reduce using rule 110 (empty -> .)
    FUNCTION        reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    DEFINE          reduce using rule 110 (empty -> .)
    CONST           reduce using rule 110 (empty -> .)
    IDENTIFIER      reduce using rule 110 (empty -> .)
    TRY             reduce using rule 110 (empty -> .)
    THROW           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    INTEGER         reduce using rule 110 (empty -> .)
    FLOAT           reduce using rule 110 (empty -> .)
    PUBLIC          reduce using rule 110 (empty -> .)
    PROTECTED       reduce using rule 110 (empty -> .)
    PRIVATE         reduce using rule 110 (empty -> .)
    RBRACE          reduce using rule 110 (empty -> .)

  ! CATCH           [ reduce using rule 110 (empty -> .) ]

    catch_item                     shift and go to state 167
    catch_list                     shift and go to state 191
    empty                          shift and go to state 168

state 168

    (88) catch_list -> empty .

    $end            reduce using rule 88 (catch_list -> empty .)
    ECHO            reduce using rule 88 (catch_list -> empty .)
    VARIABLE        reduce using rule 88 (catch_list -> empty .)
    VAR             reduce using rule 88 (catch_list -> empty .)
    CLASS           reduce using rule 88 (catch_list -> empty .)
    FUNCTION        reduce using rule 88 (catch_list -> empty .)
    WHILE           reduce using rule 88 (catch_list -> empty .)
    DEFINE          reduce using rule 88 (catch_list -> empty .)
    CONST           reduce using rule 88 (catch_list -> empty .)
    IDENTIFIER      reduce using rule 88 (catch_list -> empty .)
    TRY             reduce using rule 88 (catch_list -> empty .)
    CATCH           reduce using rule 88 (catch_list -> empty .)
    THROW           reduce using rule 88 (catch_list -> empty .)
    IF              reduce using rule 88 (catch_list -> empty .)
    INTEGER         reduce using rule 88 (catch_list -> empty .)
    FLOAT           reduce using rule 88 (catch_list -> empty .)
    PUBLIC          reduce using rule 88 (catch_list -> empty .)
    PROTECTED       reduce using rule 88 (catch_list -> empty .)
    PRIVATE         reduce using rule 88 (catch_list -> empty .)
    RBRACE          reduce using rule 88 (catch_list -> empty .)


state 169

    (89) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 192


state 170

    (90) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 193


state 171

    (91) throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN . SEMI

    SEMI            shift and go to state 194


state 172

    (44) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE
    (45) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE elseif
    (46) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE else
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 195
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 173

    (52) conditions -> condition logical_operator conditions .

    RPAREN          reduce using rule 52 (conditions -> condition logical_operator conditions .)


state 174

    (38) input -> VARIABLE SET READLINE LPAREN STRING RPAREN .

    SEMI            reduce using rule 38 (input -> VARIABLE SET READLINE LPAREN STRING RPAREN .)


state 175

    (40) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .

    SEMI            reduce using rule 40 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)


state 176

    (41) array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .

    SEMI            reduce using rule 41 (array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .)


state 177

    (42) arrayArg -> index ARROW . value
    (43) arrayArg -> index ARROW . value COMMA arrayArg
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    value                          shift and go to state 196
    constant_use                   shift and go to state 54

state 178

    (56) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN . ARROW expression SEMI

    ARROW           shift and go to state 197


state 179

    (39) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 198


state 180

    (93) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 199


state 181

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 200


state 182

    (30) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 201


state 183

    (32) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 202


state 184

    (104) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 203
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 185

    (105) use_clause_opt -> USE LPAREN . variables RPAREN
    (106) variables -> . VARIABLE COMMA variables
    (107) variables -> . VARIABLE

    VARIABLE        shift and go to state 205

    variables                      shift and go to state 204

state 186

    (57) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    LPAREN          shift and go to state 206


state 187

    (56) function_arrow -> VARIABLE . SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI

    SET             shift and go to state 207


state 188

    (57) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .

    $end            reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    ECHO            reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VARIABLE        reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VAR             reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CLASS           reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FUNCTION        reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    WHILE           reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    DEFINE          reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CONST           reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IDENTIFIER      reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    TRY             reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CATCH           reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    THROW           reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IF              reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    INTEGER         reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FLOAT           reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PUBLIC          reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PROTECTED       reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PRIVATE         reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    RBRACE          reduce using rule 57 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)


state 189

    (31) while -> WHILE LPAREN condition RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 208


state 190

    (83) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN . SEMI

    SEMI            shift and go to state 209


state 191

    (87) catch_list -> catch_item catch_list .

    $end            reduce using rule 87 (catch_list -> catch_item catch_list .)
    ECHO            reduce using rule 87 (catch_list -> catch_item catch_list .)
    VARIABLE        reduce using rule 87 (catch_list -> catch_item catch_list .)
    VAR             reduce using rule 87 (catch_list -> catch_item catch_list .)
    CLASS           reduce using rule 87 (catch_list -> catch_item catch_list .)
    FUNCTION        reduce using rule 87 (catch_list -> catch_item catch_list .)
    WHILE           reduce using rule 87 (catch_list -> catch_item catch_list .)
    DEFINE          reduce using rule 87 (catch_list -> catch_item catch_list .)
    CONST           reduce using rule 87 (catch_list -> catch_item catch_list .)
    IDENTIFIER      reduce using rule 87 (catch_list -> catch_item catch_list .)
    TRY             reduce using rule 87 (catch_list -> catch_item catch_list .)
    CATCH           reduce using rule 87 (catch_list -> catch_item catch_list .)
    THROW           reduce using rule 87 (catch_list -> catch_item catch_list .)
    IF              reduce using rule 87 (catch_list -> catch_item catch_list .)
    INTEGER         reduce using rule 87 (catch_list -> catch_item catch_list .)
    FLOAT           reduce using rule 87 (catch_list -> catch_item catch_list .)
    PUBLIC          reduce using rule 87 (catch_list -> catch_item catch_list .)
    PROTECTED       reduce using rule 87 (catch_list -> catch_item catch_list .)
    PRIVATE         reduce using rule 87 (catch_list -> catch_item catch_list .)
    RBRACE          reduce using rule 87 (catch_list -> catch_item catch_list .)


state 192

    (89) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 210
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 193

    (90) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    empty                          shift and go to state 101
    statements                     shift and go to state 211
    statement                      shift and go to state 100
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 194

    (91) throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .

    $end            reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    VAR             reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    CONST           reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    IDENTIFIER      reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    TRY             reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    CATCH           reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    THROW           reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    IF              reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 91 (throw_statement -> THROW NEW EXCEPTION LPAREN RPAREN SEMI .)


state 195

    (44) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE
    (45) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE elseif
    (46) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 212


state 196

    (42) arrayArg -> index ARROW value .
    (43) arrayArg -> index ARROW value . COMMA arrayArg

    RPAREN          reduce using rule 42 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 213


state 197

    (56) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW . expression SEMI
    (72) expression -> . value operator value
    (73) expression -> . value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    expression                     shift and go to state 214
    value                          shift and go to state 24
    constant_use                   shift and go to state 54

state 198

    (39) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 215


state 199

    (93) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (98) parameters -> . parameter COMMA parameters
    (99) parameters -> . parameter
    (100) parameters -> . IDENTIFIER
    (101) parameters -> . empty
    (102) parameter -> . TYPE VARIABLE
    (103) parameter -> . VARIABLE
    (110) empty -> .

    IDENTIFIER      shift and go to state 92
    TYPE            shift and go to state 94
    VARIABLE        shift and go to state 157
    RPAREN          reduce using rule 110 (empty -> .)

    parameters                     shift and go to state 216
    parameter                      shift and go to state 91
    empty                          shift and go to state 93

state 200

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameters RPAREN LBRACE statements RBRACE
    (98) parameters -> . parameter COMMA parameters
    (99) parameters -> . parameter
    (100) parameters -> . IDENTIFIER
    (101) parameters -> . empty
    (102) parameter -> . TYPE VARIABLE
    (103) parameter -> . VARIABLE
    (110) empty -> .

    IDENTIFIER      shift and go to state 92
    TYPE            shift and go to state 94
    VARIABLE        shift and go to state 157
    RPAREN          reduce using rule 110 (empty -> .)

    parameters                     shift and go to state 217
    parameter                      shift and go to state 91
    empty                          shift and go to state 93

state 201

    (30) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    visibility                     shift and go to state 29
    statements                     shift and go to state 218
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24

state 202

    (32) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 32 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 203

    (104) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 219


state 204

    (105) use_clause_opt -> USE LPAREN variables . RPAREN

    RPAREN          shift and go to state 220


state 205

    (106) variables -> VARIABLE . COMMA variables
    (107) variables -> VARIABLE .

    COMMA           shift and go to state 221
    RPAREN          reduce using rule 107 (variables -> VARIABLE .)


state 206

    (57) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 222


state 207

    (56) function_arrow -> VARIABLE SET . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI

    FUNCTION        shift and go to state 84


state 208

    (31) while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 31 (while -> WHILE LPAREN condition RPAREN LBRACE statements RBRACE .)


state 209

    (83) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .

    $end            reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    ECHO            reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VARIABLE        reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VAR             reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CLASS           reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FUNCTION        reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    WHILE           reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    DEFINE          reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CONST           reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    TRY             reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CATCH           reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    THROW           reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IF              reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    INTEGER         reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FLOAT           reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PUBLIC          reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PROTECTED       reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PRIVATE         reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    RBRACE          reduce using rule 83 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)


state 210

    (89) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 223


state 211

    (90) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 224


state 212

    (44) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .
    (45) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . elseif
    (46) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . else
    (47) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE
    (48) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (49) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (50) else -> . ELSE LBRACE statements RBRACE

    $end            reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 44 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ELSEIF          shift and go to state 227
    ELSE            shift and go to state 228

    elseif                         shift and go to state 225
    else                           shift and go to state 226

state 213

    (43) arrayArg -> index ARROW value COMMA . arrayArg
    (42) arrayArg -> . index ARROW value
    (43) arrayArg -> . index ARROW value COMMA arrayArg
    (54) index -> . INTEGER
    (55) index -> . STRING

    INTEGER         shift and go to state 149
    STRING          shift and go to state 150

    index                          shift and go to state 148
    arrayArg                       shift and go to state 229

state 214

    (56) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression . SEMI

    SEMI            shift and go to state 230


state 215

    (39) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CONST           reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IDENTIFIER      reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    TRY             reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CATCH           reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    THROW           reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IF              reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 39 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 216

    (93) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 231


state 217

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 232


state 218

    (30) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 233


state 219

    (104) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    DEFINE          reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CONST           reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    TRY             reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CATCH           reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    THROW           reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IF              reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 104 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)


state 220

    (105) use_clause_opt -> USE LPAREN variables RPAREN .

    LBRACE          reduce using rule 105 (use_clause_opt -> USE LPAREN variables RPAREN .)


state 221

    (106) variables -> VARIABLE COMMA . variables
    (106) variables -> . VARIABLE COMMA variables
    (107) variables -> . VARIABLE

    VARIABLE        shift and go to state 205

    variables                      shift and go to state 234

state 222

    (57) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow

    RPAREN          shift and go to state 129


state 223

    (89) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 89 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)


state 224

    (90) catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 90 (catch_item -> CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE .)


state 225

    (45) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    THROW           reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 45 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)


state 226

    (46) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    THROW           reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 46 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE else .)


state 227

    (47) elseif -> ELSEIF . LPAREN conditions RPAREN LBRACE statements RBRACE
    (48) elseif -> ELSEIF . LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (49) elseif -> ELSEIF . LPAREN conditions RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 235


state 228

    (50) else -> ELSE . LBRACE statements RBRACE

    LBRACE          shift and go to state 236


state 229

    (43) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 43 (arrayArg -> index ARROW value COMMA arrayArg .)


state 230

    (56) function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .

    $end            reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    ECHO            reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VARIABLE        reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VAR             reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CLASS           reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FUNCTION        reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    WHILE           reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    DEFINE          reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CONST           reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IDENTIFIER      reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    TRY             reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CATCH           reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    THROW           reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IF              reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    INTEGER         reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FLOAT           reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PUBLIC          reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PROTECTED       reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PRIVATE         reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    RBRACE          reduce using rule 56 (function_arrow -> VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)


state 231

    (93) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 237


state 232

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 238


state 233

    (30) function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 30 (function_statement -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 234

    (106) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 106 (variables -> VARIABLE COMMA variables .)


state 235

    (47) elseif -> ELSEIF LPAREN . conditions RPAREN LBRACE statements RBRACE
    (48) elseif -> ELSEIF LPAREN . conditions RPAREN LBRACE statements RBRACE elseif
    (49) elseif -> ELSEIF LPAREN . conditions RPAREN LBRACE statements RBRACE else
    (52) conditions -> . condition logical_operator conditions
    (53) conditions -> . condition
    (51) condition -> . value comparison_operator value
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (85) constant_use -> . IDENTIFIER

    VARIABLE        shift and go to state 53
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    IDENTIFIER      shift and go to state 28

    conditions                     shift and go to state 239
    condition                      shift and go to state 105
    value                          shift and go to state 96
    constant_use                   shift and go to state 54

state 236

    (50) else -> ELSE LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 240
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 237

    (93) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    visibility                     shift and go to state 29
    statements                     shift and go to state 241
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24

state 238

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE . statements RBRACE
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    visibility                     shift and go to state 29
    statements                     shift and go to state 242
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24

state 239

    (47) elseif -> ELSEIF LPAREN conditions . RPAREN LBRACE statements RBRACE
    (48) elseif -> ELSEIF LPAREN conditions . RPAREN LBRACE statements RBRACE elseif
    (49) elseif -> ELSEIF LPAREN conditions . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 243


state 240

    (50) else -> ELSE LBRACE statements . RBRACE

    RBRACE          shift and go to state 244


state 241

    (93) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 245


state 242

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 246


state 243

    (47) elseif -> ELSEIF LPAREN conditions RPAREN . LBRACE statements RBRACE
    (48) elseif -> ELSEIF LPAREN conditions RPAREN . LBRACE statements RBRACE elseif
    (49) elseif -> ELSEIF LPAREN conditions RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 247


state 244

    (50) else -> ELSE LBRACE statements RBRACE .

    $end            reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    ECHO            reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    VAR             reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    CLASS           reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    WHILE           reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    DEFINE          reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    CONST           reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    TRY             reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    CATCH           reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    THROW           reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    IF              reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    INTEGER         reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    FLOAT           reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)
    RBRACE          reduce using rule 50 (else -> ELSE LBRACE statements RBRACE .)


state 245

    (93) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 93 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 93 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 93 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 93 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 246

    (94) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 94 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 94 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 94 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 94 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 247

    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE . statements RBRACE
    (48) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE . statements RBRACE elseif
    (49) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE . statements RBRACE else
    (22) statements -> . statement statements
    (23) statements -> . statement
    (24) statements -> . empty
    (1) statement -> . print SEMI
    (2) statement -> . print_error
    (3) statement -> . declaration SEMI
    (4) statement -> . declaration_error
    (5) statement -> . input SEMI
    (6) statement -> . expression SEMI
    (7) statement -> . object_declaration
    (8) statement -> . class_declaration
    (9) statement -> . array_declaration SEMI
    (10) statement -> . property_declaration SEMI
    (11) statement -> . function_statement
    (12) statement -> . function_variable
    (13) statement -> . function_anonymous
    (14) statement -> . function_arrow
    (15) statement -> . while
    (16) statement -> . constant_declaration
    (17) statement -> . constant_use
    (18) statement -> . try_catch
    (19) statement -> . catch_item
    (20) statement -> . throw_statement
    (21) statement -> . if
    (110) empty -> .
    (33) print -> . ECHO LPAREN value RPAREN
    (34) print -> . ECHO value
    (35) print -> . ECHO LPAREN STRING RPAREN
    (36) print -> . ECHO STRING
    (37) print_error -> . ECHO error
    (25) declaration -> . VARIABLE SET value
    (26) declaration -> . VARIABLE SET STRING
    (27) declaration -> . VARIABLE SET expression
    (28) declaration -> . VARIABLE SET condition
    (29) declaration_error -> . VARIABLE SET error
    (38) input -> . VARIABLE SET READLINE LPAREN STRING RPAREN
    (72) expression -> . value operator value
    (73) expression -> . value
    (39) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (76) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (40) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (41) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (92) property_declaration -> . visibility VARIABLE
    (30) function_statement -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (32) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (104) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (56) function_arrow -> . VARIABLE SET FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (57) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (31) while -> . WHILE LPAREN condition RPAREN LBRACE statements RBRACE
    (83) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (84) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (85) constant_use -> . IDENTIFIER
    (86) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (89) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (90) catch_item -> . CATCH LPAREN EXCEPTION empty RPAREN LBRACE statements RBRACE
    (91) throw_statement -> . THROW NEW EXCEPTION LPAREN RPAREN SEMI
    (44) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE
    (45) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (46) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (64) value -> . VARIABLE
    (65) value -> . INTEGER
    (66) value -> . constant_use
    (67) value -> . FLOAT
    (95) visibility -> . PUBLIC
    (96) visibility -> . PROTECTED
    (97) visibility -> . PRIVATE

    RBRACE          reduce using rule 110 (empty -> .)
    ECHO            shift and go to state 23
    VARIABLE        shift and go to state 25
    VAR             shift and go to state 26
    CLASS           shift and go to state 27
    FUNCTION        shift and go to state 30
    WHILE           shift and go to state 31
    DEFINE          shift and go to state 32
    CONST           shift and go to state 33
    IDENTIFIER      shift and go to state 28
    TRY             shift and go to state 34
    CATCH           shift and go to state 35
    THROW           shift and go to state 36
    IF              shift and go to state 37
    INTEGER         shift and go to state 38
    FLOAT           shift and go to state 39
    PUBLIC          shift and go to state 40
    PROTECTED       shift and go to state 41
    PRIVATE         shift and go to state 42

    statements                     shift and go to state 248
    statement                      shift and go to state 100
    empty                          shift and go to state 101
    print                          shift and go to state 2
    print_error                    shift and go to state 3
    declaration                    shift and go to state 4
    declaration_error              shift and go to state 5
    input                          shift and go to state 6
    expression                     shift and go to state 7
    object_declaration             shift and go to state 8
    class_declaration              shift and go to state 9
    array_declaration              shift and go to state 10
    property_declaration           shift and go to state 11
    function_statement             shift and go to state 12
    function_variable              shift and go to state 13
    function_anonymous             shift and go to state 14
    function_arrow                 shift and go to state 15
    while                          shift and go to state 16
    constant_declaration           shift and go to state 17
    constant_use                   shift and go to state 18
    try_catch                      shift and go to state 19
    catch_item                     shift and go to state 20
    throw_statement                shift and go to state 21
    if                             shift and go to state 22
    value                          shift and go to state 24
    visibility                     shift and go to state 29

state 248

    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements . RBRACE
    (48) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements . RBRACE elseif
    (49) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 249


state 249

    (47) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .
    (48) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE . elseif
    (49) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE . else
    (47) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE
    (48) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif
    (49) elseif -> . ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else
    (50) else -> . ELSE LBRACE statements RBRACE

    $end            reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    THROW           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 47 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE .)
    ELSEIF          shift and go to state 227
    ELSE            shift and go to state 228

    elseif                         shift and go to state 250
    else                           shift and go to state 251

state 250

    (48) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    THROW           reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 48 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE elseif .)


state 251

    (49) elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    THROW           reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 49 (elseif -> ELSEIF LPAREN conditions RPAREN LBRACE statements RBRACE else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 90 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 135 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 167 resolved as shift
WARNING: reduce/reduce conflict in state 77 resolved using rule (declaration -> VARIABLE SET value)
WARNING: rejected rule (expression -> value) in state 77
WARNING: reduce/reduce conflict in state 100 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 100
