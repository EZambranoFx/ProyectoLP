Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CATCH
    COMMENT
    CONST
    CONTINUE
    DEFAULT
    DO
    DOLLAR
    ERROR
    EXP
    EXTENDS
    FINALLY
    FOR
    FOREACH
    IDENTICAL
    IMPLEMENTS
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    PHP_CLOSE
    PHP_OPEN
    RBRACKET
    RETURN
    STATIC
    SWITCH
    THROW
    TRY

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> input SEMI
Rule 3     statement -> expression SEMI
Rule 4     statement -> declaration SEMI
Rule 5     statement -> object_declaration
Rule 6     statement -> class_declaration
Rule 7     statement -> array_declaration
Rule 8     statement -> data_structure
Rule 9     statement -> function_statement
Rule 10    statement -> function_variable
Rule 11    statement -> function_anonymous
Rule 12    statement -> class_statement
Rule 13    statement -> while
Rule 14    statement -> array
Rule 15    statements -> statement statements
Rule 16    statements -> statement
Rule 17    declaration -> VARIABLE SET expression
Rule 18    declaration -> VARIABLE SET condition
Rule 19    data_structure -> array
Rule 20    data_structure -> class_statement
Rule 21    class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 22    function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
Rule 23    while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 24    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 25    print -> ECHO LPAREN expressions RPAREN
Rule 26    print -> ECHO expressions
Rule 27    input -> VARIABLE SET READLINE LPAREN RPAREN
Rule 28    input -> empty
Rule 29    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 30    array -> ARRAY LPAREN arrayArg RPAREN SEMI
Rule 31    arrayArg -> index ARROW value
Rule 32    arrayArg -> index ARROW value arrayArg
Rule 33    arrayArg -> index ARROW value COMMA arrayArg
Rule 34    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
Rule 35    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
Rule 36    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 37    else -> ELSE LBRACE statements RBRACE SEMI
Rule 38    condition -> expression comparison_operator expression
Rule 39    condition -> condition logical_operator condition
Rule 40    index -> INTEGER
Rule 41    index -> STRING
Rule 42    arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 43    arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunction
Rule 44    comparison_operator -> LT
Rule 45    comparison_operator -> GT
Rule 46    comparison_operator -> LE
Rule 47    comparison_operator -> GE
Rule 48    comparison_operator -> EQ
Rule 49    comparison_operator -> NE
Rule 50    value -> VARIABLE
Rule 51    value -> INTEGER
Rule 52    value -> FLOAT
Rule 53    operator -> PLUS
Rule 54    operator -> MINUS
Rule 55    operator -> TIMES
Rule 56    operator -> DIVIDE
Rule 57    expression -> value operator value
Rule 58    expressions -> expression COMMA expressions
Rule 59    expressions -> expression
Rule 60    empty -> <empty>
Rule 61    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 62    class_body -> class_member_list
Rule 63    class_member_list -> class_member_list class_member
Rule 64    class_member_list -> empty
Rule 65    class_member -> property_declaration
Rule 66    class_member -> method_declaration
Rule 67    class_member -> constructor_declaration
Rule 68    property_declaration -> visibility VARIABLE SEMI
Rule 69    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
Rule 70    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE
Rule 71    visibility -> PUBLIC
Rule 72    visibility -> PROTECTED
Rule 73    visibility -> PRIVATE
Rule 74    parameter_list -> parameter_list COMMA parameter
Rule 75    parameter_list -> empty
Rule 76    parameter -> TYPE VARIABLE
Rule 77    parameter -> VARIABLE
Rule 78    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 79    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 80    function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
Rule 81    use_clause_opt -> USE LPAREN variable_list RPAREN
Rule 82    use_clause_opt -> empty
Rule 83    variable_list -> variable_list COMMA VARIABLE
Rule 84    variable_list -> VARIABLE
Rule 85    logical_operator -> AND
Rule 86    logical_operator -> OR
Rule 87    array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
Rule 88    array_elements -> array_elements COMMA array_element
Rule 89    array_elements -> array_element
Rule 90    array_elements -> empty
Rule 91    array_element -> expression
Rule 92    array_element -> expression ARROW expression

Terminals, with rules where they appear

AND                  : 85
ARRAY                : 30 87
ARROW                : 31 32 33 42 43 92
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 21 29 61
COMMA                : 33 58 74 83 88
COMMENT              : 
CONST                : 
CONSTRUCT            : 70
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 56
DO                   : 
DOLLAR               : 
ECHO                 : 25 26
ELSE                 : 37
ELSEIF               : 78 79
EQ                   : 48
ERROR                : 
EXP                  : 
EXTENDS              : 
FINALLY              : 
FLOAT                : 52
FOR                  : 
FOREACH              : 
FUNCTION             : 22 24 42 43 69 70 80
GE                   : 47
GT                   : 45
IDENTICAL            : 
IDENTIFIER           : 21 22 61 69
IF                   : 34 35 36
IMPLEMENTS           : 
INTEGER              : 40 51
LBRACE               : 21 22 23 24 34 35 36 37 61 69 70 78 79 80
LBRACKET             : 
LE                   : 46
LPAREN               : 22 23 24 25 27 29 30 34 35 36 42 43 69 70 78 79 80 81 87
LT                   : 44
MINUS                : 54
MOD                  : 
NE                   : 49
NEW                  : 29
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 86
PHP_CLOSE            : 
PHP_OPEN             : 
PLUS                 : 53
PRIVATE              : 73
PROTECTED            : 72
PUBLIC               : 71
RBRACE               : 21 22 23 24 34 35 36 37 61 69 70 78 79 80
RBRACKET             : 
READLINE             : 27
RETURN               : 
RPAREN               : 22 23 24 25 27 29 30 34 35 36 42 43 69 70 78 79 80 81 87
SEMI                 : 1 2 3 4 29 30 34 37 42 68 87
SET                  : 17 18 27 29 87
STATIC               : 
STRING               : 41
SWITCH               : 
THROW                : 
TIMES                : 55
TRY                  : 
TYPE                 : 76
USE                  : 81
VAR                  : 29
VARIABLE             : 17 18 24 27 29 42 43 50 68 76 77 83 84 87
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

array                : 14 19
arrayArg             : 30 32 33
array_declaration    : 7
array_element        : 88 89
array_elements       : 87 88
arrowFunction        : 43
class_body           : 21 61
class_declaration    : 6
class_member         : 63
class_member_list    : 62 63
class_statement      : 12 20
comparison_operator  : 38
condition            : 18 34 35 36 39 39 78 79
constructor_declaration : 67
data_structure       : 8
declaration          : 4
else                 : 36 79
elseif               : 35
empty                : 28 64 75 82 90
expression           : 3 17 23 38 38 42 58 59 91 92 92
expressions          : 25 26 58
function_anonymous   : 11
function_statement   : 9
function_variable    : 10
if                   : 
index                : 31 32 33
input                : 2
logical_operator     : 39
method_declaration   : 66
object_declaration   : 5
operator             : 57
parameter            : 74
parameter_list       : 22 69 70 74 80
print                : 1
property_declaration : 65
statement            : 15 16 0
statements           : 15 22 23 24 34 35 36 37 69 70 78 79 80
use_clause_opt       : 80
value                : 31 32 33 57 57
variable_list        : 81 83
visibility           : 68 69 70
while                : 13

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statement                      shift and go to state 1
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 27


state 3

    (2) statement -> input . SEMI

    SEMI            shift and go to state 28


state 4

    (3) statement -> expression . SEMI

    SEMI            shift and go to state 29


state 5

    (4) statement -> declaration . SEMI

    SEMI            shift and go to state 30


state 6

    (5) statement -> object_declaration .

    $end            reduce using rule 5 (statement -> object_declaration .)
    ECHO            reduce using rule 5 (statement -> object_declaration .)
    VARIABLE        reduce using rule 5 (statement -> object_declaration .)
    VAR             reduce using rule 5 (statement -> object_declaration .)
    CLASS           reduce using rule 5 (statement -> object_declaration .)
    FUNCTION        reduce using rule 5 (statement -> object_declaration .)
    WHILE           reduce using rule 5 (statement -> object_declaration .)
    ARRAY           reduce using rule 5 (statement -> object_declaration .)
    INTEGER         reduce using rule 5 (statement -> object_declaration .)
    FLOAT           reduce using rule 5 (statement -> object_declaration .)
    SEMI            reduce using rule 5 (statement -> object_declaration .)
    RBRACE          reduce using rule 5 (statement -> object_declaration .)


state 7

    (6) statement -> class_declaration .

    $end            reduce using rule 6 (statement -> class_declaration .)
    ECHO            reduce using rule 6 (statement -> class_declaration .)
    VARIABLE        reduce using rule 6 (statement -> class_declaration .)
    VAR             reduce using rule 6 (statement -> class_declaration .)
    CLASS           reduce using rule 6 (statement -> class_declaration .)
    FUNCTION        reduce using rule 6 (statement -> class_declaration .)
    WHILE           reduce using rule 6 (statement -> class_declaration .)
    ARRAY           reduce using rule 6 (statement -> class_declaration .)
    INTEGER         reduce using rule 6 (statement -> class_declaration .)
    FLOAT           reduce using rule 6 (statement -> class_declaration .)
    SEMI            reduce using rule 6 (statement -> class_declaration .)
    RBRACE          reduce using rule 6 (statement -> class_declaration .)


state 8

    (7) statement -> array_declaration .

    $end            reduce using rule 7 (statement -> array_declaration .)
    ECHO            reduce using rule 7 (statement -> array_declaration .)
    VARIABLE        reduce using rule 7 (statement -> array_declaration .)
    VAR             reduce using rule 7 (statement -> array_declaration .)
    CLASS           reduce using rule 7 (statement -> array_declaration .)
    FUNCTION        reduce using rule 7 (statement -> array_declaration .)
    WHILE           reduce using rule 7 (statement -> array_declaration .)
    ARRAY           reduce using rule 7 (statement -> array_declaration .)
    INTEGER         reduce using rule 7 (statement -> array_declaration .)
    FLOAT           reduce using rule 7 (statement -> array_declaration .)
    SEMI            reduce using rule 7 (statement -> array_declaration .)
    RBRACE          reduce using rule 7 (statement -> array_declaration .)


state 9

    (8) statement -> data_structure .

    $end            reduce using rule 8 (statement -> data_structure .)
    ECHO            reduce using rule 8 (statement -> data_structure .)
    VARIABLE        reduce using rule 8 (statement -> data_structure .)
    VAR             reduce using rule 8 (statement -> data_structure .)
    CLASS           reduce using rule 8 (statement -> data_structure .)
    FUNCTION        reduce using rule 8 (statement -> data_structure .)
    WHILE           reduce using rule 8 (statement -> data_structure .)
    ARRAY           reduce using rule 8 (statement -> data_structure .)
    INTEGER         reduce using rule 8 (statement -> data_structure .)
    FLOAT           reduce using rule 8 (statement -> data_structure .)
    SEMI            reduce using rule 8 (statement -> data_structure .)
    RBRACE          reduce using rule 8 (statement -> data_structure .)


state 10

    (9) statement -> function_statement .

    $end            reduce using rule 9 (statement -> function_statement .)
    ECHO            reduce using rule 9 (statement -> function_statement .)
    VARIABLE        reduce using rule 9 (statement -> function_statement .)
    VAR             reduce using rule 9 (statement -> function_statement .)
    CLASS           reduce using rule 9 (statement -> function_statement .)
    FUNCTION        reduce using rule 9 (statement -> function_statement .)
    WHILE           reduce using rule 9 (statement -> function_statement .)
    ARRAY           reduce using rule 9 (statement -> function_statement .)
    INTEGER         reduce using rule 9 (statement -> function_statement .)
    FLOAT           reduce using rule 9 (statement -> function_statement .)
    SEMI            reduce using rule 9 (statement -> function_statement .)
    RBRACE          reduce using rule 9 (statement -> function_statement .)


state 11

    (10) statement -> function_variable .

    $end            reduce using rule 10 (statement -> function_variable .)
    ECHO            reduce using rule 10 (statement -> function_variable .)
    VARIABLE        reduce using rule 10 (statement -> function_variable .)
    VAR             reduce using rule 10 (statement -> function_variable .)
    CLASS           reduce using rule 10 (statement -> function_variable .)
    FUNCTION        reduce using rule 10 (statement -> function_variable .)
    WHILE           reduce using rule 10 (statement -> function_variable .)
    ARRAY           reduce using rule 10 (statement -> function_variable .)
    INTEGER         reduce using rule 10 (statement -> function_variable .)
    FLOAT           reduce using rule 10 (statement -> function_variable .)
    SEMI            reduce using rule 10 (statement -> function_variable .)
    RBRACE          reduce using rule 10 (statement -> function_variable .)


state 12

    (11) statement -> function_anonymous .

    $end            reduce using rule 11 (statement -> function_anonymous .)
    ECHO            reduce using rule 11 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 11 (statement -> function_anonymous .)
    VAR             reduce using rule 11 (statement -> function_anonymous .)
    CLASS           reduce using rule 11 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 11 (statement -> function_anonymous .)
    WHILE           reduce using rule 11 (statement -> function_anonymous .)
    ARRAY           reduce using rule 11 (statement -> function_anonymous .)
    INTEGER         reduce using rule 11 (statement -> function_anonymous .)
    FLOAT           reduce using rule 11 (statement -> function_anonymous .)
    SEMI            reduce using rule 11 (statement -> function_anonymous .)
    RBRACE          reduce using rule 11 (statement -> function_anonymous .)


state 13

    (12) statement -> class_statement .
    (20) data_structure -> class_statement .

  ! reduce/reduce conflict for $end resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for ECHO resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for VAR resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for ARRAY resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for SEMI resolved using rule 12 (statement -> class_statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 12 (statement -> class_statement .)
    $end            reduce using rule 12 (statement -> class_statement .)
    ECHO            reduce using rule 12 (statement -> class_statement .)
    VARIABLE        reduce using rule 12 (statement -> class_statement .)
    VAR             reduce using rule 12 (statement -> class_statement .)
    CLASS           reduce using rule 12 (statement -> class_statement .)
    FUNCTION        reduce using rule 12 (statement -> class_statement .)
    WHILE           reduce using rule 12 (statement -> class_statement .)
    ARRAY           reduce using rule 12 (statement -> class_statement .)
    INTEGER         reduce using rule 12 (statement -> class_statement .)
    FLOAT           reduce using rule 12 (statement -> class_statement .)
    SEMI            reduce using rule 12 (statement -> class_statement .)
    RBRACE          reduce using rule 12 (statement -> class_statement .)

  ! $end            [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! ECHO            [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! VARIABLE        [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! VAR             [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! CLASS           [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! FUNCTION        [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! WHILE           [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! ARRAY           [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! INTEGER         [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! FLOAT           [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! SEMI            [ reduce using rule 20 (data_structure -> class_statement .) ]
  ! RBRACE          [ reduce using rule 20 (data_structure -> class_statement .) ]


state 14

    (13) statement -> while .

    $end            reduce using rule 13 (statement -> while .)
    ECHO            reduce using rule 13 (statement -> while .)
    VARIABLE        reduce using rule 13 (statement -> while .)
    VAR             reduce using rule 13 (statement -> while .)
    CLASS           reduce using rule 13 (statement -> while .)
    FUNCTION        reduce using rule 13 (statement -> while .)
    WHILE           reduce using rule 13 (statement -> while .)
    ARRAY           reduce using rule 13 (statement -> while .)
    INTEGER         reduce using rule 13 (statement -> while .)
    FLOAT           reduce using rule 13 (statement -> while .)
    SEMI            reduce using rule 13 (statement -> while .)
    RBRACE          reduce using rule 13 (statement -> while .)


state 15

    (14) statement -> array .
    (19) data_structure -> array .

  ! reduce/reduce conflict for $end resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for ECHO resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for VAR resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for CLASS resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for WHILE resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for ARRAY resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for INTEGER resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for FLOAT resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for SEMI resolved using rule 14 (statement -> array .)
  ! reduce/reduce conflict for RBRACE resolved using rule 14 (statement -> array .)
    $end            reduce using rule 14 (statement -> array .)
    ECHO            reduce using rule 14 (statement -> array .)
    VARIABLE        reduce using rule 14 (statement -> array .)
    VAR             reduce using rule 14 (statement -> array .)
    CLASS           reduce using rule 14 (statement -> array .)
    FUNCTION        reduce using rule 14 (statement -> array .)
    WHILE           reduce using rule 14 (statement -> array .)
    ARRAY           reduce using rule 14 (statement -> array .)
    INTEGER         reduce using rule 14 (statement -> array .)
    FLOAT           reduce using rule 14 (statement -> array .)
    SEMI            reduce using rule 14 (statement -> array .)
    RBRACE          reduce using rule 14 (statement -> array .)

  ! $end            [ reduce using rule 19 (data_structure -> array .) ]
  ! ECHO            [ reduce using rule 19 (data_structure -> array .) ]
  ! VARIABLE        [ reduce using rule 19 (data_structure -> array .) ]
  ! VAR             [ reduce using rule 19 (data_structure -> array .) ]
  ! CLASS           [ reduce using rule 19 (data_structure -> array .) ]
  ! FUNCTION        [ reduce using rule 19 (data_structure -> array .) ]
  ! WHILE           [ reduce using rule 19 (data_structure -> array .) ]
  ! ARRAY           [ reduce using rule 19 (data_structure -> array .) ]
  ! INTEGER         [ reduce using rule 19 (data_structure -> array .) ]
  ! FLOAT           [ reduce using rule 19 (data_structure -> array .) ]
  ! SEMI            [ reduce using rule 19 (data_structure -> array .) ]
  ! RBRACE          [ reduce using rule 19 (data_structure -> array .) ]


state 16

    (25) print -> ECHO . LPAREN expressions RPAREN
    (26) print -> ECHO . expressions
    (58) expressions -> . expression COMMA expressions
    (59) expressions -> . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    LPAREN          shift and go to state 31
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expressions                    shift and go to state 32
    expression                     shift and go to state 33
    value                          shift and go to state 19

state 17

    (27) input -> VARIABLE . SET READLINE LPAREN RPAREN
    (17) declaration -> VARIABLE . SET expression
    (18) declaration -> VARIABLE . SET condition
    (87) array_declaration -> VARIABLE . SET ARRAY LPAREN array_elements RPAREN SEMI
    (50) value -> VARIABLE .

    SET             shift and go to state 35
    PLUS            reduce using rule 50 (value -> VARIABLE .)
    MINUS           reduce using rule 50 (value -> VARIABLE .)
    TIMES           reduce using rule 50 (value -> VARIABLE .)
    DIVIDE          reduce using rule 50 (value -> VARIABLE .)


state 18

    (28) input -> empty .

    SEMI            reduce using rule 28 (input -> empty .)


state 19

    (57) expression -> value . operator value
    (53) operator -> . PLUS
    (54) operator -> . MINUS
    (55) operator -> . TIMES
    (56) operator -> . DIVIDE

    PLUS            shift and go to state 37
    MINUS           shift and go to state 38
    TIMES           shift and go to state 39
    DIVIDE          shift and go to state 40

    operator                       shift and go to state 36

state 20

    (29) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 41


state 21

    (61) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE
    (21) class_statement -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 42


state 22

    (30) array -> ARRAY . LPAREN arrayArg RPAREN SEMI

    LPAREN          shift and go to state 43


state 23

    (22) function_statement -> FUNCTION . IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> FUNCTION . LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 44
    VARIABLE        shift and go to state 46
    LPAREN          shift and go to state 45


state 24

    (23) while -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 47


state 25

    (51) value -> INTEGER .

    PLUS            reduce using rule 51 (value -> INTEGER .)
    MINUS           reduce using rule 51 (value -> INTEGER .)
    TIMES           reduce using rule 51 (value -> INTEGER .)
    DIVIDE          reduce using rule 51 (value -> INTEGER .)
    SEMI            reduce using rule 51 (value -> INTEGER .)
    COMMA           reduce using rule 51 (value -> INTEGER .)
    RPAREN          reduce using rule 51 (value -> INTEGER .)
    LT              reduce using rule 51 (value -> INTEGER .)
    GT              reduce using rule 51 (value -> INTEGER .)
    LE              reduce using rule 51 (value -> INTEGER .)
    GE              reduce using rule 51 (value -> INTEGER .)
    EQ              reduce using rule 51 (value -> INTEGER .)
    NE              reduce using rule 51 (value -> INTEGER .)
    AND             reduce using rule 51 (value -> INTEGER .)
    OR              reduce using rule 51 (value -> INTEGER .)
    ARROW           reduce using rule 51 (value -> INTEGER .)
    INTEGER         reduce using rule 51 (value -> INTEGER .)
    STRING          reduce using rule 51 (value -> INTEGER .)


state 26

    (52) value -> FLOAT .

    PLUS            reduce using rule 52 (value -> FLOAT .)
    MINUS           reduce using rule 52 (value -> FLOAT .)
    TIMES           reduce using rule 52 (value -> FLOAT .)
    DIVIDE          reduce using rule 52 (value -> FLOAT .)
    SEMI            reduce using rule 52 (value -> FLOAT .)
    COMMA           reduce using rule 52 (value -> FLOAT .)
    RPAREN          reduce using rule 52 (value -> FLOAT .)
    LT              reduce using rule 52 (value -> FLOAT .)
    GT              reduce using rule 52 (value -> FLOAT .)
    LE              reduce using rule 52 (value -> FLOAT .)
    GE              reduce using rule 52 (value -> FLOAT .)
    EQ              reduce using rule 52 (value -> FLOAT .)
    NE              reduce using rule 52 (value -> FLOAT .)
    AND             reduce using rule 52 (value -> FLOAT .)
    OR              reduce using rule 52 (value -> FLOAT .)
    ARROW           reduce using rule 52 (value -> FLOAT .)
    INTEGER         reduce using rule 52 (value -> FLOAT .)
    STRING          reduce using rule 52 (value -> FLOAT .)


state 27

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    ARRAY           reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    SEMI            reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 28

    (2) statement -> input SEMI .

    $end            reduce using rule 2 (statement -> input SEMI .)
    ECHO            reduce using rule 2 (statement -> input SEMI .)
    VARIABLE        reduce using rule 2 (statement -> input SEMI .)
    VAR             reduce using rule 2 (statement -> input SEMI .)
    CLASS           reduce using rule 2 (statement -> input SEMI .)
    FUNCTION        reduce using rule 2 (statement -> input SEMI .)
    WHILE           reduce using rule 2 (statement -> input SEMI .)
    ARRAY           reduce using rule 2 (statement -> input SEMI .)
    INTEGER         reduce using rule 2 (statement -> input SEMI .)
    FLOAT           reduce using rule 2 (statement -> input SEMI .)
    SEMI            reduce using rule 2 (statement -> input SEMI .)
    RBRACE          reduce using rule 2 (statement -> input SEMI .)


state 29

    (3) statement -> expression SEMI .

    $end            reduce using rule 3 (statement -> expression SEMI .)
    ECHO            reduce using rule 3 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 3 (statement -> expression SEMI .)
    VAR             reduce using rule 3 (statement -> expression SEMI .)
    CLASS           reduce using rule 3 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 3 (statement -> expression SEMI .)
    WHILE           reduce using rule 3 (statement -> expression SEMI .)
    ARRAY           reduce using rule 3 (statement -> expression SEMI .)
    INTEGER         reduce using rule 3 (statement -> expression SEMI .)
    FLOAT           reduce using rule 3 (statement -> expression SEMI .)
    SEMI            reduce using rule 3 (statement -> expression SEMI .)
    RBRACE          reduce using rule 3 (statement -> expression SEMI .)


state 30

    (4) statement -> declaration SEMI .

    $end            reduce using rule 4 (statement -> declaration SEMI .)
    ECHO            reduce using rule 4 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 4 (statement -> declaration SEMI .)
    VAR             reduce using rule 4 (statement -> declaration SEMI .)
    CLASS           reduce using rule 4 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 4 (statement -> declaration SEMI .)
    WHILE           reduce using rule 4 (statement -> declaration SEMI .)
    ARRAY           reduce using rule 4 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 4 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 4 (statement -> declaration SEMI .)
    SEMI            reduce using rule 4 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 4 (statement -> declaration SEMI .)


state 31

    (25) print -> ECHO LPAREN . expressions RPAREN
    (58) expressions -> . expression COMMA expressions
    (59) expressions -> . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expressions                    shift and go to state 48
    expression                     shift and go to state 33
    value                          shift and go to state 19

state 32

    (26) print -> ECHO expressions .

    SEMI            reduce using rule 26 (print -> ECHO expressions .)


state 33

    (58) expressions -> expression . COMMA expressions
    (59) expressions -> expression .

    COMMA           shift and go to state 49
    SEMI            reduce using rule 59 (expressions -> expression .)
    RPAREN          reduce using rule 59 (expressions -> expression .)


state 34

    (50) value -> VARIABLE .

    PLUS            reduce using rule 50 (value -> VARIABLE .)
    MINUS           reduce using rule 50 (value -> VARIABLE .)
    TIMES           reduce using rule 50 (value -> VARIABLE .)
    DIVIDE          reduce using rule 50 (value -> VARIABLE .)
    SEMI            reduce using rule 50 (value -> VARIABLE .)
    COMMA           reduce using rule 50 (value -> VARIABLE .)
    RPAREN          reduce using rule 50 (value -> VARIABLE .)
    LT              reduce using rule 50 (value -> VARIABLE .)
    GT              reduce using rule 50 (value -> VARIABLE .)
    LE              reduce using rule 50 (value -> VARIABLE .)
    GE              reduce using rule 50 (value -> VARIABLE .)
    EQ              reduce using rule 50 (value -> VARIABLE .)
    NE              reduce using rule 50 (value -> VARIABLE .)
    AND             reduce using rule 50 (value -> VARIABLE .)
    OR              reduce using rule 50 (value -> VARIABLE .)
    ARROW           reduce using rule 50 (value -> VARIABLE .)
    INTEGER         reduce using rule 50 (value -> VARIABLE .)
    STRING          reduce using rule 50 (value -> VARIABLE .)


state 35

    (27) input -> VARIABLE SET . READLINE LPAREN RPAREN
    (17) declaration -> VARIABLE SET . expression
    (18) declaration -> VARIABLE SET . condition
    (87) array_declaration -> VARIABLE SET . ARRAY LPAREN array_elements RPAREN SEMI
    (57) expression -> . value operator value
    (38) condition -> . expression comparison_operator expression
    (39) condition -> . condition logical_operator condition
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    READLINE        shift and go to state 50
    ARRAY           shift and go to state 53
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 51
    condition                      shift and go to state 52
    value                          shift and go to state 19

state 36

    (57) expression -> value operator . value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    value                          shift and go to state 54

state 37

    (53) operator -> PLUS .

    VARIABLE        reduce using rule 53 (operator -> PLUS .)
    INTEGER         reduce using rule 53 (operator -> PLUS .)
    FLOAT           reduce using rule 53 (operator -> PLUS .)


state 38

    (54) operator -> MINUS .

    VARIABLE        reduce using rule 54 (operator -> MINUS .)
    INTEGER         reduce using rule 54 (operator -> MINUS .)
    FLOAT           reduce using rule 54 (operator -> MINUS .)


state 39

    (55) operator -> TIMES .

    VARIABLE        reduce using rule 55 (operator -> TIMES .)
    INTEGER         reduce using rule 55 (operator -> TIMES .)
    FLOAT           reduce using rule 55 (operator -> TIMES .)


state 40

    (56) operator -> DIVIDE .

    VARIABLE        reduce using rule 56 (operator -> DIVIDE .)
    INTEGER         reduce using rule 56 (operator -> DIVIDE .)
    FLOAT           reduce using rule 56 (operator -> DIVIDE .)


state 41

    (29) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 55


state 42

    (61) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE
    (21) class_statement -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 56


state 43

    (30) array -> ARRAY LPAREN . arrayArg RPAREN SEMI
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (40) index -> . INTEGER
    (41) index -> . STRING

    INTEGER         shift and go to state 59
    STRING          shift and go to state 60

    arrayArg                       shift and go to state 57
    index                          shift and go to state 58

state 44

    (22) function_statement -> FUNCTION IDENTIFIER . LPAREN parameter_list RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 61


state 45

    (80) function_anonymous -> FUNCTION LPAREN . parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (74) parameter_list -> . parameter_list COMMA parameter
    (75) parameter_list -> . empty
    (60) empty -> .

    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameter_list                 shift and go to state 62
    empty                          shift and go to state 63

state 46

    (24) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 64


state 47

    (23) while -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 65
    value                          shift and go to state 19

state 48

    (25) print -> ECHO LPAREN expressions . RPAREN

    RPAREN          shift and go to state 66


state 49

    (58) expressions -> expression COMMA . expressions
    (58) expressions -> . expression COMMA expressions
    (59) expressions -> . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 33
    expressions                    shift and go to state 67
    value                          shift and go to state 19

state 50

    (27) input -> VARIABLE SET READLINE . LPAREN RPAREN

    LPAREN          shift and go to state 68


state 51

    (17) declaration -> VARIABLE SET expression .
    (38) condition -> expression . comparison_operator expression
    (44) comparison_operator -> . LT
    (45) comparison_operator -> . GT
    (46) comparison_operator -> . LE
    (47) comparison_operator -> . GE
    (48) comparison_operator -> . EQ
    (49) comparison_operator -> . NE

    SEMI            reduce using rule 17 (declaration -> VARIABLE SET expression .)
    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73
    EQ              shift and go to state 74
    NE              shift and go to state 75

    comparison_operator            shift and go to state 69

state 52

    (18) declaration -> VARIABLE SET condition .
    (39) condition -> condition . logical_operator condition
    (85) logical_operator -> . AND
    (86) logical_operator -> . OR

    SEMI            reduce using rule 18 (declaration -> VARIABLE SET condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78

    logical_operator               shift and go to state 76

state 53

    (87) array_declaration -> VARIABLE SET ARRAY . LPAREN array_elements RPAREN SEMI

    LPAREN          shift and go to state 79


state 54

    (57) expression -> value operator value .

    SEMI            reduce using rule 57 (expression -> value operator value .)
    COMMA           reduce using rule 57 (expression -> value operator value .)
    RPAREN          reduce using rule 57 (expression -> value operator value .)
    LT              reduce using rule 57 (expression -> value operator value .)
    GT              reduce using rule 57 (expression -> value operator value .)
    LE              reduce using rule 57 (expression -> value operator value .)
    GE              reduce using rule 57 (expression -> value operator value .)
    EQ              reduce using rule 57 (expression -> value operator value .)
    NE              reduce using rule 57 (expression -> value operator value .)
    AND             reduce using rule 57 (expression -> value operator value .)
    OR              reduce using rule 57 (expression -> value operator value .)
    ARROW           reduce using rule 57 (expression -> value operator value .)


state 55

    (29) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 80


state 56

    (61) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (21) class_statement -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (62) class_body -> . class_member_list
    (63) class_member_list -> . class_member_list class_member
    (64) class_member_list -> . empty
    (60) empty -> .

    PUBLIC          reduce using rule 60 (empty -> .)
    PROTECTED       reduce using rule 60 (empty -> .)
    PRIVATE         reduce using rule 60 (empty -> .)
    RBRACE          reduce using rule 60 (empty -> .)

    class_body                     shift and go to state 81
    class_member_list              shift and go to state 82
    empty                          shift and go to state 83

state 57

    (30) array -> ARRAY LPAREN arrayArg . RPAREN SEMI

    RPAREN          shift and go to state 84


state 58

    (31) arrayArg -> index . ARROW value
    (32) arrayArg -> index . ARROW value arrayArg
    (33) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 85


state 59

    (40) index -> INTEGER .

    ARROW           reduce using rule 40 (index -> INTEGER .)


state 60

    (41) index -> STRING .

    ARROW           reduce using rule 41 (index -> STRING .)


state 61

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN . parameter_list RPAREN LBRACE statements RBRACE
    (74) parameter_list -> . parameter_list COMMA parameter
    (75) parameter_list -> . empty
    (60) empty -> .

    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameter_list                 shift and go to state 86
    empty                          shift and go to state 63

state 62

    (80) function_anonymous -> FUNCTION LPAREN parameter_list . RPAREN use_clause_opt LBRACE statements RBRACE
    (74) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 87
    COMMA           shift and go to state 88


state 63

    (75) parameter_list -> empty .

    RPAREN          reduce using rule 75 (parameter_list -> empty .)
    COMMA           reduce using rule 75 (parameter_list -> empty .)


state 64

    (24) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 89


state 65

    (23) while -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 90


state 66

    (25) print -> ECHO LPAREN expressions RPAREN .

    SEMI            reduce using rule 25 (print -> ECHO LPAREN expressions RPAREN .)


state 67

    (58) expressions -> expression COMMA expressions .

    SEMI            reduce using rule 58 (expressions -> expression COMMA expressions .)
    RPAREN          reduce using rule 58 (expressions -> expression COMMA expressions .)


state 68

    (27) input -> VARIABLE SET READLINE LPAREN . RPAREN

    RPAREN          shift and go to state 91


state 69

    (38) condition -> expression comparison_operator . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 92
    value                          shift and go to state 19

state 70

    (44) comparison_operator -> LT .

    VARIABLE        reduce using rule 44 (comparison_operator -> LT .)
    INTEGER         reduce using rule 44 (comparison_operator -> LT .)
    FLOAT           reduce using rule 44 (comparison_operator -> LT .)


state 71

    (45) comparison_operator -> GT .

    VARIABLE        reduce using rule 45 (comparison_operator -> GT .)
    INTEGER         reduce using rule 45 (comparison_operator -> GT .)
    FLOAT           reduce using rule 45 (comparison_operator -> GT .)


state 72

    (46) comparison_operator -> LE .

    VARIABLE        reduce using rule 46 (comparison_operator -> LE .)
    INTEGER         reduce using rule 46 (comparison_operator -> LE .)
    FLOAT           reduce using rule 46 (comparison_operator -> LE .)


state 73

    (47) comparison_operator -> GE .

    VARIABLE        reduce using rule 47 (comparison_operator -> GE .)
    INTEGER         reduce using rule 47 (comparison_operator -> GE .)
    FLOAT           reduce using rule 47 (comparison_operator -> GE .)


state 74

    (48) comparison_operator -> EQ .

    VARIABLE        reduce using rule 48 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 48 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 48 (comparison_operator -> EQ .)


state 75

    (49) comparison_operator -> NE .

    VARIABLE        reduce using rule 49 (comparison_operator -> NE .)
    INTEGER         reduce using rule 49 (comparison_operator -> NE .)
    FLOAT           reduce using rule 49 (comparison_operator -> NE .)


state 76

    (39) condition -> condition logical_operator . condition
    (38) condition -> . expression comparison_operator expression
    (39) condition -> . condition logical_operator condition
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    condition                      shift and go to state 93
    expression                     shift and go to state 94
    value                          shift and go to state 19

state 77

    (85) logical_operator -> AND .

    VARIABLE        reduce using rule 85 (logical_operator -> AND .)
    INTEGER         reduce using rule 85 (logical_operator -> AND .)
    FLOAT           reduce using rule 85 (logical_operator -> AND .)


state 78

    (86) logical_operator -> OR .

    VARIABLE        reduce using rule 86 (logical_operator -> OR .)
    INTEGER         reduce using rule 86 (logical_operator -> OR .)
    FLOAT           reduce using rule 86 (logical_operator -> OR .)


state 79

    (87) array_declaration -> VARIABLE SET ARRAY LPAREN . array_elements RPAREN SEMI
    (88) array_elements -> . array_elements COMMA array_element
    (89) array_elements -> . array_element
    (90) array_elements -> . empty
    (91) array_element -> . expression
    (92) array_element -> . expression ARROW expression
    (60) empty -> .
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    array_elements                 shift and go to state 95
    array_element                  shift and go to state 96
    empty                          shift and go to state 97
    expression                     shift and go to state 98
    value                          shift and go to state 19

state 80

    (29) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 99


state 81

    (61) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE
    (21) class_statement -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 100


state 82

    (62) class_body -> class_member_list .
    (63) class_member_list -> class_member_list . class_member
    (65) class_member -> . property_declaration
    (66) class_member -> . method_declaration
    (67) class_member -> . constructor_declaration
    (68) property_declaration -> . visibility VARIABLE SEMI
    (69) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (70) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (71) visibility -> . PUBLIC
    (72) visibility -> . PROTECTED
    (73) visibility -> . PRIVATE

    RBRACE          reduce using rule 62 (class_body -> class_member_list .)
    PUBLIC          shift and go to state 106
    PROTECTED       shift and go to state 107
    PRIVATE         shift and go to state 108

    class_member                   shift and go to state 101
    property_declaration           shift and go to state 102
    method_declaration             shift and go to state 103
    constructor_declaration        shift and go to state 104
    visibility                     shift and go to state 105

state 83

    (64) class_member_list -> empty .

    PUBLIC          reduce using rule 64 (class_member_list -> empty .)
    PROTECTED       reduce using rule 64 (class_member_list -> empty .)
    PRIVATE         reduce using rule 64 (class_member_list -> empty .)
    RBRACE          reduce using rule 64 (class_member_list -> empty .)


state 84

    (30) array -> ARRAY LPAREN arrayArg RPAREN . SEMI

    SEMI            shift and go to state 109


state 85

    (31) arrayArg -> index ARROW . value
    (32) arrayArg -> index ARROW . value arrayArg
    (33) arrayArg -> index ARROW . value COMMA arrayArg
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    value                          shift and go to state 110

state 86

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list . RPAREN LBRACE statements RBRACE
    (74) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 111
    COMMA           shift and go to state 88


state 87

    (80) function_anonymous -> FUNCTION LPAREN parameter_list RPAREN . use_clause_opt LBRACE statements RBRACE
    (81) use_clause_opt -> . USE LPAREN variable_list RPAREN
    (82) use_clause_opt -> . empty
    (60) empty -> .

    USE             shift and go to state 113
    LBRACE          reduce using rule 60 (empty -> .)

    use_clause_opt                 shift and go to state 112
    empty                          shift and go to state 114

state 88

    (74) parameter_list -> parameter_list COMMA . parameter
    (76) parameter -> . TYPE VARIABLE
    (77) parameter -> . VARIABLE

    TYPE            shift and go to state 116
    VARIABLE        shift and go to state 117

    parameter                      shift and go to state 115

state 89

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 118


state 90

    (23) while -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 119


state 91

    (27) input -> VARIABLE SET READLINE LPAREN RPAREN .

    SEMI            reduce using rule 27 (input -> VARIABLE SET READLINE LPAREN RPAREN .)


state 92

    (38) condition -> expression comparison_operator expression .

    AND             reduce using rule 38 (condition -> expression comparison_operator expression .)
    OR              reduce using rule 38 (condition -> expression comparison_operator expression .)
    SEMI            reduce using rule 38 (condition -> expression comparison_operator expression .)


state 93

    (39) condition -> condition logical_operator condition .
    (39) condition -> condition . logical_operator condition
    (85) logical_operator -> . AND
    (86) logical_operator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 39 (condition -> condition logical_operator condition .)
    AND             shift and go to state 77
    OR              shift and go to state 78

  ! AND             [ reduce using rule 39 (condition -> condition logical_operator condition .) ]
  ! OR              [ reduce using rule 39 (condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 76

state 94

    (38) condition -> expression . comparison_operator expression
    (44) comparison_operator -> . LT
    (45) comparison_operator -> . GT
    (46) comparison_operator -> . LE
    (47) comparison_operator -> . GE
    (48) comparison_operator -> . EQ
    (49) comparison_operator -> . NE

    LT              shift and go to state 70
    GT              shift and go to state 71
    LE              shift and go to state 72
    GE              shift and go to state 73
    EQ              shift and go to state 74
    NE              shift and go to state 75

    comparison_operator            shift and go to state 69

state 95

    (87) array_declaration -> VARIABLE SET ARRAY LPAREN array_elements . RPAREN SEMI
    (88) array_elements -> array_elements . COMMA array_element

    RPAREN          shift and go to state 120
    COMMA           shift and go to state 121


state 96

    (89) array_elements -> array_element .

    RPAREN          reduce using rule 89 (array_elements -> array_element .)
    COMMA           reduce using rule 89 (array_elements -> array_element .)


state 97

    (90) array_elements -> empty .

    RPAREN          reduce using rule 90 (array_elements -> empty .)
    COMMA           reduce using rule 90 (array_elements -> empty .)


state 98

    (91) array_element -> expression .
    (92) array_element -> expression . ARROW expression

    RPAREN          reduce using rule 91 (array_element -> expression .)
    COMMA           reduce using rule 91 (array_element -> expression .)
    ARROW           shift and go to state 122


state 99

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 123


state 100

    (61) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .
    (21) class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .

  ! reduce/reduce conflict for $end resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for ECHO resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for VAR resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for CLASS resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for ARRAY resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for INTEGER resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for SEMI resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    $end            reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ARRAY           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    SEMI            reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)

  ! $end            [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! ECHO            [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! VARIABLE        [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! VAR             [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! CLASS           [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! FUNCTION        [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! WHILE           [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! ARRAY           [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! INTEGER         [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! FLOAT           [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! SEMI            [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! RBRACE          [ reduce using rule 61 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]


state 101

    (63) class_member_list -> class_member_list class_member .

    PUBLIC          reduce using rule 63 (class_member_list -> class_member_list class_member .)
    PROTECTED       reduce using rule 63 (class_member_list -> class_member_list class_member .)
    PRIVATE         reduce using rule 63 (class_member_list -> class_member_list class_member .)
    RBRACE          reduce using rule 63 (class_member_list -> class_member_list class_member .)


state 102

    (65) class_member -> property_declaration .

    PUBLIC          reduce using rule 65 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 65 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 65 (class_member -> property_declaration .)
    RBRACE          reduce using rule 65 (class_member -> property_declaration .)


state 103

    (66) class_member -> method_declaration .

    PUBLIC          reduce using rule 66 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 66 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 66 (class_member -> method_declaration .)
    RBRACE          reduce using rule 66 (class_member -> method_declaration .)


state 104

    (67) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 67 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 67 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 67 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 67 (class_member -> constructor_declaration .)


state 105

    (68) property_declaration -> visibility . VARIABLE SEMI
    (69) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (70) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 124
    FUNCTION        shift and go to state 125


state 106

    (71) visibility -> PUBLIC .

    VARIABLE        reduce using rule 71 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 71 (visibility -> PUBLIC .)


state 107

    (72) visibility -> PROTECTED .

    VARIABLE        reduce using rule 72 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 72 (visibility -> PROTECTED .)


state 108

    (73) visibility -> PRIVATE .

    VARIABLE        reduce using rule 73 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 73 (visibility -> PRIVATE .)


state 109

    (30) array -> ARRAY LPAREN arrayArg RPAREN SEMI .

    $end            reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    ECHO            reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    VARIABLE        reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    VAR             reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    CLASS           reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    FUNCTION        reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    WHILE           reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    ARRAY           reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    INTEGER         reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    FLOAT           reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    SEMI            reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)
    RBRACE          reduce using rule 30 (array -> ARRAY LPAREN arrayArg RPAREN SEMI .)


state 110

    (31) arrayArg -> index ARROW value .
    (32) arrayArg -> index ARROW value . arrayArg
    (33) arrayArg -> index ARROW value . COMMA arrayArg
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (40) index -> . INTEGER
    (41) index -> . STRING

    RPAREN          reduce using rule 31 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 127
    INTEGER         shift and go to state 59
    STRING          shift and go to state 60

    index                          shift and go to state 58
    arrayArg                       shift and go to state 126

state 111

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 128


state 112

    (80) function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 129


state 113

    (81) use_clause_opt -> USE . LPAREN variable_list RPAREN

    LPAREN          shift and go to state 130


state 114

    (82) use_clause_opt -> empty .

    LBRACE          reduce using rule 82 (use_clause_opt -> empty .)


state 115

    (74) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 74 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 74 (parameter_list -> parameter_list COMMA parameter .)


state 116

    (76) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 131


state 117

    (77) parameter -> VARIABLE .

    RPAREN          reduce using rule 77 (parameter -> VARIABLE .)
    COMMA           reduce using rule 77 (parameter -> VARIABLE .)


state 118

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 132
    statement                      shift and go to state 133
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 119

    (23) while -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 4
    statements                     shift and go to state 134
    statement                      shift and go to state 133
    print                          shift and go to state 2
    input                          shift and go to state 3
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 120

    (87) array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN . SEMI

    SEMI            shift and go to state 135


state 121

    (88) array_elements -> array_elements COMMA . array_element
    (91) array_element -> . expression
    (92) array_element -> . expression ARROW expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    array_element                  shift and go to state 136
    expression                     shift and go to state 98
    value                          shift and go to state 19

state 122

    (92) array_element -> expression ARROW . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 137
    value                          shift and go to state 19

state 123

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 138


state 124

    (68) property_declaration -> visibility VARIABLE . SEMI

    SEMI            shift and go to state 139


state 125

    (69) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (70) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 140
    CONSTRUCT       shift and go to state 141


state 126

    (32) arrayArg -> index ARROW value arrayArg .

    RPAREN          reduce using rule 32 (arrayArg -> index ARROW value arrayArg .)


state 127

    (33) arrayArg -> index ARROW value COMMA . arrayArg
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (40) index -> . INTEGER
    (41) index -> . STRING

    INTEGER         shift and go to state 59
    STRING          shift and go to state 60

    index                          shift and go to state 58
    arrayArg                       shift and go to state 142

state 128

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE . statements RBRACE
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 143
    statement                      shift and go to state 133
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 129

    (80) function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE . statements RBRACE
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 144
    statement                      shift and go to state 133
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 130

    (81) use_clause_opt -> USE LPAREN . variable_list RPAREN
    (83) variable_list -> . variable_list COMMA VARIABLE
    (84) variable_list -> . VARIABLE

    VARIABLE        shift and go to state 146

    variable_list                  shift and go to state 145

state 131

    (76) parameter -> TYPE VARIABLE .

    RPAREN          reduce using rule 76 (parameter -> TYPE VARIABLE .)
    COMMA           reduce using rule 76 (parameter -> TYPE VARIABLE .)


state 132

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 147


state 133

    (15) statements -> statement . statements
    (16) statements -> statement .
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    RBRACE          reduce using rule 16 (statements -> statement .)
    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statement                      shift and go to state 133
    statements                     shift and go to state 148
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 134

    (23) while -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 149


state 135

    (87) array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .

    $end            reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    ECHO            reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    VARIABLE        reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    VAR             reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    CLASS           reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    FUNCTION        reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    WHILE           reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    ARRAY           reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    INTEGER         reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    FLOAT           reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    SEMI            reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)
    RBRACE          reduce using rule 87 (array_declaration -> VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI .)


state 136

    (88) array_elements -> array_elements COMMA array_element .

    RPAREN          reduce using rule 88 (array_elements -> array_elements COMMA array_element .)
    COMMA           reduce using rule 88 (array_elements -> array_elements COMMA array_element .)


state 137

    (92) array_element -> expression ARROW expression .

    RPAREN          reduce using rule 92 (array_element -> expression ARROW expression .)
    COMMA           reduce using rule 92 (array_element -> expression ARROW expression .)


state 138

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 150


state 139

    (68) property_declaration -> visibility VARIABLE SEMI .

    PUBLIC          reduce using rule 68 (property_declaration -> visibility VARIABLE SEMI .)
    PROTECTED       reduce using rule 68 (property_declaration -> visibility VARIABLE SEMI .)
    PRIVATE         reduce using rule 68 (property_declaration -> visibility VARIABLE SEMI .)
    RBRACE          reduce using rule 68 (property_declaration -> visibility VARIABLE SEMI .)


state 140

    (69) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameter_list RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 151


state 141

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameter_list RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 152


state 142

    (33) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 33 (arrayArg -> index ARROW value COMMA arrayArg .)


state 143

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 153


state 144

    (80) function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 154


state 145

    (81) use_clause_opt -> USE LPAREN variable_list . RPAREN
    (83) variable_list -> variable_list . COMMA VARIABLE

    RPAREN          shift and go to state 155
    COMMA           shift and go to state 156


state 146

    (84) variable_list -> VARIABLE .

    RPAREN          reduce using rule 84 (variable_list -> VARIABLE .)
    COMMA           reduce using rule 84 (variable_list -> VARIABLE .)


state 147

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ARRAY           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    SEMI            reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 148

    (15) statements -> statement statements .

    RBRACE          reduce using rule 15 (statements -> statement statements .)


state 149

    (23) while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    ARRAY           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    SEMI            reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 150

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ARRAY           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    SEMI            reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 151

    (69) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameter_list RPAREN LBRACE statements RBRACE
    (74) parameter_list -> . parameter_list COMMA parameter
    (75) parameter_list -> . empty
    (60) empty -> .

    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameter_list                 shift and go to state 157
    empty                          shift and go to state 63

state 152

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameter_list RPAREN LBRACE statements RBRACE
    (74) parameter_list -> . parameter_list COMMA parameter
    (75) parameter_list -> . empty
    (60) empty -> .

    RPAREN          reduce using rule 60 (empty -> .)
    COMMA           reduce using rule 60 (empty -> .)

    parameter_list                 shift and go to state 158
    empty                          shift and go to state 63

state 153

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    ARRAY           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    SEMI            reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)


state 154

    (80) function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    ARRAY           reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    SEMI            reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 80 (function_anonymous -> FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE .)


state 155

    (81) use_clause_opt -> USE LPAREN variable_list RPAREN .

    LBRACE          reduce using rule 81 (use_clause_opt -> USE LPAREN variable_list RPAREN .)


state 156

    (83) variable_list -> variable_list COMMA . VARIABLE

    VARIABLE        shift and go to state 159


state 157

    (69) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list . RPAREN LBRACE statements RBRACE
    (74) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 88


state 158

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list . RPAREN LBRACE statements RBRACE
    (74) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 161
    COMMA           shift and go to state 88


state 159

    (83) variable_list -> variable_list COMMA VARIABLE .

    RPAREN          reduce using rule 83 (variable_list -> variable_list COMMA VARIABLE .)
    COMMA           reduce using rule 83 (variable_list -> variable_list COMMA VARIABLE .)


state 160

    (69) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 162


state 161

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 163


state 162

    (69) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE . statements RBRACE
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 164
    statement                      shift and go to state 133
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 163

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE . statements RBRACE
    (15) statements -> . statement statements
    (16) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration
    (8) statement -> . data_structure
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . class_statement
    (13) statement -> . while
    (14) statement -> . array
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (28) input -> . empty
    (57) expression -> . value operator value
    (17) declaration -> . VARIABLE SET expression
    (18) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (61) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (87) array_declaration -> . VARIABLE SET ARRAY LPAREN array_elements RPAREN SEMI
    (19) data_structure -> . array
    (20) data_structure -> . class_statement
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (80) function_anonymous -> . FUNCTION LPAREN parameter_list RPAREN use_clause_opt LBRACE statements RBRACE
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (30) array -> . ARRAY LPAREN arrayArg RPAREN SEMI
    (60) empty -> .
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    ECHO            shift and go to state 16
    VARIABLE        shift and go to state 17
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    ARRAY           shift and go to state 22
    SEMI            reduce using rule 60 (empty -> .)
    INTEGER         shift and go to state 25
    FLOAT           shift and go to state 26

    statements                     shift and go to state 165
    statement                      shift and go to state 133
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    data_structure                 shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    class_statement                shift and go to state 13
    while                          shift and go to state 14
    array                          shift and go to state 15
    empty                          shift and go to state 18
    value                          shift and go to state 19

state 164

    (69) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 166


state 165

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 167


state 166

    (69) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 69 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 69 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 69 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 69 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameter_list RPAREN LBRACE statements RBRACE .)


state 167

    (70) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 70 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 70 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 70 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 70 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameter_list RPAREN LBRACE statements RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (statement -> class_statement)
WARNING: rejected rule (data_structure -> class_statement) in state 13
WARNING: reduce/reduce conflict in state 15 resolved using rule (statement -> array)
WARNING: rejected rule (data_structure -> array) in state 15
WARNING: reduce/reduce conflict in state 100 resolved using rule (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE)
WARNING: rejected rule (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE) in state 100
WARNING: Rule (data_structure -> class_statement) is never reduced
WARNING: Rule (data_structure -> array) is never reduced
WARNING: Rule (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE) is never reduced
