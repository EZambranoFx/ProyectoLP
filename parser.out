Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CATCH
    COMMENT
    CONST
    CONTINUE
    DEFAULT
    DO
    DOLLAR
    ERROR
    EXP
    EXTENDS
    FINALLY
    FOR
    FOREACH
    IDENTICAL
    IMPLEMENTS
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    PHP_CLOSE
    PHP_OPEN
    RBRACKET
    RETURN
    STATIC
    SWITCH
    THROW
    TRY

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> input SEMI
Rule 3     statement -> expression SEMI
Rule 4     statement -> declaration SEMI
Rule 5     statement -> object_declaration
Rule 6     statement -> class_declaration
Rule 7     statement -> array_declaration SEMI
Rule 8     statement -> property_declaration SEMI
Rule 9     statement -> data_structure
Rule 10    statement -> function_statement
Rule 11    statement -> function_variable
Rule 12    statement -> function_anonymous
Rule 13    statement -> class_statement
Rule 14    statement -> while
Rule 15    statement -> if
Rule 16    statements -> statement statements
Rule 17    statements -> statement
Rule 18    declaration -> VARIABLE SET expression
Rule 19    declaration -> VARIABLE SET condition
Rule 20    data_structure -> array_declaration
Rule 21    data_structure -> class_statement
Rule 22    class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 23    function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 24    while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 25    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 26    print -> ECHO LPAREN expressions RPAREN
Rule 27    print -> ECHO expressions
Rule 28    input -> VARIABLE SET READLINE LPAREN RPAREN
Rule 29    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 30    array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN
Rule 31    arrayArg -> index ARROW value
Rule 32    arrayArg -> index ARROW value arrayArg
Rule 33    arrayArg -> index ARROW value COMMA arrayArg
Rule 34    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
Rule 35    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
Rule 36    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 37    else -> ELSE LBRACE statements RBRACE SEMI
Rule 38    condition -> expression comparison_operator expression
Rule 39    condition -> condition logical_operator condition
Rule 40    index -> INTEGER
Rule 41    index -> STRING
Rule 42    arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 43    arrowFunction -> FUNCTION LPAREN VARIABLE RPAREN ARROW arrowFunction
Rule 44    comparison_operator -> LT
Rule 45    comparison_operator -> GT
Rule 46    comparison_operator -> LE
Rule 47    comparison_operator -> GE
Rule 48    comparison_operator -> EQ
Rule 49    comparison_operator -> NE
Rule 50    value -> VARIABLE
Rule 51    value -> INTEGER
Rule 52    value -> FLOAT
Rule 53    operator -> PLUS
Rule 54    operator -> MINUS
Rule 55    operator -> TIMES
Rule 56    operator -> DIVIDE
Rule 57    expression -> value operator value
Rule 58    expressions -> expression COMMA expressions
Rule 59    expressions -> expression
Rule 60    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 61    class_body -> class_member_list
Rule 62    class_member_list -> class_member class_member_list
Rule 63    class_member_list -> class_member
Rule 64    class_member -> property_declaration
Rule 65    class_member -> method_declaration
Rule 66    class_member -> constructor_declaration
Rule 67    property_declaration -> visibility VARIABLE
Rule 68    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 69    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 70    visibility -> PUBLIC
Rule 71    visibility -> PROTECTED
Rule 72    visibility -> PRIVATE
Rule 73    parameters -> parameter COMMA parameters
Rule 74    parameters -> parameter
Rule 75    parameter -> TYPE VARIABLE
Rule 76    parameter -> VARIABLE
Rule 77    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 78    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 79    function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
Rule 80    use_clause_opt -> USE LPAREN variables RPAREN
Rule 81    variables -> VARIABLE COMMA variables
Rule 82    variables -> VARIABLE
Rule 83    logical_operator -> AND
Rule 84    logical_operator -> OR
Rule 85    empty -> <empty>

Terminals, with rules where they appear

AND                  : 83
ARRAY                : 30
ARROW                : 31 32 33 42 43
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 22 29 60
COMMA                : 33 58 73 81
COMMENT              : 
CONST                : 
CONSTRUCT            : 69
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 56
DO                   : 
DOLLAR               : 
ECHO                 : 26 27
ELSE                 : 37
ELSEIF               : 77 78
EQ                   : 48
ERROR                : 
EXP                  : 
EXTENDS              : 
FINALLY              : 
FLOAT                : 52
FOR                  : 
FOREACH              : 
FUNCTION             : 23 25 42 43 68 69 79
GE                   : 47
GT                   : 45
IDENTICAL            : 
IDENTIFIER           : 22 23 60 68
IF                   : 34 35 36
IMPLEMENTS           : 
INTEGER              : 40 51
LBRACE               : 22 23 24 25 34 35 36 37 60 68 69 77 78 79
LBRACKET             : 
LE                   : 46
LPAREN               : 23 24 25 26 28 29 30 34 35 36 42 43 68 69 77 78 79 80
LT                   : 44
MINUS                : 54
MOD                  : 
NE                   : 49
NEW                  : 29
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 84
PHP_CLOSE            : 
PHP_OPEN             : 
PLUS                 : 53
PRIVATE              : 72
PROTECTED            : 71
PUBLIC               : 70
RBRACE               : 22 23 24 25 34 35 36 37 60 68 69 77 78 79
RBRACKET             : 
READLINE             : 28
RETURN               : 
RPAREN               : 23 24 25 26 28 29 30 34 35 36 42 43 68 69 77 78 79 80
SEMI                 : 1 2 3 4 7 8 29 34 37 42
SET                  : 18 19 28 29 30
STATIC               : 
STRING               : 41
SWITCH               : 
THROW                : 
TIMES                : 55
TRY                  : 
TYPE                 : 75
USE                  : 80
VAR                  : 29
VARIABLE             : 18 19 25 28 29 30 42 43 50 67 75 76 81 82
WHILE                : 24
error                : 

Nonterminals, with rules where they appear

arrayArg             : 30 32 33
array_declaration    : 7 20
arrowFunction        : 43
class_body           : 22 60
class_declaration    : 6
class_member         : 62 63
class_member_list    : 61 62
class_statement      : 13 21
comparison_operator  : 38
condition            : 19 34 35 36 39 39 77 78
constructor_declaration : 66
data_structure       : 9
declaration          : 4
else                 : 36 78
elseif               : 35
empty                : 
expression           : 3 18 24 38 38 42 58 59
expressions          : 26 27 58
function_anonymous   : 12
function_statement   : 10
function_variable    : 11
if                   : 15
index                : 31 32 33
input                : 2
logical_operator     : 39
method_declaration   : 65
object_declaration   : 5
operator             : 57
parameter            : 73 74
parameters           : 23 68 69 73 79
print                : 1
property_declaration : 8 64
statement            : 16 17 0
statements           : 16 23 24 25 34 35 36 37 68 69 77 78 79
use_clause_opt       : 79
value                : 31 32 33 57 57
variables            : 80 81
visibility           : 67 68 69
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statement                      shift and go to state 1
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 31


state 3

    (2) statement -> input . SEMI

    SEMI            shift and go to state 32


state 4

    (3) statement -> expression . SEMI

    SEMI            shift and go to state 33


state 5

    (4) statement -> declaration . SEMI

    SEMI            shift and go to state 34


state 6

    (5) statement -> object_declaration .

    $end            reduce using rule 5 (statement -> object_declaration .)
    ECHO            reduce using rule 5 (statement -> object_declaration .)
    VARIABLE        reduce using rule 5 (statement -> object_declaration .)
    VAR             reduce using rule 5 (statement -> object_declaration .)
    CLASS           reduce using rule 5 (statement -> object_declaration .)
    FUNCTION        reduce using rule 5 (statement -> object_declaration .)
    WHILE           reduce using rule 5 (statement -> object_declaration .)
    IF              reduce using rule 5 (statement -> object_declaration .)
    INTEGER         reduce using rule 5 (statement -> object_declaration .)
    FLOAT           reduce using rule 5 (statement -> object_declaration .)
    PUBLIC          reduce using rule 5 (statement -> object_declaration .)
    PROTECTED       reduce using rule 5 (statement -> object_declaration .)
    PRIVATE         reduce using rule 5 (statement -> object_declaration .)
    RBRACE          reduce using rule 5 (statement -> object_declaration .)


state 7

    (6) statement -> class_declaration .

    $end            reduce using rule 6 (statement -> class_declaration .)
    ECHO            reduce using rule 6 (statement -> class_declaration .)
    VARIABLE        reduce using rule 6 (statement -> class_declaration .)
    VAR             reduce using rule 6 (statement -> class_declaration .)
    CLASS           reduce using rule 6 (statement -> class_declaration .)
    FUNCTION        reduce using rule 6 (statement -> class_declaration .)
    WHILE           reduce using rule 6 (statement -> class_declaration .)
    IF              reduce using rule 6 (statement -> class_declaration .)
    INTEGER         reduce using rule 6 (statement -> class_declaration .)
    FLOAT           reduce using rule 6 (statement -> class_declaration .)
    PUBLIC          reduce using rule 6 (statement -> class_declaration .)
    PROTECTED       reduce using rule 6 (statement -> class_declaration .)
    PRIVATE         reduce using rule 6 (statement -> class_declaration .)
    RBRACE          reduce using rule 6 (statement -> class_declaration .)


state 8

    (7) statement -> array_declaration . SEMI
    (20) data_structure -> array_declaration .

    SEMI            shift and go to state 35
    $end            reduce using rule 20 (data_structure -> array_declaration .)
    ECHO            reduce using rule 20 (data_structure -> array_declaration .)
    VARIABLE        reduce using rule 20 (data_structure -> array_declaration .)
    VAR             reduce using rule 20 (data_structure -> array_declaration .)
    CLASS           reduce using rule 20 (data_structure -> array_declaration .)
    FUNCTION        reduce using rule 20 (data_structure -> array_declaration .)
    WHILE           reduce using rule 20 (data_structure -> array_declaration .)
    IF              reduce using rule 20 (data_structure -> array_declaration .)
    INTEGER         reduce using rule 20 (data_structure -> array_declaration .)
    FLOAT           reduce using rule 20 (data_structure -> array_declaration .)
    PUBLIC          reduce using rule 20 (data_structure -> array_declaration .)
    PROTECTED       reduce using rule 20 (data_structure -> array_declaration .)
    PRIVATE         reduce using rule 20 (data_structure -> array_declaration .)
    RBRACE          reduce using rule 20 (data_structure -> array_declaration .)


state 9

    (8) statement -> property_declaration . SEMI

    SEMI            shift and go to state 36


state 10

    (9) statement -> data_structure .

    $end            reduce using rule 9 (statement -> data_structure .)
    ECHO            reduce using rule 9 (statement -> data_structure .)
    VARIABLE        reduce using rule 9 (statement -> data_structure .)
    VAR             reduce using rule 9 (statement -> data_structure .)
    CLASS           reduce using rule 9 (statement -> data_structure .)
    FUNCTION        reduce using rule 9 (statement -> data_structure .)
    WHILE           reduce using rule 9 (statement -> data_structure .)
    IF              reduce using rule 9 (statement -> data_structure .)
    INTEGER         reduce using rule 9 (statement -> data_structure .)
    FLOAT           reduce using rule 9 (statement -> data_structure .)
    PUBLIC          reduce using rule 9 (statement -> data_structure .)
    PROTECTED       reduce using rule 9 (statement -> data_structure .)
    PRIVATE         reduce using rule 9 (statement -> data_structure .)
    RBRACE          reduce using rule 9 (statement -> data_structure .)


state 11

    (10) statement -> function_statement .

    $end            reduce using rule 10 (statement -> function_statement .)
    ECHO            reduce using rule 10 (statement -> function_statement .)
    VARIABLE        reduce using rule 10 (statement -> function_statement .)
    VAR             reduce using rule 10 (statement -> function_statement .)
    CLASS           reduce using rule 10 (statement -> function_statement .)
    FUNCTION        reduce using rule 10 (statement -> function_statement .)
    WHILE           reduce using rule 10 (statement -> function_statement .)
    IF              reduce using rule 10 (statement -> function_statement .)
    INTEGER         reduce using rule 10 (statement -> function_statement .)
    FLOAT           reduce using rule 10 (statement -> function_statement .)
    PUBLIC          reduce using rule 10 (statement -> function_statement .)
    PROTECTED       reduce using rule 10 (statement -> function_statement .)
    PRIVATE         reduce using rule 10 (statement -> function_statement .)
    RBRACE          reduce using rule 10 (statement -> function_statement .)


state 12

    (11) statement -> function_variable .

    $end            reduce using rule 11 (statement -> function_variable .)
    ECHO            reduce using rule 11 (statement -> function_variable .)
    VARIABLE        reduce using rule 11 (statement -> function_variable .)
    VAR             reduce using rule 11 (statement -> function_variable .)
    CLASS           reduce using rule 11 (statement -> function_variable .)
    FUNCTION        reduce using rule 11 (statement -> function_variable .)
    WHILE           reduce using rule 11 (statement -> function_variable .)
    IF              reduce using rule 11 (statement -> function_variable .)
    INTEGER         reduce using rule 11 (statement -> function_variable .)
    FLOAT           reduce using rule 11 (statement -> function_variable .)
    PUBLIC          reduce using rule 11 (statement -> function_variable .)
    PROTECTED       reduce using rule 11 (statement -> function_variable .)
    PRIVATE         reduce using rule 11 (statement -> function_variable .)
    RBRACE          reduce using rule 11 (statement -> function_variable .)


state 13

    (12) statement -> function_anonymous .

    $end            reduce using rule 12 (statement -> function_anonymous .)
    ECHO            reduce using rule 12 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 12 (statement -> function_anonymous .)
    VAR             reduce using rule 12 (statement -> function_anonymous .)
    CLASS           reduce using rule 12 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 12 (statement -> function_anonymous .)
    WHILE           reduce using rule 12 (statement -> function_anonymous .)
    IF              reduce using rule 12 (statement -> function_anonymous .)
    INTEGER         reduce using rule 12 (statement -> function_anonymous .)
    FLOAT           reduce using rule 12 (statement -> function_anonymous .)
    PUBLIC          reduce using rule 12 (statement -> function_anonymous .)
    PROTECTED       reduce using rule 12 (statement -> function_anonymous .)
    PRIVATE         reduce using rule 12 (statement -> function_anonymous .)
    RBRACE          reduce using rule 12 (statement -> function_anonymous .)


state 14

    (13) statement -> class_statement .
    (21) data_structure -> class_statement .

  ! reduce/reduce conflict for $end resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for ECHO resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for VAR resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for CLASS resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for IF resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for INTEGER resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 13 (statement -> class_statement .)
  ! reduce/reduce conflict for RBRACE resolved using rule 13 (statement -> class_statement .)
    $end            reduce using rule 13 (statement -> class_statement .)
    ECHO            reduce using rule 13 (statement -> class_statement .)
    VARIABLE        reduce using rule 13 (statement -> class_statement .)
    VAR             reduce using rule 13 (statement -> class_statement .)
    CLASS           reduce using rule 13 (statement -> class_statement .)
    FUNCTION        reduce using rule 13 (statement -> class_statement .)
    WHILE           reduce using rule 13 (statement -> class_statement .)
    IF              reduce using rule 13 (statement -> class_statement .)
    INTEGER         reduce using rule 13 (statement -> class_statement .)
    FLOAT           reduce using rule 13 (statement -> class_statement .)
    PUBLIC          reduce using rule 13 (statement -> class_statement .)
    PROTECTED       reduce using rule 13 (statement -> class_statement .)
    PRIVATE         reduce using rule 13 (statement -> class_statement .)
    RBRACE          reduce using rule 13 (statement -> class_statement .)

  ! $end            [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! ECHO            [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! VARIABLE        [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! VAR             [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! CLASS           [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! FUNCTION        [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! WHILE           [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! IF              [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! INTEGER         [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! FLOAT           [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! PUBLIC          [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! PROTECTED       [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! PRIVATE         [ reduce using rule 21 (data_structure -> class_statement .) ]
  ! RBRACE          [ reduce using rule 21 (data_structure -> class_statement .) ]


state 15

    (14) statement -> while .

    $end            reduce using rule 14 (statement -> while .)
    ECHO            reduce using rule 14 (statement -> while .)
    VARIABLE        reduce using rule 14 (statement -> while .)
    VAR             reduce using rule 14 (statement -> while .)
    CLASS           reduce using rule 14 (statement -> while .)
    FUNCTION        reduce using rule 14 (statement -> while .)
    WHILE           reduce using rule 14 (statement -> while .)
    IF              reduce using rule 14 (statement -> while .)
    INTEGER         reduce using rule 14 (statement -> while .)
    FLOAT           reduce using rule 14 (statement -> while .)
    PUBLIC          reduce using rule 14 (statement -> while .)
    PROTECTED       reduce using rule 14 (statement -> while .)
    PRIVATE         reduce using rule 14 (statement -> while .)
    RBRACE          reduce using rule 14 (statement -> while .)


state 16

    (15) statement -> if .

    $end            reduce using rule 15 (statement -> if .)
    ECHO            reduce using rule 15 (statement -> if .)
    VARIABLE        reduce using rule 15 (statement -> if .)
    VAR             reduce using rule 15 (statement -> if .)
    CLASS           reduce using rule 15 (statement -> if .)
    FUNCTION        reduce using rule 15 (statement -> if .)
    WHILE           reduce using rule 15 (statement -> if .)
    IF              reduce using rule 15 (statement -> if .)
    INTEGER         reduce using rule 15 (statement -> if .)
    FLOAT           reduce using rule 15 (statement -> if .)
    PUBLIC          reduce using rule 15 (statement -> if .)
    PROTECTED       reduce using rule 15 (statement -> if .)
    PRIVATE         reduce using rule 15 (statement -> if .)
    RBRACE          reduce using rule 15 (statement -> if .)


state 17

    (26) print -> ECHO . LPAREN expressions RPAREN
    (27) print -> ECHO . expressions
    (58) expressions -> . expression COMMA expressions
    (59) expressions -> . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    LPAREN          shift and go to state 37
    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expressions                    shift and go to state 38
    expression                     shift and go to state 39
    value                          shift and go to state 19

state 18

    (28) input -> VARIABLE . SET READLINE LPAREN RPAREN
    (18) declaration -> VARIABLE . SET expression
    (19) declaration -> VARIABLE . SET condition
    (30) array_declaration -> VARIABLE . SET ARRAY LPAREN arrayArg RPAREN
    (50) value -> VARIABLE .

    SET             shift and go to state 41
    PLUS            reduce using rule 50 (value -> VARIABLE .)
    MINUS           reduce using rule 50 (value -> VARIABLE .)
    TIMES           reduce using rule 50 (value -> VARIABLE .)
    DIVIDE          reduce using rule 50 (value -> VARIABLE .)


state 19

    (57) expression -> value . operator value
    (53) operator -> . PLUS
    (54) operator -> . MINUS
    (55) operator -> . TIMES
    (56) operator -> . DIVIDE

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46

    operator                       shift and go to state 42

state 20

    (29) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 47


state 21

    (60) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE
    (22) class_statement -> CLASS . IDENTIFIER LBRACE class_body RBRACE

    IDENTIFIER      shift and go to state 48


state 22

    (67) property_declaration -> visibility . VARIABLE

    VARIABLE        shift and go to state 49


state 23

    (23) function_statement -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> FUNCTION . LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 50
    VARIABLE        shift and go to state 52
    LPAREN          shift and go to state 51


state 24

    (24) while -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 53


state 25

    (34) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 54


state 26

    (51) value -> INTEGER .

    PLUS            reduce using rule 51 (value -> INTEGER .)
    MINUS           reduce using rule 51 (value -> INTEGER .)
    TIMES           reduce using rule 51 (value -> INTEGER .)
    DIVIDE          reduce using rule 51 (value -> INTEGER .)
    SEMI            reduce using rule 51 (value -> INTEGER .)
    COMMA           reduce using rule 51 (value -> INTEGER .)
    RPAREN          reduce using rule 51 (value -> INTEGER .)
    LT              reduce using rule 51 (value -> INTEGER .)
    GT              reduce using rule 51 (value -> INTEGER .)
    LE              reduce using rule 51 (value -> INTEGER .)
    GE              reduce using rule 51 (value -> INTEGER .)
    EQ              reduce using rule 51 (value -> INTEGER .)
    NE              reduce using rule 51 (value -> INTEGER .)
    AND             reduce using rule 51 (value -> INTEGER .)
    OR              reduce using rule 51 (value -> INTEGER .)
    INTEGER         reduce using rule 51 (value -> INTEGER .)
    STRING          reduce using rule 51 (value -> INTEGER .)


state 27

    (52) value -> FLOAT .

    PLUS            reduce using rule 52 (value -> FLOAT .)
    MINUS           reduce using rule 52 (value -> FLOAT .)
    TIMES           reduce using rule 52 (value -> FLOAT .)
    DIVIDE          reduce using rule 52 (value -> FLOAT .)
    SEMI            reduce using rule 52 (value -> FLOAT .)
    COMMA           reduce using rule 52 (value -> FLOAT .)
    RPAREN          reduce using rule 52 (value -> FLOAT .)
    LT              reduce using rule 52 (value -> FLOAT .)
    GT              reduce using rule 52 (value -> FLOAT .)
    LE              reduce using rule 52 (value -> FLOAT .)
    GE              reduce using rule 52 (value -> FLOAT .)
    EQ              reduce using rule 52 (value -> FLOAT .)
    NE              reduce using rule 52 (value -> FLOAT .)
    AND             reduce using rule 52 (value -> FLOAT .)
    OR              reduce using rule 52 (value -> FLOAT .)
    INTEGER         reduce using rule 52 (value -> FLOAT .)
    STRING          reduce using rule 52 (value -> FLOAT .)


state 28

    (70) visibility -> PUBLIC .

    VARIABLE        reduce using rule 70 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 70 (visibility -> PUBLIC .)


state 29

    (71) visibility -> PROTECTED .

    VARIABLE        reduce using rule 71 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 71 (visibility -> PROTECTED .)


state 30

    (72) visibility -> PRIVATE .

    VARIABLE        reduce using rule 72 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 72 (visibility -> PRIVATE .)


state 31

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    IF              reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    PUBLIC          reduce using rule 1 (statement -> print SEMI .)
    PROTECTED       reduce using rule 1 (statement -> print SEMI .)
    PRIVATE         reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 32

    (2) statement -> input SEMI .

    $end            reduce using rule 2 (statement -> input SEMI .)
    ECHO            reduce using rule 2 (statement -> input SEMI .)
    VARIABLE        reduce using rule 2 (statement -> input SEMI .)
    VAR             reduce using rule 2 (statement -> input SEMI .)
    CLASS           reduce using rule 2 (statement -> input SEMI .)
    FUNCTION        reduce using rule 2 (statement -> input SEMI .)
    WHILE           reduce using rule 2 (statement -> input SEMI .)
    IF              reduce using rule 2 (statement -> input SEMI .)
    INTEGER         reduce using rule 2 (statement -> input SEMI .)
    FLOAT           reduce using rule 2 (statement -> input SEMI .)
    PUBLIC          reduce using rule 2 (statement -> input SEMI .)
    PROTECTED       reduce using rule 2 (statement -> input SEMI .)
    PRIVATE         reduce using rule 2 (statement -> input SEMI .)
    RBRACE          reduce using rule 2 (statement -> input SEMI .)


state 33

    (3) statement -> expression SEMI .

    $end            reduce using rule 3 (statement -> expression SEMI .)
    ECHO            reduce using rule 3 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 3 (statement -> expression SEMI .)
    VAR             reduce using rule 3 (statement -> expression SEMI .)
    CLASS           reduce using rule 3 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 3 (statement -> expression SEMI .)
    WHILE           reduce using rule 3 (statement -> expression SEMI .)
    IF              reduce using rule 3 (statement -> expression SEMI .)
    INTEGER         reduce using rule 3 (statement -> expression SEMI .)
    FLOAT           reduce using rule 3 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 3 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 3 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 3 (statement -> expression SEMI .)
    RBRACE          reduce using rule 3 (statement -> expression SEMI .)


state 34

    (4) statement -> declaration SEMI .

    $end            reduce using rule 4 (statement -> declaration SEMI .)
    ECHO            reduce using rule 4 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 4 (statement -> declaration SEMI .)
    VAR             reduce using rule 4 (statement -> declaration SEMI .)
    CLASS           reduce using rule 4 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 4 (statement -> declaration SEMI .)
    WHILE           reduce using rule 4 (statement -> declaration SEMI .)
    IF              reduce using rule 4 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 4 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 4 (statement -> declaration SEMI .)
    PUBLIC          reduce using rule 4 (statement -> declaration SEMI .)
    PROTECTED       reduce using rule 4 (statement -> declaration SEMI .)
    PRIVATE         reduce using rule 4 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 4 (statement -> declaration SEMI .)


state 35

    (7) statement -> array_declaration SEMI .

    $end            reduce using rule 7 (statement -> array_declaration SEMI .)
    ECHO            reduce using rule 7 (statement -> array_declaration SEMI .)
    VARIABLE        reduce using rule 7 (statement -> array_declaration SEMI .)
    VAR             reduce using rule 7 (statement -> array_declaration SEMI .)
    CLASS           reduce using rule 7 (statement -> array_declaration SEMI .)
    FUNCTION        reduce using rule 7 (statement -> array_declaration SEMI .)
    WHILE           reduce using rule 7 (statement -> array_declaration SEMI .)
    IF              reduce using rule 7 (statement -> array_declaration SEMI .)
    INTEGER         reduce using rule 7 (statement -> array_declaration SEMI .)
    FLOAT           reduce using rule 7 (statement -> array_declaration SEMI .)
    PUBLIC          reduce using rule 7 (statement -> array_declaration SEMI .)
    PROTECTED       reduce using rule 7 (statement -> array_declaration SEMI .)
    PRIVATE         reduce using rule 7 (statement -> array_declaration SEMI .)
    RBRACE          reduce using rule 7 (statement -> array_declaration SEMI .)


state 36

    (8) statement -> property_declaration SEMI .

    $end            reduce using rule 8 (statement -> property_declaration SEMI .)
    ECHO            reduce using rule 8 (statement -> property_declaration SEMI .)
    VARIABLE        reduce using rule 8 (statement -> property_declaration SEMI .)
    VAR             reduce using rule 8 (statement -> property_declaration SEMI .)
    CLASS           reduce using rule 8 (statement -> property_declaration SEMI .)
    FUNCTION        reduce using rule 8 (statement -> property_declaration SEMI .)
    WHILE           reduce using rule 8 (statement -> property_declaration SEMI .)
    IF              reduce using rule 8 (statement -> property_declaration SEMI .)
    INTEGER         reduce using rule 8 (statement -> property_declaration SEMI .)
    FLOAT           reduce using rule 8 (statement -> property_declaration SEMI .)
    PUBLIC          reduce using rule 8 (statement -> property_declaration SEMI .)
    PROTECTED       reduce using rule 8 (statement -> property_declaration SEMI .)
    PRIVATE         reduce using rule 8 (statement -> property_declaration SEMI .)
    RBRACE          reduce using rule 8 (statement -> property_declaration SEMI .)


state 37

    (26) print -> ECHO LPAREN . expressions RPAREN
    (58) expressions -> . expression COMMA expressions
    (59) expressions -> . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expressions                    shift and go to state 55
    expression                     shift and go to state 39
    value                          shift and go to state 19

state 38

    (27) print -> ECHO expressions .

    SEMI            reduce using rule 27 (print -> ECHO expressions .)


state 39

    (58) expressions -> expression . COMMA expressions
    (59) expressions -> expression .

    COMMA           shift and go to state 56
    SEMI            reduce using rule 59 (expressions -> expression .)
    RPAREN          reduce using rule 59 (expressions -> expression .)


state 40

    (50) value -> VARIABLE .

    PLUS            reduce using rule 50 (value -> VARIABLE .)
    MINUS           reduce using rule 50 (value -> VARIABLE .)
    TIMES           reduce using rule 50 (value -> VARIABLE .)
    DIVIDE          reduce using rule 50 (value -> VARIABLE .)
    SEMI            reduce using rule 50 (value -> VARIABLE .)
    COMMA           reduce using rule 50 (value -> VARIABLE .)
    RPAREN          reduce using rule 50 (value -> VARIABLE .)
    LT              reduce using rule 50 (value -> VARIABLE .)
    GT              reduce using rule 50 (value -> VARIABLE .)
    LE              reduce using rule 50 (value -> VARIABLE .)
    GE              reduce using rule 50 (value -> VARIABLE .)
    EQ              reduce using rule 50 (value -> VARIABLE .)
    NE              reduce using rule 50 (value -> VARIABLE .)
    AND             reduce using rule 50 (value -> VARIABLE .)
    OR              reduce using rule 50 (value -> VARIABLE .)
    INTEGER         reduce using rule 50 (value -> VARIABLE .)
    STRING          reduce using rule 50 (value -> VARIABLE .)


state 41

    (28) input -> VARIABLE SET . READLINE LPAREN RPAREN
    (18) declaration -> VARIABLE SET . expression
    (19) declaration -> VARIABLE SET . condition
    (30) array_declaration -> VARIABLE SET . ARRAY LPAREN arrayArg RPAREN
    (57) expression -> . value operator value
    (38) condition -> . expression comparison_operator expression
    (39) condition -> . condition logical_operator condition
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    READLINE        shift and go to state 57
    ARRAY           shift and go to state 60
    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 58
    condition                      shift and go to state 59
    value                          shift and go to state 19

state 42

    (57) expression -> value operator . value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    value                          shift and go to state 61

state 43

    (53) operator -> PLUS .

    VARIABLE        reduce using rule 53 (operator -> PLUS .)
    INTEGER         reduce using rule 53 (operator -> PLUS .)
    FLOAT           reduce using rule 53 (operator -> PLUS .)


state 44

    (54) operator -> MINUS .

    VARIABLE        reduce using rule 54 (operator -> MINUS .)
    INTEGER         reduce using rule 54 (operator -> MINUS .)
    FLOAT           reduce using rule 54 (operator -> MINUS .)


state 45

    (55) operator -> TIMES .

    VARIABLE        reduce using rule 55 (operator -> TIMES .)
    INTEGER         reduce using rule 55 (operator -> TIMES .)
    FLOAT           reduce using rule 55 (operator -> TIMES .)


state 46

    (56) operator -> DIVIDE .

    VARIABLE        reduce using rule 56 (operator -> DIVIDE .)
    INTEGER         reduce using rule 56 (operator -> DIVIDE .)
    FLOAT           reduce using rule 56 (operator -> DIVIDE .)


state 47

    (29) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 62


state 48

    (60) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE
    (22) class_statement -> CLASS IDENTIFIER . LBRACE class_body RBRACE

    LBRACE          shift and go to state 63


state 49

    (67) property_declaration -> visibility VARIABLE .

    SEMI            reduce using rule 67 (property_declaration -> visibility VARIABLE .)
    PUBLIC          reduce using rule 67 (property_declaration -> visibility VARIABLE .)
    PROTECTED       reduce using rule 67 (property_declaration -> visibility VARIABLE .)
    PRIVATE         reduce using rule 67 (property_declaration -> visibility VARIABLE .)
    RBRACE          reduce using rule 67 (property_declaration -> visibility VARIABLE .)


state 50

    (23) function_statement -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 64


state 51

    (79) function_anonymous -> FUNCTION LPAREN . parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (73) parameters -> . parameter COMMA parameters
    (74) parameters -> . parameter
    (75) parameter -> . TYPE VARIABLE
    (76) parameter -> . VARIABLE

    TYPE            shift and go to state 67
    VARIABLE        shift and go to state 68

    parameters                     shift and go to state 65
    parameter                      shift and go to state 66

state 52

    (25) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 69


state 53

    (24) while -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 70
    value                          shift and go to state 19

state 54

    (34) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (38) condition -> . expression comparison_operator expression
    (39) condition -> . condition logical_operator condition
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    condition                      shift and go to state 71
    expression                     shift and go to state 72
    value                          shift and go to state 19

state 55

    (26) print -> ECHO LPAREN expressions . RPAREN

    RPAREN          shift and go to state 73


state 56

    (58) expressions -> expression COMMA . expressions
    (58) expressions -> . expression COMMA expressions
    (59) expressions -> . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 39
    expressions                    shift and go to state 74
    value                          shift and go to state 19

state 57

    (28) input -> VARIABLE SET READLINE . LPAREN RPAREN

    LPAREN          shift and go to state 75


state 58

    (18) declaration -> VARIABLE SET expression .
    (38) condition -> expression . comparison_operator expression
    (44) comparison_operator -> . LT
    (45) comparison_operator -> . GT
    (46) comparison_operator -> . LE
    (47) comparison_operator -> . GE
    (48) comparison_operator -> . EQ
    (49) comparison_operator -> . NE

    SEMI            reduce using rule 18 (declaration -> VARIABLE SET expression .)
    LT              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    GE              shift and go to state 80
    EQ              shift and go to state 81
    NE              shift and go to state 82

    comparison_operator            shift and go to state 76

state 59

    (19) declaration -> VARIABLE SET condition .
    (39) condition -> condition . logical_operator condition
    (83) logical_operator -> . AND
    (84) logical_operator -> . OR

    SEMI            reduce using rule 19 (declaration -> VARIABLE SET condition .)
    AND             shift and go to state 84
    OR              shift and go to state 85

    logical_operator               shift and go to state 83

state 60

    (30) array_declaration -> VARIABLE SET ARRAY . LPAREN arrayArg RPAREN

    LPAREN          shift and go to state 86


state 61

    (57) expression -> value operator value .

    SEMI            reduce using rule 57 (expression -> value operator value .)
    COMMA           reduce using rule 57 (expression -> value operator value .)
    RPAREN          reduce using rule 57 (expression -> value operator value .)
    LT              reduce using rule 57 (expression -> value operator value .)
    GT              reduce using rule 57 (expression -> value operator value .)
    LE              reduce using rule 57 (expression -> value operator value .)
    GE              reduce using rule 57 (expression -> value operator value .)
    EQ              reduce using rule 57 (expression -> value operator value .)
    NE              reduce using rule 57 (expression -> value operator value .)
    AND             reduce using rule 57 (expression -> value operator value .)
    OR              reduce using rule 57 (expression -> value operator value .)


state 62

    (29) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 87


state 63

    (60) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (22) class_statement -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (61) class_body -> . class_member_list
    (62) class_member_list -> . class_member class_member_list
    (63) class_member_list -> . class_member
    (64) class_member -> . property_declaration
    (65) class_member -> . method_declaration
    (66) class_member -> . constructor_declaration
    (67) property_declaration -> . visibility VARIABLE
    (68) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (69) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    class_body                     shift and go to state 88
    class_member_list              shift and go to state 89
    class_member                   shift and go to state 90
    property_declaration           shift and go to state 91
    method_declaration             shift and go to state 92
    constructor_declaration        shift and go to state 93
    visibility                     shift and go to state 94

state 64

    (23) function_statement -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (73) parameters -> . parameter COMMA parameters
    (74) parameters -> . parameter
    (75) parameter -> . TYPE VARIABLE
    (76) parameter -> . VARIABLE

    TYPE            shift and go to state 67
    VARIABLE        shift and go to state 68

    parameters                     shift and go to state 95
    parameter                      shift and go to state 66

state 65

    (79) function_anonymous -> FUNCTION LPAREN parameters . RPAREN use_clause_opt LBRACE statements RBRACE

    RPAREN          shift and go to state 96


state 66

    (73) parameters -> parameter . COMMA parameters
    (74) parameters -> parameter .

    COMMA           shift and go to state 97
    RPAREN          reduce using rule 74 (parameters -> parameter .)


state 67

    (75) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 98


state 68

    (76) parameter -> VARIABLE .

    COMMA           reduce using rule 76 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 76 (parameter -> VARIABLE .)


state 69

    (25) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 99


state 70

    (24) while -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 100


state 71

    (34) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE SEMI
    (35) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE elseif
    (36) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE else
    (39) condition -> condition . logical_operator condition
    (83) logical_operator -> . AND
    (84) logical_operator -> . OR

    RPAREN          shift and go to state 101
    AND             shift and go to state 84
    OR              shift and go to state 85

    logical_operator               shift and go to state 83

state 72

    (38) condition -> expression . comparison_operator expression
    (44) comparison_operator -> . LT
    (45) comparison_operator -> . GT
    (46) comparison_operator -> . LE
    (47) comparison_operator -> . GE
    (48) comparison_operator -> . EQ
    (49) comparison_operator -> . NE

    LT              shift and go to state 77
    GT              shift and go to state 78
    LE              shift and go to state 79
    GE              shift and go to state 80
    EQ              shift and go to state 81
    NE              shift and go to state 82

    comparison_operator            shift and go to state 76

state 73

    (26) print -> ECHO LPAREN expressions RPAREN .

    SEMI            reduce using rule 26 (print -> ECHO LPAREN expressions RPAREN .)


state 74

    (58) expressions -> expression COMMA expressions .

    SEMI            reduce using rule 58 (expressions -> expression COMMA expressions .)
    RPAREN          reduce using rule 58 (expressions -> expression COMMA expressions .)


state 75

    (28) input -> VARIABLE SET READLINE LPAREN . RPAREN

    RPAREN          shift and go to state 102


state 76

    (38) condition -> expression comparison_operator . expression
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 103
    value                          shift and go to state 19

state 77

    (44) comparison_operator -> LT .

    VARIABLE        reduce using rule 44 (comparison_operator -> LT .)
    INTEGER         reduce using rule 44 (comparison_operator -> LT .)
    FLOAT           reduce using rule 44 (comparison_operator -> LT .)


state 78

    (45) comparison_operator -> GT .

    VARIABLE        reduce using rule 45 (comparison_operator -> GT .)
    INTEGER         reduce using rule 45 (comparison_operator -> GT .)
    FLOAT           reduce using rule 45 (comparison_operator -> GT .)


state 79

    (46) comparison_operator -> LE .

    VARIABLE        reduce using rule 46 (comparison_operator -> LE .)
    INTEGER         reduce using rule 46 (comparison_operator -> LE .)
    FLOAT           reduce using rule 46 (comparison_operator -> LE .)


state 80

    (47) comparison_operator -> GE .

    VARIABLE        reduce using rule 47 (comparison_operator -> GE .)
    INTEGER         reduce using rule 47 (comparison_operator -> GE .)
    FLOAT           reduce using rule 47 (comparison_operator -> GE .)


state 81

    (48) comparison_operator -> EQ .

    VARIABLE        reduce using rule 48 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 48 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 48 (comparison_operator -> EQ .)


state 82

    (49) comparison_operator -> NE .

    VARIABLE        reduce using rule 49 (comparison_operator -> NE .)
    INTEGER         reduce using rule 49 (comparison_operator -> NE .)
    FLOAT           reduce using rule 49 (comparison_operator -> NE .)


state 83

    (39) condition -> condition logical_operator . condition
    (38) condition -> . expression comparison_operator expression
    (39) condition -> . condition logical_operator condition
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    condition                      shift and go to state 104
    expression                     shift and go to state 72
    value                          shift and go to state 19

state 84

    (83) logical_operator -> AND .

    VARIABLE        reduce using rule 83 (logical_operator -> AND .)
    INTEGER         reduce using rule 83 (logical_operator -> AND .)
    FLOAT           reduce using rule 83 (logical_operator -> AND .)


state 85

    (84) logical_operator -> OR .

    VARIABLE        reduce using rule 84 (logical_operator -> OR .)
    INTEGER         reduce using rule 84 (logical_operator -> OR .)
    FLOAT           reduce using rule 84 (logical_operator -> OR .)


state 86

    (30) array_declaration -> VARIABLE SET ARRAY LPAREN . arrayArg RPAREN
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (40) index -> . INTEGER
    (41) index -> . STRING

    INTEGER         shift and go to state 107
    STRING          shift and go to state 108

    arrayArg                       shift and go to state 105
    index                          shift and go to state 106

state 87

    (29) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 109


state 88

    (60) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE
    (22) class_statement -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 110


state 89

    (61) class_body -> class_member_list .

    RBRACE          reduce using rule 61 (class_body -> class_member_list .)


state 90

    (62) class_member_list -> class_member . class_member_list
    (63) class_member_list -> class_member .
    (62) class_member_list -> . class_member class_member_list
    (63) class_member_list -> . class_member
    (64) class_member -> . property_declaration
    (65) class_member -> . method_declaration
    (66) class_member -> . constructor_declaration
    (67) property_declaration -> . visibility VARIABLE
    (68) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (69) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    RBRACE          reduce using rule 63 (class_member_list -> class_member .)
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    class_member                   shift and go to state 90
    class_member_list              shift and go to state 111
    property_declaration           shift and go to state 91
    method_declaration             shift and go to state 92
    constructor_declaration        shift and go to state 93
    visibility                     shift and go to state 94

state 91

    (64) class_member -> property_declaration .

    PUBLIC          reduce using rule 64 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 64 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 64 (class_member -> property_declaration .)
    RBRACE          reduce using rule 64 (class_member -> property_declaration .)


state 92

    (65) class_member -> method_declaration .

    PUBLIC          reduce using rule 65 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 65 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 65 (class_member -> method_declaration .)
    RBRACE          reduce using rule 65 (class_member -> method_declaration .)


state 93

    (66) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 66 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 66 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 66 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 66 (class_member -> constructor_declaration .)


state 94

    (67) property_declaration -> visibility . VARIABLE
    (68) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (69) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 49
    FUNCTION        shift and go to state 112


state 95

    (23) function_statement -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 113


state 96

    (79) function_anonymous -> FUNCTION LPAREN parameters RPAREN . use_clause_opt LBRACE statements RBRACE
    (80) use_clause_opt -> . USE LPAREN variables RPAREN

    USE             shift and go to state 115

    use_clause_opt                 shift and go to state 114

state 97

    (73) parameters -> parameter COMMA . parameters
    (73) parameters -> . parameter COMMA parameters
    (74) parameters -> . parameter
    (75) parameter -> . TYPE VARIABLE
    (76) parameter -> . VARIABLE

    TYPE            shift and go to state 67
    VARIABLE        shift and go to state 68

    parameter                      shift and go to state 66
    parameters                     shift and go to state 116

state 98

    (75) parameter -> TYPE VARIABLE .

    COMMA           reduce using rule 75 (parameter -> TYPE VARIABLE .)
    RPAREN          reduce using rule 75 (parameter -> TYPE VARIABLE .)


state 99

    (25) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 117


state 100

    (24) while -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 118


state 101

    (34) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE SEMI
    (35) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE elseif
    (36) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 119


state 102

    (28) input -> VARIABLE SET READLINE LPAREN RPAREN .

    SEMI            reduce using rule 28 (input -> VARIABLE SET READLINE LPAREN RPAREN .)


state 103

    (38) condition -> expression comparison_operator expression .

    AND             reduce using rule 38 (condition -> expression comparison_operator expression .)
    OR              reduce using rule 38 (condition -> expression comparison_operator expression .)
    SEMI            reduce using rule 38 (condition -> expression comparison_operator expression .)
    RPAREN          reduce using rule 38 (condition -> expression comparison_operator expression .)


state 104

    (39) condition -> condition logical_operator condition .
    (39) condition -> condition . logical_operator condition
    (83) logical_operator -> . AND
    (84) logical_operator -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    SEMI            reduce using rule 39 (condition -> condition logical_operator condition .)
    RPAREN          reduce using rule 39 (condition -> condition logical_operator condition .)
    AND             shift and go to state 84
    OR              shift and go to state 85

  ! AND             [ reduce using rule 39 (condition -> condition logical_operator condition .) ]
  ! OR              [ reduce using rule 39 (condition -> condition logical_operator condition .) ]

    logical_operator               shift and go to state 83

state 105

    (30) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg . RPAREN

    RPAREN          shift and go to state 120


state 106

    (31) arrayArg -> index . ARROW value
    (32) arrayArg -> index . ARROW value arrayArg
    (33) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 121


state 107

    (40) index -> INTEGER .

    ARROW           reduce using rule 40 (index -> INTEGER .)


state 108

    (41) index -> STRING .

    ARROW           reduce using rule 41 (index -> STRING .)


state 109

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 122


state 110

    (60) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .
    (22) class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .

  ! reduce/reduce conflict for $end resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for ECHO resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for VARIABLE resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for VAR resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for CLASS resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for WHILE resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for IF resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for INTEGER resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for FLOAT resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for PUBLIC resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for PROTECTED resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for PRIVATE resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
  ! reduce/reduce conflict for RBRACE resolved using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    $end            reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROTECTED       reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 22 (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE .)

  ! $end            [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! ECHO            [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! VARIABLE        [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! VAR             [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! CLASS           [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! FUNCTION        [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! WHILE           [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! IF              [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! INTEGER         [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! FLOAT           [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! PUBLIC          [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! PROTECTED       [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! PRIVATE         [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]
  ! RBRACE          [ reduce using rule 60 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .) ]


state 111

    (62) class_member_list -> class_member class_member_list .

    RBRACE          reduce using rule 62 (class_member_list -> class_member class_member_list .)


state 112

    (68) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (69) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 123
    CONSTRUCT       shift and go to state 124


state 113

    (23) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 125


state 114

    (79) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 126


state 115

    (80) use_clause_opt -> USE . LPAREN variables RPAREN

    LPAREN          shift and go to state 127


state 116

    (73) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 73 (parameters -> parameter COMMA parameters .)


state 117

    (25) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 128
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 118

    (24) while -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    expression                     shift and go to state 4
    statements                     shift and go to state 130
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 119

    (34) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE SEMI
    (35) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE elseif
    (36) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 131
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 120

    (30) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .

    SEMI            reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    $end            reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    ECHO            reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    VARIABLE        reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    VAR             reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    CLASS           reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    FUNCTION        reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    WHILE           reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    IF              reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    INTEGER         reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    FLOAT           reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    PUBLIC          reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    PROTECTED       reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    PRIVATE         reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)
    RBRACE          reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)


state 121

    (31) arrayArg -> index ARROW . value
    (32) arrayArg -> index ARROW . value arrayArg
    (33) arrayArg -> index ARROW . value COMMA arrayArg
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    value                          shift and go to state 132

state 122

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 133


state 123

    (68) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 134


state 124

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 135


state 125

    (23) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 136
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 126

    (79) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 137
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 127

    (80) use_clause_opt -> USE LPAREN . variables RPAREN
    (81) variables -> . VARIABLE COMMA variables
    (82) variables -> . VARIABLE

    VARIABLE        shift and go to state 139

    variables                      shift and go to state 138

state 128

    (25) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 140


state 129

    (16) statements -> statement . statements
    (17) statements -> statement .
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    RBRACE          reduce using rule 17 (statements -> statement .)
    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statement                      shift and go to state 129
    statements                     shift and go to state 141
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 130

    (24) while -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 142


state 131

    (34) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE SEMI
    (35) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE elseif
    (36) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 143


state 132

    (31) arrayArg -> index ARROW value .
    (32) arrayArg -> index ARROW value . arrayArg
    (33) arrayArg -> index ARROW value . COMMA arrayArg
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (40) index -> . INTEGER
    (41) index -> . STRING

    RPAREN          reduce using rule 31 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 145
    INTEGER         shift and go to state 107
    STRING          shift and go to state 108

    index                          shift and go to state 106
    arrayArg                       shift and go to state 144

state 133

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 146


state 134

    (68) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (73) parameters -> . parameter COMMA parameters
    (74) parameters -> . parameter
    (75) parameter -> . TYPE VARIABLE
    (76) parameter -> . VARIABLE

    TYPE            shift and go to state 67
    VARIABLE        shift and go to state 68

    parameters                     shift and go to state 147
    parameter                      shift and go to state 66

state 135

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameters RPAREN LBRACE statements RBRACE
    (73) parameters -> . parameter COMMA parameters
    (74) parameters -> . parameter
    (75) parameter -> . TYPE VARIABLE
    (76) parameter -> . VARIABLE

    TYPE            shift and go to state 67
    VARIABLE        shift and go to state 68

    parameters                     shift and go to state 148
    parameter                      shift and go to state 66

state 136

    (23) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 149


state 137

    (79) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 150


state 138

    (80) use_clause_opt -> USE LPAREN variables . RPAREN

    RPAREN          shift and go to state 151


state 139

    (81) variables -> VARIABLE . COMMA variables
    (82) variables -> VARIABLE .

    COMMA           shift and go to state 152
    RPAREN          reduce using rule 82 (variables -> VARIABLE .)


state 140

    (25) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 25 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 141

    (16) statements -> statement statements .

    RBRACE          reduce using rule 16 (statements -> statement statements .)


state 142

    (24) while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 24 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 143

    (34) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . SEMI
    (35) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . elseif
    (36) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (77) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
    (78) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
    (37) else -> . ELSE LBRACE statements RBRACE SEMI

    SEMI            shift and go to state 153
    ELSEIF          shift and go to state 156
    ELSE            shift and go to state 157

    elseif                         shift and go to state 154
    else                           shift and go to state 155

state 144

    (32) arrayArg -> index ARROW value arrayArg .

    RPAREN          reduce using rule 32 (arrayArg -> index ARROW value arrayArg .)


state 145

    (33) arrayArg -> index ARROW value COMMA . arrayArg
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (40) index -> . INTEGER
    (41) index -> . STRING

    INTEGER         shift and go to state 107
    STRING          shift and go to state 108

    index                          shift and go to state 106
    arrayArg                       shift and go to state 158

state 146

    (29) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IF              reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 29 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 147

    (68) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 159


state 148

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 160


state 149

    (23) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 23 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 150

    (79) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IF              reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 79 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)


state 151

    (80) use_clause_opt -> USE LPAREN variables RPAREN .

    LBRACE          reduce using rule 80 (use_clause_opt -> USE LPAREN variables RPAREN .)


state 152

    (81) variables -> VARIABLE COMMA . variables
    (81) variables -> . VARIABLE COMMA variables
    (82) variables -> . VARIABLE

    VARIABLE        shift and go to state 139

    variables                      shift and go to state 161

state 153

    (34) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)


state 154

    (35) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 35 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)


state 155

    (36) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)


state 156

    (77) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE
    (78) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 162


state 157

    (37) else -> ELSE . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 163


state 158

    (33) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 33 (arrayArg -> index ARROW value COMMA arrayArg .)


state 159

    (68) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 164


state 160

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 165


state 161

    (81) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 81 (variables -> VARIABLE COMMA variables .)


state 162

    (77) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE
    (78) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (38) condition -> . expression comparison_operator expression
    (39) condition -> . condition logical_operator condition
    (57) expression -> . value operator value
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    condition                      shift and go to state 166
    expression                     shift and go to state 72
    value                          shift and go to state 19

state 163

    (37) else -> ELSE LBRACE . statements RBRACE SEMI
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 167
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 164

    (68) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    visibility                     shift and go to state 22
    statements                     shift and go to state 168
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19

state 165

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    visibility                     shift and go to state 22
    statements                     shift and go to state 169
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19

state 166

    (77) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE
    (78) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE else
    (39) condition -> condition . logical_operator condition
    (83) logical_operator -> . AND
    (84) logical_operator -> . OR

    RPAREN          shift and go to state 170
    AND             shift and go to state 84
    OR              shift and go to state 85

    logical_operator               shift and go to state 83

state 167

    (37) else -> ELSE LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 171


state 168

    (68) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 172


state 169

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 173


state 170

    (77) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE
    (78) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 174


state 171

    (37) else -> ELSE LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 175


state 172

    (68) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 68 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 68 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 68 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 68 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 173

    (69) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 69 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 69 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 69 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 69 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 174

    (77) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE
    (78) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . input SEMI
    (3) statement -> . expression SEMI
    (4) statement -> . declaration SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . data_structure
    (10) statement -> . function_statement
    (11) statement -> . function_variable
    (12) statement -> . function_anonymous
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (26) print -> . ECHO LPAREN expressions RPAREN
    (27) print -> . ECHO expressions
    (28) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (57) expression -> . value operator value
    (18) declaration -> . VARIABLE SET expression
    (19) declaration -> . VARIABLE SET condition
    (29) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (60) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (67) property_declaration -> . visibility VARIABLE
    (20) data_structure -> . array_declaration
    (21) data_structure -> . class_statement
    (23) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (25) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (79) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (22) class_statement -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (24) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (50) value -> . VARIABLE
    (51) value -> . INTEGER
    (52) value -> . FLOAT
    (70) visibility -> . PUBLIC
    (71) visibility -> . PROTECTED
    (72) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 176
    statement                      shift and go to state 129
    print                          shift and go to state 2
    input                          shift and go to state 3
    expression                     shift and go to state 4
    declaration                    shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    data_structure                 shift and go to state 10
    function_statement             shift and go to state 11
    function_variable              shift and go to state 12
    function_anonymous             shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 175

    (37) else -> ELSE LBRACE statements RBRACE SEMI .

    $end            reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 37 (else -> ELSE LBRACE statements RBRACE SEMI .)


state 176

    (77) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE
    (78) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 177


state 177

    (77) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .
    (78) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (37) else -> . ELSE LBRACE statements RBRACE SEMI

    $end            reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 77 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 157

    else                           shift and go to state 178

state 178

    (78) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 78 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (statement -> class_statement)
WARNING: rejected rule (data_structure -> class_statement) in state 14
WARNING: reduce/reduce conflict in state 110 resolved using rule (class_statement -> CLASS IDENTIFIER LBRACE class_body RBRACE)
WARNING: rejected rule (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE) in state 110
WARNING: Rule (data_structure -> class_statement) is never reduced
WARNING: Rule (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE) is never reduced
