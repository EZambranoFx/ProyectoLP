Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    COMMENT
    CONTINUE
    DEFAULT
    DO
    DOLLAR
    ERROR
    EXP
    EXTENDS
    FINALLY
    FOR
    FOREACH
    IDENTICAL
    IMPLEMENTS
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    PHP_CLOSE
    PHP_OPEN
    RBRACKET
    RETURN
    STATIC
    SWITCH
    THROW

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> declaration SEMI
Rule 3     statement -> input SEMI
Rule 4     statement -> expression SEMI
Rule 5     statement -> object_declaration
Rule 6     statement -> class_declaration
Rule 7     statement -> array_declaration SEMI
Rule 8     statement -> property_declaration SEMI
Rule 9     statement -> function_statement
Rule 10    statement -> function_variable
Rule 11    statement -> function_anonymous
Rule 12    statement -> function_arrow
Rule 13    statement -> class_statement
Rule 14    statement -> while
Rule 15    statement -> constant_declaration
Rule 16    statement -> constant_use
Rule 17    statement -> try_catch
Rule 18    statement -> catch_item
Rule 19    statement -> if
Rule 20    statements -> statement statements
Rule 21    statements -> statement
Rule 22    declaration -> VARIABLE SET value
Rule 23    declaration -> VARIABLE SET STRING
Rule 24    declaration -> VARIABLE SET expression
Rule 25    declaration -> VARIABLE SET condition
Rule 26    class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE
Rule 27    function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 28    while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 29    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 30    print -> ECHO LPAREN value RPAREN
Rule 31    print -> ECHO value
Rule 32    print -> ECHO STRING
Rule 33    input -> VARIABLE SET READLINE LPAREN RPAREN
Rule 34    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 35    array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN
Rule 36    array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN
Rule 37    arrayArg -> index ARROW value
Rule 38    arrayArg -> index ARROW value arrayArg
Rule 39    arrayArg -> index ARROW value COMMA arrayArg
Rule 40    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
Rule 41    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
Rule 42    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
Rule 43    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 44    else -> ELSE LBRACE statements RBRACE SEMI
Rule 45    condition -> value comparison_operator value
Rule 46    conditions -> LBRACE condition RBRACE logical_operator conditions
Rule 47    conditions -> LBRACE condition RBRACE
Rule 48    index -> INTEGER
Rule 49    index -> STRING
Rule 50    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 51    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
Rule 52    comparison_operator -> LT
Rule 53    comparison_operator -> GT
Rule 54    comparison_operator -> LE
Rule 55    comparison_operator -> GE
Rule 56    comparison_operator -> EQ
Rule 57    comparison_operator -> NE
Rule 58    value -> VARIABLE
Rule 59    value -> INTEGER
Rule 60    value -> FLOAT
Rule 61    operator -> PLUS
Rule 62    operator -> MINUS
Rule 63    operator -> TIMES
Rule 64    operator -> DIVIDE
Rule 65    expression -> value operator value
Rule 66    expressions -> expression COMMA expressions
Rule 67    expressions -> expression
Rule 68    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 69    class_body -> class_member_list
Rule 70    class_member_list -> class_member class_member_list
Rule 71    class_member_list -> class_member
Rule 72    class_member -> property_declaration
Rule 73    class_member -> method_declaration
Rule 74    class_member -> constructor_declaration
Rule 75    constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI
Rule 76    constant_declaration -> CONST IDENTIFIER SET expression SEMI
Rule 77    constant_use -> IDENTIFIER
Rule 78    try_catch -> TRY LBRACE statements RBRACE catch_list
Rule 79    catch_list -> catch_item catch_list
Rule 80    catch_list -> empty
Rule 81    catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
Rule 82    property_declaration -> visibility VARIABLE
Rule 83    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 84    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 85    visibility -> PUBLIC
Rule 86    visibility -> PROTECTED
Rule 87    visibility -> PRIVATE
Rule 88    parameters -> parameter COMMA parameters
Rule 89    parameters -> parameter
Rule 90    parameter -> TYPE VARIABLE
Rule 91    parameter -> VARIABLE
Rule 92    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 93    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 94    function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
Rule 95    use_clause_opt -> USE LPAREN variables RPAREN
Rule 96    variables -> VARIABLE COMMA variables
Rule 97    variables -> VARIABLE
Rule 98    logical_operator -> AND
Rule 99    logical_operator -> OR
Rule 100   empty -> <empty>

Terminals, with rules where they appear

AND                  : 98
ARRAY                : 35 36
ARROW                : 37 38 39 50 51
BREAK                : 
CASE                 : 
CATCH                : 81
CLASS                : 26 34 68
COMMA                : 39 66 75 88 96
COMMENT              : 
CONST                : 76
CONSTRUCT            : 84
CONTINUE             : 
DEFAULT              : 
DEFINE               : 75
DIVIDE               : 64
DO                   : 
DOLLAR               : 
ECHO                 : 30 31 32
ELSE                 : 44
ELSEIF               : 92 93
EQ                   : 56
ERROR                : 
EXCEPTION            : 81
EXP                  : 
EXTENDS              : 
FINALLY              : 
FLOAT                : 60
FOR                  : 
FOREACH              : 
FUNCTION             : 27 29 50 51 83 84 94
GE                   : 55
GT                   : 53
IDENTICAL            : 
IDENTIFIER           : 26 27 68 76 77 83
IF                   : 40 41 42 43
IMPLEMENTS           : 
INTEGER              : 48 59
LBRACE               : 26 27 28 29 40 41 42 43 44 46 47 68 78 81 83 84 92 93 94
LBRACKET             : 
LE                   : 54
LPAREN               : 27 28 29 30 33 34 35 36 40 41 42 43 50 51 75 81 83 84 92 93 94 95
LT                   : 52
MINUS                : 62
MOD                  : 
NE                   : 57
NEW                  : 34
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 99
PHP_CLOSE            : 
PHP_OPEN             : 
PLUS                 : 61
PRIVATE              : 87
PROTECTED            : 86
PUBLIC               : 85
RBRACE               : 26 27 28 29 40 41 42 43 44 46 47 68 78 81 83 84 92 93 94
RBRACKET             : 
READLINE             : 33
RETURN               : 
RPAREN               : 27 28 29 30 33 34 35 36 40 41 42 43 50 51 75 81 83 84 92 93 94 95
SEMI                 : 1 2 3 4 7 8 34 40 41 44 50 75 76
SET                  : 22 23 24 25 33 34 35 36 76
STATIC               : 
STRING               : 23 32 49 75
SWITCH               : 
THROW                : 
TIMES                : 63
TRY                  : 78
TYPE                 : 90
USE                  : 95
VAR                  : 34
VARIABLE             : 22 23 24 25 29 33 34 35 36 50 51 58 81 82 90 91 96 97
WHILE                : 28
error                : 

Nonterminals, with rules where they appear

arrayArg             : 35 38 39
array_declaration    : 7
catch_item           : 18 79
catch_list           : 78 79
class_body           : 68
class_declaration    : 6
class_member         : 70 71
class_member_list    : 26 69 70
class_statement      : 13
comparison_operator  : 45
condition            : 25 40 42 43 46 47 92 93
conditions           : 41 46
constant_declaration : 15
constant_use         : 16
constructor_declaration : 74
declaration          : 2
else                 : 43 93
elseif               : 42
empty                : 36 80
expression           : 4 24 28 50 66 67 75 76
expressions          : 66
function_anonymous   : 11
function_arrow       : 12 51
function_statement   : 9
function_variable    : 10
if                   : 19
index                : 37 38 39
input                : 3
logical_operator     : 46
method_declaration   : 73
object_declaration   : 5
operator             : 65
parameter            : 88 89
parameters           : 27 83 84 88 94
print                : 1
property_declaration : 8 72
statement            : 20 21 0
statements           : 20 27 28 29 40 41 42 43 44 78 81 83 84 92 93 94
try_catch            : 17
use_clause_opt       : 94
value                : 22 30 31 37 38 39 45 45 65 65
variables            : 95 96
visibility           : 82 83 84
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statement                      shift and go to state 1
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 40


state 3

    (2) statement -> declaration . SEMI

    SEMI            shift and go to state 41


state 4

    (3) statement -> input . SEMI

    SEMI            shift and go to state 42


state 5

    (4) statement -> expression . SEMI

    SEMI            shift and go to state 43


state 6

    (5) statement -> object_declaration .

    $end            reduce using rule 5 (statement -> object_declaration .)
    ECHO            reduce using rule 5 (statement -> object_declaration .)
    VARIABLE        reduce using rule 5 (statement -> object_declaration .)
    VAR             reduce using rule 5 (statement -> object_declaration .)
    CLASS           reduce using rule 5 (statement -> object_declaration .)
    FUNCTION        reduce using rule 5 (statement -> object_declaration .)
    WHILE           reduce using rule 5 (statement -> object_declaration .)
    DEFINE          reduce using rule 5 (statement -> object_declaration .)
    CONST           reduce using rule 5 (statement -> object_declaration .)
    IDENTIFIER      reduce using rule 5 (statement -> object_declaration .)
    TRY             reduce using rule 5 (statement -> object_declaration .)
    CATCH           reduce using rule 5 (statement -> object_declaration .)
    IF              reduce using rule 5 (statement -> object_declaration .)
    INTEGER         reduce using rule 5 (statement -> object_declaration .)
    FLOAT           reduce using rule 5 (statement -> object_declaration .)
    PUBLIC          reduce using rule 5 (statement -> object_declaration .)
    PROTECTED       reduce using rule 5 (statement -> object_declaration .)
    PRIVATE         reduce using rule 5 (statement -> object_declaration .)
    RBRACE          reduce using rule 5 (statement -> object_declaration .)


state 7

    (6) statement -> class_declaration .

    $end            reduce using rule 6 (statement -> class_declaration .)
    ECHO            reduce using rule 6 (statement -> class_declaration .)
    VARIABLE        reduce using rule 6 (statement -> class_declaration .)
    VAR             reduce using rule 6 (statement -> class_declaration .)
    CLASS           reduce using rule 6 (statement -> class_declaration .)
    FUNCTION        reduce using rule 6 (statement -> class_declaration .)
    WHILE           reduce using rule 6 (statement -> class_declaration .)
    DEFINE          reduce using rule 6 (statement -> class_declaration .)
    CONST           reduce using rule 6 (statement -> class_declaration .)
    IDENTIFIER      reduce using rule 6 (statement -> class_declaration .)
    TRY             reduce using rule 6 (statement -> class_declaration .)
    CATCH           reduce using rule 6 (statement -> class_declaration .)
    IF              reduce using rule 6 (statement -> class_declaration .)
    INTEGER         reduce using rule 6 (statement -> class_declaration .)
    FLOAT           reduce using rule 6 (statement -> class_declaration .)
    PUBLIC          reduce using rule 6 (statement -> class_declaration .)
    PROTECTED       reduce using rule 6 (statement -> class_declaration .)
    PRIVATE         reduce using rule 6 (statement -> class_declaration .)
    RBRACE          reduce using rule 6 (statement -> class_declaration .)


state 8

    (7) statement -> array_declaration . SEMI

    SEMI            shift and go to state 44


state 9

    (8) statement -> property_declaration . SEMI

    SEMI            shift and go to state 45


state 10

    (9) statement -> function_statement .

    $end            reduce using rule 9 (statement -> function_statement .)
    ECHO            reduce using rule 9 (statement -> function_statement .)
    VARIABLE        reduce using rule 9 (statement -> function_statement .)
    VAR             reduce using rule 9 (statement -> function_statement .)
    CLASS           reduce using rule 9 (statement -> function_statement .)
    FUNCTION        reduce using rule 9 (statement -> function_statement .)
    WHILE           reduce using rule 9 (statement -> function_statement .)
    DEFINE          reduce using rule 9 (statement -> function_statement .)
    CONST           reduce using rule 9 (statement -> function_statement .)
    IDENTIFIER      reduce using rule 9 (statement -> function_statement .)
    TRY             reduce using rule 9 (statement -> function_statement .)
    CATCH           reduce using rule 9 (statement -> function_statement .)
    IF              reduce using rule 9 (statement -> function_statement .)
    INTEGER         reduce using rule 9 (statement -> function_statement .)
    FLOAT           reduce using rule 9 (statement -> function_statement .)
    PUBLIC          reduce using rule 9 (statement -> function_statement .)
    PROTECTED       reduce using rule 9 (statement -> function_statement .)
    PRIVATE         reduce using rule 9 (statement -> function_statement .)
    RBRACE          reduce using rule 9 (statement -> function_statement .)


state 11

    (10) statement -> function_variable .

    $end            reduce using rule 10 (statement -> function_variable .)
    ECHO            reduce using rule 10 (statement -> function_variable .)
    VARIABLE        reduce using rule 10 (statement -> function_variable .)
    VAR             reduce using rule 10 (statement -> function_variable .)
    CLASS           reduce using rule 10 (statement -> function_variable .)
    FUNCTION        reduce using rule 10 (statement -> function_variable .)
    WHILE           reduce using rule 10 (statement -> function_variable .)
    DEFINE          reduce using rule 10 (statement -> function_variable .)
    CONST           reduce using rule 10 (statement -> function_variable .)
    IDENTIFIER      reduce using rule 10 (statement -> function_variable .)
    TRY             reduce using rule 10 (statement -> function_variable .)
    CATCH           reduce using rule 10 (statement -> function_variable .)
    IF              reduce using rule 10 (statement -> function_variable .)
    INTEGER         reduce using rule 10 (statement -> function_variable .)
    FLOAT           reduce using rule 10 (statement -> function_variable .)
    PUBLIC          reduce using rule 10 (statement -> function_variable .)
    PROTECTED       reduce using rule 10 (statement -> function_variable .)
    PRIVATE         reduce using rule 10 (statement -> function_variable .)
    RBRACE          reduce using rule 10 (statement -> function_variable .)


state 12

    (11) statement -> function_anonymous .

    $end            reduce using rule 11 (statement -> function_anonymous .)
    ECHO            reduce using rule 11 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 11 (statement -> function_anonymous .)
    VAR             reduce using rule 11 (statement -> function_anonymous .)
    CLASS           reduce using rule 11 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 11 (statement -> function_anonymous .)
    WHILE           reduce using rule 11 (statement -> function_anonymous .)
    DEFINE          reduce using rule 11 (statement -> function_anonymous .)
    CONST           reduce using rule 11 (statement -> function_anonymous .)
    IDENTIFIER      reduce using rule 11 (statement -> function_anonymous .)
    TRY             reduce using rule 11 (statement -> function_anonymous .)
    CATCH           reduce using rule 11 (statement -> function_anonymous .)
    IF              reduce using rule 11 (statement -> function_anonymous .)
    INTEGER         reduce using rule 11 (statement -> function_anonymous .)
    FLOAT           reduce using rule 11 (statement -> function_anonymous .)
    PUBLIC          reduce using rule 11 (statement -> function_anonymous .)
    PROTECTED       reduce using rule 11 (statement -> function_anonymous .)
    PRIVATE         reduce using rule 11 (statement -> function_anonymous .)
    RBRACE          reduce using rule 11 (statement -> function_anonymous .)


state 13

    (12) statement -> function_arrow .

    $end            reduce using rule 12 (statement -> function_arrow .)
    ECHO            reduce using rule 12 (statement -> function_arrow .)
    VARIABLE        reduce using rule 12 (statement -> function_arrow .)
    VAR             reduce using rule 12 (statement -> function_arrow .)
    CLASS           reduce using rule 12 (statement -> function_arrow .)
    FUNCTION        reduce using rule 12 (statement -> function_arrow .)
    WHILE           reduce using rule 12 (statement -> function_arrow .)
    DEFINE          reduce using rule 12 (statement -> function_arrow .)
    CONST           reduce using rule 12 (statement -> function_arrow .)
    IDENTIFIER      reduce using rule 12 (statement -> function_arrow .)
    TRY             reduce using rule 12 (statement -> function_arrow .)
    CATCH           reduce using rule 12 (statement -> function_arrow .)
    IF              reduce using rule 12 (statement -> function_arrow .)
    INTEGER         reduce using rule 12 (statement -> function_arrow .)
    FLOAT           reduce using rule 12 (statement -> function_arrow .)
    PUBLIC          reduce using rule 12 (statement -> function_arrow .)
    PROTECTED       reduce using rule 12 (statement -> function_arrow .)
    PRIVATE         reduce using rule 12 (statement -> function_arrow .)
    RBRACE          reduce using rule 12 (statement -> function_arrow .)


state 14

    (13) statement -> class_statement .

    $end            reduce using rule 13 (statement -> class_statement .)
    ECHO            reduce using rule 13 (statement -> class_statement .)
    VARIABLE        reduce using rule 13 (statement -> class_statement .)
    VAR             reduce using rule 13 (statement -> class_statement .)
    CLASS           reduce using rule 13 (statement -> class_statement .)
    FUNCTION        reduce using rule 13 (statement -> class_statement .)
    WHILE           reduce using rule 13 (statement -> class_statement .)
    DEFINE          reduce using rule 13 (statement -> class_statement .)
    CONST           reduce using rule 13 (statement -> class_statement .)
    IDENTIFIER      reduce using rule 13 (statement -> class_statement .)
    TRY             reduce using rule 13 (statement -> class_statement .)
    CATCH           reduce using rule 13 (statement -> class_statement .)
    IF              reduce using rule 13 (statement -> class_statement .)
    INTEGER         reduce using rule 13 (statement -> class_statement .)
    FLOAT           reduce using rule 13 (statement -> class_statement .)
    PUBLIC          reduce using rule 13 (statement -> class_statement .)
    PROTECTED       reduce using rule 13 (statement -> class_statement .)
    PRIVATE         reduce using rule 13 (statement -> class_statement .)
    RBRACE          reduce using rule 13 (statement -> class_statement .)


state 15

    (14) statement -> while .

    $end            reduce using rule 14 (statement -> while .)
    ECHO            reduce using rule 14 (statement -> while .)
    VARIABLE        reduce using rule 14 (statement -> while .)
    VAR             reduce using rule 14 (statement -> while .)
    CLASS           reduce using rule 14 (statement -> while .)
    FUNCTION        reduce using rule 14 (statement -> while .)
    WHILE           reduce using rule 14 (statement -> while .)
    DEFINE          reduce using rule 14 (statement -> while .)
    CONST           reduce using rule 14 (statement -> while .)
    IDENTIFIER      reduce using rule 14 (statement -> while .)
    TRY             reduce using rule 14 (statement -> while .)
    CATCH           reduce using rule 14 (statement -> while .)
    IF              reduce using rule 14 (statement -> while .)
    INTEGER         reduce using rule 14 (statement -> while .)
    FLOAT           reduce using rule 14 (statement -> while .)
    PUBLIC          reduce using rule 14 (statement -> while .)
    PROTECTED       reduce using rule 14 (statement -> while .)
    PRIVATE         reduce using rule 14 (statement -> while .)
    RBRACE          reduce using rule 14 (statement -> while .)


state 16

    (15) statement -> constant_declaration .

    $end            reduce using rule 15 (statement -> constant_declaration .)
    ECHO            reduce using rule 15 (statement -> constant_declaration .)
    VARIABLE        reduce using rule 15 (statement -> constant_declaration .)
    VAR             reduce using rule 15 (statement -> constant_declaration .)
    CLASS           reduce using rule 15 (statement -> constant_declaration .)
    FUNCTION        reduce using rule 15 (statement -> constant_declaration .)
    WHILE           reduce using rule 15 (statement -> constant_declaration .)
    DEFINE          reduce using rule 15 (statement -> constant_declaration .)
    CONST           reduce using rule 15 (statement -> constant_declaration .)
    IDENTIFIER      reduce using rule 15 (statement -> constant_declaration .)
    TRY             reduce using rule 15 (statement -> constant_declaration .)
    CATCH           reduce using rule 15 (statement -> constant_declaration .)
    IF              reduce using rule 15 (statement -> constant_declaration .)
    INTEGER         reduce using rule 15 (statement -> constant_declaration .)
    FLOAT           reduce using rule 15 (statement -> constant_declaration .)
    PUBLIC          reduce using rule 15 (statement -> constant_declaration .)
    PROTECTED       reduce using rule 15 (statement -> constant_declaration .)
    PRIVATE         reduce using rule 15 (statement -> constant_declaration .)
    RBRACE          reduce using rule 15 (statement -> constant_declaration .)


state 17

    (16) statement -> constant_use .

    $end            reduce using rule 16 (statement -> constant_use .)
    ECHO            reduce using rule 16 (statement -> constant_use .)
    VARIABLE        reduce using rule 16 (statement -> constant_use .)
    VAR             reduce using rule 16 (statement -> constant_use .)
    CLASS           reduce using rule 16 (statement -> constant_use .)
    FUNCTION        reduce using rule 16 (statement -> constant_use .)
    WHILE           reduce using rule 16 (statement -> constant_use .)
    DEFINE          reduce using rule 16 (statement -> constant_use .)
    CONST           reduce using rule 16 (statement -> constant_use .)
    IDENTIFIER      reduce using rule 16 (statement -> constant_use .)
    TRY             reduce using rule 16 (statement -> constant_use .)
    CATCH           reduce using rule 16 (statement -> constant_use .)
    IF              reduce using rule 16 (statement -> constant_use .)
    INTEGER         reduce using rule 16 (statement -> constant_use .)
    FLOAT           reduce using rule 16 (statement -> constant_use .)
    PUBLIC          reduce using rule 16 (statement -> constant_use .)
    PROTECTED       reduce using rule 16 (statement -> constant_use .)
    PRIVATE         reduce using rule 16 (statement -> constant_use .)
    RBRACE          reduce using rule 16 (statement -> constant_use .)


state 18

    (17) statement -> try_catch .

    $end            reduce using rule 17 (statement -> try_catch .)
    ECHO            reduce using rule 17 (statement -> try_catch .)
    VARIABLE        reduce using rule 17 (statement -> try_catch .)
    VAR             reduce using rule 17 (statement -> try_catch .)
    CLASS           reduce using rule 17 (statement -> try_catch .)
    FUNCTION        reduce using rule 17 (statement -> try_catch .)
    WHILE           reduce using rule 17 (statement -> try_catch .)
    DEFINE          reduce using rule 17 (statement -> try_catch .)
    CONST           reduce using rule 17 (statement -> try_catch .)
    IDENTIFIER      reduce using rule 17 (statement -> try_catch .)
    TRY             reduce using rule 17 (statement -> try_catch .)
    CATCH           reduce using rule 17 (statement -> try_catch .)
    IF              reduce using rule 17 (statement -> try_catch .)
    INTEGER         reduce using rule 17 (statement -> try_catch .)
    FLOAT           reduce using rule 17 (statement -> try_catch .)
    PUBLIC          reduce using rule 17 (statement -> try_catch .)
    PROTECTED       reduce using rule 17 (statement -> try_catch .)
    PRIVATE         reduce using rule 17 (statement -> try_catch .)
    RBRACE          reduce using rule 17 (statement -> try_catch .)


state 19

    (18) statement -> catch_item .

    $end            reduce using rule 18 (statement -> catch_item .)
    ECHO            reduce using rule 18 (statement -> catch_item .)
    VARIABLE        reduce using rule 18 (statement -> catch_item .)
    VAR             reduce using rule 18 (statement -> catch_item .)
    CLASS           reduce using rule 18 (statement -> catch_item .)
    FUNCTION        reduce using rule 18 (statement -> catch_item .)
    WHILE           reduce using rule 18 (statement -> catch_item .)
    DEFINE          reduce using rule 18 (statement -> catch_item .)
    CONST           reduce using rule 18 (statement -> catch_item .)
    IDENTIFIER      reduce using rule 18 (statement -> catch_item .)
    TRY             reduce using rule 18 (statement -> catch_item .)
    CATCH           reduce using rule 18 (statement -> catch_item .)
    IF              reduce using rule 18 (statement -> catch_item .)
    INTEGER         reduce using rule 18 (statement -> catch_item .)
    FLOAT           reduce using rule 18 (statement -> catch_item .)
    PUBLIC          reduce using rule 18 (statement -> catch_item .)
    PROTECTED       reduce using rule 18 (statement -> catch_item .)
    PRIVATE         reduce using rule 18 (statement -> catch_item .)
    RBRACE          reduce using rule 18 (statement -> catch_item .)


state 20

    (19) statement -> if .

    $end            reduce using rule 19 (statement -> if .)
    ECHO            reduce using rule 19 (statement -> if .)
    VARIABLE        reduce using rule 19 (statement -> if .)
    VAR             reduce using rule 19 (statement -> if .)
    CLASS           reduce using rule 19 (statement -> if .)
    FUNCTION        reduce using rule 19 (statement -> if .)
    WHILE           reduce using rule 19 (statement -> if .)
    DEFINE          reduce using rule 19 (statement -> if .)
    CONST           reduce using rule 19 (statement -> if .)
    IDENTIFIER      reduce using rule 19 (statement -> if .)
    TRY             reduce using rule 19 (statement -> if .)
    CATCH           reduce using rule 19 (statement -> if .)
    IF              reduce using rule 19 (statement -> if .)
    INTEGER         reduce using rule 19 (statement -> if .)
    FLOAT           reduce using rule 19 (statement -> if .)
    PUBLIC          reduce using rule 19 (statement -> if .)
    PROTECTED       reduce using rule 19 (statement -> if .)
    PRIVATE         reduce using rule 19 (statement -> if .)
    RBRACE          reduce using rule 19 (statement -> if .)


state 21

    (30) print -> ECHO . LPAREN value RPAREN
    (31) print -> ECHO . value
    (32) print -> ECHO . STRING
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    LPAREN          shift and go to state 46
    STRING          shift and go to state 48
    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    value                          shift and go to state 47

state 22

    (65) expression -> value . operator value
    (61) operator -> . PLUS
    (62) operator -> . MINUS
    (63) operator -> . TIMES
    (64) operator -> . DIVIDE

    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 54

    operator                       shift and go to state 50

state 23

    (22) declaration -> VARIABLE . SET value
    (23) declaration -> VARIABLE . SET STRING
    (24) declaration -> VARIABLE . SET expression
    (25) declaration -> VARIABLE . SET condition
    (33) input -> VARIABLE . SET READLINE LPAREN RPAREN
    (35) array_declaration -> VARIABLE . SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> VARIABLE . SET ARRAY LPAREN empty RPAREN
    (58) value -> VARIABLE .

    SET             shift and go to state 55
    PLUS            reduce using rule 58 (value -> VARIABLE .)
    MINUS           reduce using rule 58 (value -> VARIABLE .)
    TIMES           reduce using rule 58 (value -> VARIABLE .)
    DIVIDE          reduce using rule 58 (value -> VARIABLE .)


state 24

    (34) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 56


state 25

    (68) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE
    (26) class_statement -> CLASS . IDENTIFIER LBRACE class_member_list RBRACE

    IDENTIFIER      shift and go to state 57


state 26

    (77) constant_use -> IDENTIFIER .

    $end            reduce using rule 77 (constant_use -> IDENTIFIER .)
    ECHO            reduce using rule 77 (constant_use -> IDENTIFIER .)
    VARIABLE        reduce using rule 77 (constant_use -> IDENTIFIER .)
    VAR             reduce using rule 77 (constant_use -> IDENTIFIER .)
    CLASS           reduce using rule 77 (constant_use -> IDENTIFIER .)
    FUNCTION        reduce using rule 77 (constant_use -> IDENTIFIER .)
    WHILE           reduce using rule 77 (constant_use -> IDENTIFIER .)
    DEFINE          reduce using rule 77 (constant_use -> IDENTIFIER .)
    CONST           reduce using rule 77 (constant_use -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 77 (constant_use -> IDENTIFIER .)
    TRY             reduce using rule 77 (constant_use -> IDENTIFIER .)
    CATCH           reduce using rule 77 (constant_use -> IDENTIFIER .)
    IF              reduce using rule 77 (constant_use -> IDENTIFIER .)
    INTEGER         reduce using rule 77 (constant_use -> IDENTIFIER .)
    FLOAT           reduce using rule 77 (constant_use -> IDENTIFIER .)
    PUBLIC          reduce using rule 77 (constant_use -> IDENTIFIER .)
    PROTECTED       reduce using rule 77 (constant_use -> IDENTIFIER .)
    PRIVATE         reduce using rule 77 (constant_use -> IDENTIFIER .)
    RBRACE          reduce using rule 77 (constant_use -> IDENTIFIER .)


state 27

    (82) property_declaration -> visibility . VARIABLE

    VARIABLE        shift and go to state 58


state 28

    (27) function_statement -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> FUNCTION . LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    IDENTIFIER      shift and go to state 59
    VARIABLE        shift and go to state 61
    LPAREN          shift and go to state 60


state 29

    (28) while -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 62


state 30

    (75) constant_declaration -> DEFINE . LPAREN STRING COMMA expression RPAREN SEMI

    LPAREN          shift and go to state 63


state 31

    (76) constant_declaration -> CONST . IDENTIFIER SET expression SEMI

    IDENTIFIER      shift and go to state 64


state 32

    (78) try_catch -> TRY . LBRACE statements RBRACE catch_list

    LBRACE          shift and go to state 65


state 33

    (81) catch_item -> CATCH . LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 66


state 34

    (40) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 67


state 35

    (59) value -> INTEGER .

    PLUS            reduce using rule 59 (value -> INTEGER .)
    MINUS           reduce using rule 59 (value -> INTEGER .)
    TIMES           reduce using rule 59 (value -> INTEGER .)
    DIVIDE          reduce using rule 59 (value -> INTEGER .)
    SEMI            reduce using rule 59 (value -> INTEGER .)
    RPAREN          reduce using rule 59 (value -> INTEGER .)
    LT              reduce using rule 59 (value -> INTEGER .)
    GT              reduce using rule 59 (value -> INTEGER .)
    LE              reduce using rule 59 (value -> INTEGER .)
    GE              reduce using rule 59 (value -> INTEGER .)
    EQ              reduce using rule 59 (value -> INTEGER .)
    NE              reduce using rule 59 (value -> INTEGER .)
    RBRACE          reduce using rule 59 (value -> INTEGER .)
    COMMA           reduce using rule 59 (value -> INTEGER .)
    INTEGER         reduce using rule 59 (value -> INTEGER .)
    STRING          reduce using rule 59 (value -> INTEGER .)


state 36

    (60) value -> FLOAT .

    PLUS            reduce using rule 60 (value -> FLOAT .)
    MINUS           reduce using rule 60 (value -> FLOAT .)
    TIMES           reduce using rule 60 (value -> FLOAT .)
    DIVIDE          reduce using rule 60 (value -> FLOAT .)
    SEMI            reduce using rule 60 (value -> FLOAT .)
    RPAREN          reduce using rule 60 (value -> FLOAT .)
    LT              reduce using rule 60 (value -> FLOAT .)
    GT              reduce using rule 60 (value -> FLOAT .)
    LE              reduce using rule 60 (value -> FLOAT .)
    GE              reduce using rule 60 (value -> FLOAT .)
    EQ              reduce using rule 60 (value -> FLOAT .)
    NE              reduce using rule 60 (value -> FLOAT .)
    RBRACE          reduce using rule 60 (value -> FLOAT .)
    COMMA           reduce using rule 60 (value -> FLOAT .)
    INTEGER         reduce using rule 60 (value -> FLOAT .)
    STRING          reduce using rule 60 (value -> FLOAT .)


state 37

    (85) visibility -> PUBLIC .

    VARIABLE        reduce using rule 85 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 85 (visibility -> PUBLIC .)


state 38

    (86) visibility -> PROTECTED .

    VARIABLE        reduce using rule 86 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 86 (visibility -> PROTECTED .)


state 39

    (87) visibility -> PRIVATE .

    VARIABLE        reduce using rule 87 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 87 (visibility -> PRIVATE .)


state 40

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    DEFINE          reduce using rule 1 (statement -> print SEMI .)
    CONST           reduce using rule 1 (statement -> print SEMI .)
    IDENTIFIER      reduce using rule 1 (statement -> print SEMI .)
    TRY             reduce using rule 1 (statement -> print SEMI .)
    CATCH           reduce using rule 1 (statement -> print SEMI .)
    IF              reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    PUBLIC          reduce using rule 1 (statement -> print SEMI .)
    PROTECTED       reduce using rule 1 (statement -> print SEMI .)
    PRIVATE         reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 41

    (2) statement -> declaration SEMI .

    $end            reduce using rule 2 (statement -> declaration SEMI .)
    ECHO            reduce using rule 2 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 2 (statement -> declaration SEMI .)
    VAR             reduce using rule 2 (statement -> declaration SEMI .)
    CLASS           reduce using rule 2 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 2 (statement -> declaration SEMI .)
    WHILE           reduce using rule 2 (statement -> declaration SEMI .)
    DEFINE          reduce using rule 2 (statement -> declaration SEMI .)
    CONST           reduce using rule 2 (statement -> declaration SEMI .)
    IDENTIFIER      reduce using rule 2 (statement -> declaration SEMI .)
    TRY             reduce using rule 2 (statement -> declaration SEMI .)
    CATCH           reduce using rule 2 (statement -> declaration SEMI .)
    IF              reduce using rule 2 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 2 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 2 (statement -> declaration SEMI .)
    PUBLIC          reduce using rule 2 (statement -> declaration SEMI .)
    PROTECTED       reduce using rule 2 (statement -> declaration SEMI .)
    PRIVATE         reduce using rule 2 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 2 (statement -> declaration SEMI .)


state 42

    (3) statement -> input SEMI .

    $end            reduce using rule 3 (statement -> input SEMI .)
    ECHO            reduce using rule 3 (statement -> input SEMI .)
    VARIABLE        reduce using rule 3 (statement -> input SEMI .)
    VAR             reduce using rule 3 (statement -> input SEMI .)
    CLASS           reduce using rule 3 (statement -> input SEMI .)
    FUNCTION        reduce using rule 3 (statement -> input SEMI .)
    WHILE           reduce using rule 3 (statement -> input SEMI .)
    DEFINE          reduce using rule 3 (statement -> input SEMI .)
    CONST           reduce using rule 3 (statement -> input SEMI .)
    IDENTIFIER      reduce using rule 3 (statement -> input SEMI .)
    TRY             reduce using rule 3 (statement -> input SEMI .)
    CATCH           reduce using rule 3 (statement -> input SEMI .)
    IF              reduce using rule 3 (statement -> input SEMI .)
    INTEGER         reduce using rule 3 (statement -> input SEMI .)
    FLOAT           reduce using rule 3 (statement -> input SEMI .)
    PUBLIC          reduce using rule 3 (statement -> input SEMI .)
    PROTECTED       reduce using rule 3 (statement -> input SEMI .)
    PRIVATE         reduce using rule 3 (statement -> input SEMI .)
    RBRACE          reduce using rule 3 (statement -> input SEMI .)


state 43

    (4) statement -> expression SEMI .

    $end            reduce using rule 4 (statement -> expression SEMI .)
    ECHO            reduce using rule 4 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 4 (statement -> expression SEMI .)
    VAR             reduce using rule 4 (statement -> expression SEMI .)
    CLASS           reduce using rule 4 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 4 (statement -> expression SEMI .)
    WHILE           reduce using rule 4 (statement -> expression SEMI .)
    DEFINE          reduce using rule 4 (statement -> expression SEMI .)
    CONST           reduce using rule 4 (statement -> expression SEMI .)
    IDENTIFIER      reduce using rule 4 (statement -> expression SEMI .)
    TRY             reduce using rule 4 (statement -> expression SEMI .)
    CATCH           reduce using rule 4 (statement -> expression SEMI .)
    IF              reduce using rule 4 (statement -> expression SEMI .)
    INTEGER         reduce using rule 4 (statement -> expression SEMI .)
    FLOAT           reduce using rule 4 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 4 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 4 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 4 (statement -> expression SEMI .)
    RBRACE          reduce using rule 4 (statement -> expression SEMI .)


state 44

    (7) statement -> array_declaration SEMI .

    $end            reduce using rule 7 (statement -> array_declaration SEMI .)
    ECHO            reduce using rule 7 (statement -> array_declaration SEMI .)
    VARIABLE        reduce using rule 7 (statement -> array_declaration SEMI .)
    VAR             reduce using rule 7 (statement -> array_declaration SEMI .)
    CLASS           reduce using rule 7 (statement -> array_declaration SEMI .)
    FUNCTION        reduce using rule 7 (statement -> array_declaration SEMI .)
    WHILE           reduce using rule 7 (statement -> array_declaration SEMI .)
    DEFINE          reduce using rule 7 (statement -> array_declaration SEMI .)
    CONST           reduce using rule 7 (statement -> array_declaration SEMI .)
    IDENTIFIER      reduce using rule 7 (statement -> array_declaration SEMI .)
    TRY             reduce using rule 7 (statement -> array_declaration SEMI .)
    CATCH           reduce using rule 7 (statement -> array_declaration SEMI .)
    IF              reduce using rule 7 (statement -> array_declaration SEMI .)
    INTEGER         reduce using rule 7 (statement -> array_declaration SEMI .)
    FLOAT           reduce using rule 7 (statement -> array_declaration SEMI .)
    PUBLIC          reduce using rule 7 (statement -> array_declaration SEMI .)
    PROTECTED       reduce using rule 7 (statement -> array_declaration SEMI .)
    PRIVATE         reduce using rule 7 (statement -> array_declaration SEMI .)
    RBRACE          reduce using rule 7 (statement -> array_declaration SEMI .)


state 45

    (8) statement -> property_declaration SEMI .

    $end            reduce using rule 8 (statement -> property_declaration SEMI .)
    ECHO            reduce using rule 8 (statement -> property_declaration SEMI .)
    VARIABLE        reduce using rule 8 (statement -> property_declaration SEMI .)
    VAR             reduce using rule 8 (statement -> property_declaration SEMI .)
    CLASS           reduce using rule 8 (statement -> property_declaration SEMI .)
    FUNCTION        reduce using rule 8 (statement -> property_declaration SEMI .)
    WHILE           reduce using rule 8 (statement -> property_declaration SEMI .)
    DEFINE          reduce using rule 8 (statement -> property_declaration SEMI .)
    CONST           reduce using rule 8 (statement -> property_declaration SEMI .)
    IDENTIFIER      reduce using rule 8 (statement -> property_declaration SEMI .)
    TRY             reduce using rule 8 (statement -> property_declaration SEMI .)
    CATCH           reduce using rule 8 (statement -> property_declaration SEMI .)
    IF              reduce using rule 8 (statement -> property_declaration SEMI .)
    INTEGER         reduce using rule 8 (statement -> property_declaration SEMI .)
    FLOAT           reduce using rule 8 (statement -> property_declaration SEMI .)
    PUBLIC          reduce using rule 8 (statement -> property_declaration SEMI .)
    PROTECTED       reduce using rule 8 (statement -> property_declaration SEMI .)
    PRIVATE         reduce using rule 8 (statement -> property_declaration SEMI .)
    RBRACE          reduce using rule 8 (statement -> property_declaration SEMI .)


state 46

    (30) print -> ECHO LPAREN . value RPAREN
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    value                          shift and go to state 68

state 47

    (31) print -> ECHO value .

    SEMI            reduce using rule 31 (print -> ECHO value .)


state 48

    (32) print -> ECHO STRING .

    SEMI            reduce using rule 32 (print -> ECHO STRING .)


state 49

    (58) value -> VARIABLE .

    SEMI            reduce using rule 58 (value -> VARIABLE .)
    RPAREN          reduce using rule 58 (value -> VARIABLE .)
    PLUS            reduce using rule 58 (value -> VARIABLE .)
    MINUS           reduce using rule 58 (value -> VARIABLE .)
    TIMES           reduce using rule 58 (value -> VARIABLE .)
    DIVIDE          reduce using rule 58 (value -> VARIABLE .)
    LT              reduce using rule 58 (value -> VARIABLE .)
    GT              reduce using rule 58 (value -> VARIABLE .)
    LE              reduce using rule 58 (value -> VARIABLE .)
    GE              reduce using rule 58 (value -> VARIABLE .)
    EQ              reduce using rule 58 (value -> VARIABLE .)
    NE              reduce using rule 58 (value -> VARIABLE .)
    RBRACE          reduce using rule 58 (value -> VARIABLE .)
    COMMA           reduce using rule 58 (value -> VARIABLE .)
    INTEGER         reduce using rule 58 (value -> VARIABLE .)
    STRING          reduce using rule 58 (value -> VARIABLE .)


state 50

    (65) expression -> value operator . value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    value                          shift and go to state 69

state 51

    (61) operator -> PLUS .

    VARIABLE        reduce using rule 61 (operator -> PLUS .)
    INTEGER         reduce using rule 61 (operator -> PLUS .)
    FLOAT           reduce using rule 61 (operator -> PLUS .)


state 52

    (62) operator -> MINUS .

    VARIABLE        reduce using rule 62 (operator -> MINUS .)
    INTEGER         reduce using rule 62 (operator -> MINUS .)
    FLOAT           reduce using rule 62 (operator -> MINUS .)


state 53

    (63) operator -> TIMES .

    VARIABLE        reduce using rule 63 (operator -> TIMES .)
    INTEGER         reduce using rule 63 (operator -> TIMES .)
    FLOAT           reduce using rule 63 (operator -> TIMES .)


state 54

    (64) operator -> DIVIDE .

    VARIABLE        reduce using rule 64 (operator -> DIVIDE .)
    INTEGER         reduce using rule 64 (operator -> DIVIDE .)
    FLOAT           reduce using rule 64 (operator -> DIVIDE .)


state 55

    (22) declaration -> VARIABLE SET . value
    (23) declaration -> VARIABLE SET . STRING
    (24) declaration -> VARIABLE SET . expression
    (25) declaration -> VARIABLE SET . condition
    (33) input -> VARIABLE SET . READLINE LPAREN RPAREN
    (35) array_declaration -> VARIABLE SET . ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> VARIABLE SET . ARRAY LPAREN empty RPAREN
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (65) expression -> . value operator value
    (45) condition -> . value comparison_operator value

    STRING          shift and go to state 71
    READLINE        shift and go to state 74
    ARRAY           shift and go to state 75
    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    value                          shift and go to state 70
    expression                     shift and go to state 72
    condition                      shift and go to state 73

state 56

    (34) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 76


state 57

    (68) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE
    (26) class_statement -> CLASS IDENTIFIER . LBRACE class_member_list RBRACE

    LBRACE          shift and go to state 77


state 58

    (82) property_declaration -> visibility VARIABLE .

    SEMI            reduce using rule 82 (property_declaration -> visibility VARIABLE .)
    PUBLIC          reduce using rule 82 (property_declaration -> visibility VARIABLE .)
    PROTECTED       reduce using rule 82 (property_declaration -> visibility VARIABLE .)
    PRIVATE         reduce using rule 82 (property_declaration -> visibility VARIABLE .)
    RBRACE          reduce using rule 82 (property_declaration -> visibility VARIABLE .)


state 59

    (27) function_statement -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 78


state 60

    (94) function_anonymous -> FUNCTION LPAREN . parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow
    (88) parameters -> . parameter COMMA parameters
    (89) parameters -> . parameter
    (90) parameter -> . TYPE VARIABLE
    (91) parameter -> . VARIABLE

    VARIABLE        shift and go to state 80
    TYPE            shift and go to state 82

    parameters                     shift and go to state 79
    parameter                      shift and go to state 81

state 61

    (29) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 83


state 62

    (28) while -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (65) expression -> . value operator value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    expression                     shift and go to state 84
    value                          shift and go to state 22

state 63

    (75) constant_declaration -> DEFINE LPAREN . STRING COMMA expression RPAREN SEMI

    STRING          shift and go to state 85


state 64

    (76) constant_declaration -> CONST IDENTIFIER . SET expression SEMI

    SET             shift and go to state 86


state 65

    (78) try_catch -> TRY LBRACE . statements RBRACE catch_list
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 87
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 66

    (81) catch_item -> CATCH LPAREN . EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE

    EXCEPTION       shift and go to state 89


state 67

    (40) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (45) condition -> . value comparison_operator value
    (46) conditions -> . LBRACE condition RBRACE logical_operator conditions
    (47) conditions -> . LBRACE condition RBRACE
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    LBRACE          shift and go to state 91
    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    condition                      shift and go to state 90
    conditions                     shift and go to state 92
    value                          shift and go to state 93

state 68

    (30) print -> ECHO LPAREN value . RPAREN

    RPAREN          shift and go to state 94


state 69

    (65) expression -> value operator value .

    SEMI            reduce using rule 65 (expression -> value operator value .)
    RPAREN          reduce using rule 65 (expression -> value operator value .)


state 70

    (22) declaration -> VARIABLE SET value .
    (65) expression -> value . operator value
    (45) condition -> value . comparison_operator value
    (61) operator -> . PLUS
    (62) operator -> . MINUS
    (63) operator -> . TIMES
    (64) operator -> . DIVIDE
    (52) comparison_operator -> . LT
    (53) comparison_operator -> . GT
    (54) comparison_operator -> . LE
    (55) comparison_operator -> . GE
    (56) comparison_operator -> . EQ
    (57) comparison_operator -> . NE

    SEMI            reduce using rule 22 (declaration -> VARIABLE SET value .)
    PLUS            shift and go to state 51
    MINUS           shift and go to state 52
    TIMES           shift and go to state 53
    DIVIDE          shift and go to state 54
    LT              shift and go to state 96
    GT              shift and go to state 97
    LE              shift and go to state 98
    GE              shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101

    operator                       shift and go to state 50
    comparison_operator            shift and go to state 95

state 71

    (23) declaration -> VARIABLE SET STRING .

    SEMI            reduce using rule 23 (declaration -> VARIABLE SET STRING .)


state 72

    (24) declaration -> VARIABLE SET expression .

    SEMI            reduce using rule 24 (declaration -> VARIABLE SET expression .)


state 73

    (25) declaration -> VARIABLE SET condition .

    SEMI            reduce using rule 25 (declaration -> VARIABLE SET condition .)


state 74

    (33) input -> VARIABLE SET READLINE . LPAREN RPAREN

    LPAREN          shift and go to state 102


state 75

    (35) array_declaration -> VARIABLE SET ARRAY . LPAREN arrayArg RPAREN
    (36) array_declaration -> VARIABLE SET ARRAY . LPAREN empty RPAREN

    LPAREN          shift and go to state 103


state 76

    (34) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 104


state 77

    (68) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (26) class_statement -> CLASS IDENTIFIER LBRACE . class_member_list RBRACE
    (69) class_body -> . class_member_list
    (70) class_member_list -> . class_member class_member_list
    (71) class_member_list -> . class_member
    (72) class_member -> . property_declaration
    (73) class_member -> . method_declaration
    (74) class_member -> . constructor_declaration
    (82) property_declaration -> . visibility VARIABLE
    (83) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (84) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    class_body                     shift and go to state 105
    class_member_list              shift and go to state 106
    class_member                   shift and go to state 107
    property_declaration           shift and go to state 108
    method_declaration             shift and go to state 109
    constructor_declaration        shift and go to state 110
    visibility                     shift and go to state 111

state 78

    (27) function_statement -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (88) parameters -> . parameter COMMA parameters
    (89) parameters -> . parameter
    (90) parameter -> . TYPE VARIABLE
    (91) parameter -> . VARIABLE

    TYPE            shift and go to state 82
    VARIABLE        shift and go to state 113

    parameters                     shift and go to state 112
    parameter                      shift and go to state 81

state 79

    (94) function_anonymous -> FUNCTION LPAREN parameters . RPAREN use_clause_opt LBRACE statements RBRACE

    RPAREN          shift and go to state 114


state 80

    (50) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI
    (51) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow
    (91) parameter -> VARIABLE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 115
    COMMA           reduce using rule 91 (parameter -> VARIABLE .)

  ! RPAREN          [ reduce using rule 91 (parameter -> VARIABLE .) ]


state 81

    (88) parameters -> parameter . COMMA parameters
    (89) parameters -> parameter .

    COMMA           shift and go to state 116
    RPAREN          reduce using rule 89 (parameters -> parameter .)


state 82

    (90) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 117


state 83

    (29) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 118


state 84

    (28) while -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 119


state 85

    (75) constant_declaration -> DEFINE LPAREN STRING . COMMA expression RPAREN SEMI

    COMMA           shift and go to state 120


state 86

    (76) constant_declaration -> CONST IDENTIFIER SET . expression SEMI
    (65) expression -> . value operator value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    expression                     shift and go to state 121
    value                          shift and go to state 22

state 87

    (78) try_catch -> TRY LBRACE statements . RBRACE catch_list

    RBRACE          shift and go to state 122


state 88

    (20) statements -> statement . statements
    (21) statements -> statement .
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    RBRACE          reduce using rule 21 (statements -> statement .)
    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statement                      shift and go to state 88
    statements                     shift and go to state 123
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 89

    (81) catch_item -> CATCH LPAREN EXCEPTION . VARIABLE RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 124


state 90

    (40) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE SEMI
    (42) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE elseif
    (43) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 125


state 91

    (46) conditions -> LBRACE . condition RBRACE logical_operator conditions
    (47) conditions -> LBRACE . condition RBRACE
    (45) condition -> . value comparison_operator value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    condition                      shift and go to state 126
    value                          shift and go to state 93

state 92

    (41) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE SEMI

    RPAREN          shift and go to state 127


state 93

    (45) condition -> value . comparison_operator value
    (52) comparison_operator -> . LT
    (53) comparison_operator -> . GT
    (54) comparison_operator -> . LE
    (55) comparison_operator -> . GE
    (56) comparison_operator -> . EQ
    (57) comparison_operator -> . NE

    LT              shift and go to state 96
    GT              shift and go to state 97
    LE              shift and go to state 98
    GE              shift and go to state 99
    EQ              shift and go to state 100
    NE              shift and go to state 101

    comparison_operator            shift and go to state 95

state 94

    (30) print -> ECHO LPAREN value RPAREN .

    SEMI            reduce using rule 30 (print -> ECHO LPAREN value RPAREN .)


state 95

    (45) condition -> value comparison_operator . value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    value                          shift and go to state 128

state 96

    (52) comparison_operator -> LT .

    VARIABLE        reduce using rule 52 (comparison_operator -> LT .)
    INTEGER         reduce using rule 52 (comparison_operator -> LT .)
    FLOAT           reduce using rule 52 (comparison_operator -> LT .)


state 97

    (53) comparison_operator -> GT .

    VARIABLE        reduce using rule 53 (comparison_operator -> GT .)
    INTEGER         reduce using rule 53 (comparison_operator -> GT .)
    FLOAT           reduce using rule 53 (comparison_operator -> GT .)


state 98

    (54) comparison_operator -> LE .

    VARIABLE        reduce using rule 54 (comparison_operator -> LE .)
    INTEGER         reduce using rule 54 (comparison_operator -> LE .)
    FLOAT           reduce using rule 54 (comparison_operator -> LE .)


state 99

    (55) comparison_operator -> GE .

    VARIABLE        reduce using rule 55 (comparison_operator -> GE .)
    INTEGER         reduce using rule 55 (comparison_operator -> GE .)
    FLOAT           reduce using rule 55 (comparison_operator -> GE .)


state 100

    (56) comparison_operator -> EQ .

    VARIABLE        reduce using rule 56 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 56 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 56 (comparison_operator -> EQ .)


state 101

    (57) comparison_operator -> NE .

    VARIABLE        reduce using rule 57 (comparison_operator -> NE .)
    INTEGER         reduce using rule 57 (comparison_operator -> NE .)
    FLOAT           reduce using rule 57 (comparison_operator -> NE .)


state 102

    (33) input -> VARIABLE SET READLINE LPAREN . RPAREN

    RPAREN          shift and go to state 129


state 103

    (35) array_declaration -> VARIABLE SET ARRAY LPAREN . arrayArg RPAREN
    (36) array_declaration -> VARIABLE SET ARRAY LPAREN . empty RPAREN
    (37) arrayArg -> . index ARROW value
    (38) arrayArg -> . index ARROW value arrayArg
    (39) arrayArg -> . index ARROW value COMMA arrayArg
    (100) empty -> .
    (48) index -> . INTEGER
    (49) index -> . STRING

    RPAREN          reduce using rule 100 (empty -> .)
    INTEGER         shift and go to state 133
    STRING          shift and go to state 134

    arrayArg                       shift and go to state 130
    empty                          shift and go to state 131
    index                          shift and go to state 132

state 104

    (34) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 135


state 105

    (68) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 136


state 106

    (26) class_statement -> CLASS IDENTIFIER LBRACE class_member_list . RBRACE
    (69) class_body -> class_member_list .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 137

  ! RBRACE          [ reduce using rule 69 (class_body -> class_member_list .) ]


state 107

    (70) class_member_list -> class_member . class_member_list
    (71) class_member_list -> class_member .
    (70) class_member_list -> . class_member class_member_list
    (71) class_member_list -> . class_member
    (72) class_member -> . property_declaration
    (73) class_member -> . method_declaration
    (74) class_member -> . constructor_declaration
    (82) property_declaration -> . visibility VARIABLE
    (83) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (84) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    RBRACE          reduce using rule 71 (class_member_list -> class_member .)
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    class_member                   shift and go to state 107
    class_member_list              shift and go to state 138
    property_declaration           shift and go to state 108
    method_declaration             shift and go to state 109
    constructor_declaration        shift and go to state 110
    visibility                     shift and go to state 111

state 108

    (72) class_member -> property_declaration .

    PUBLIC          reduce using rule 72 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 72 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 72 (class_member -> property_declaration .)
    RBRACE          reduce using rule 72 (class_member -> property_declaration .)


state 109

    (73) class_member -> method_declaration .

    PUBLIC          reduce using rule 73 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 73 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 73 (class_member -> method_declaration .)
    RBRACE          reduce using rule 73 (class_member -> method_declaration .)


state 110

    (74) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 74 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 74 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 74 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 74 (class_member -> constructor_declaration .)


state 111

    (82) property_declaration -> visibility . VARIABLE
    (83) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (84) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 58
    FUNCTION        shift and go to state 139


state 112

    (27) function_statement -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 140


state 113

    (91) parameter -> VARIABLE .

    COMMA           reduce using rule 91 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 91 (parameter -> VARIABLE .)


state 114

    (94) function_anonymous -> FUNCTION LPAREN parameters RPAREN . use_clause_opt LBRACE statements RBRACE
    (95) use_clause_opt -> . USE LPAREN variables RPAREN

    USE             shift and go to state 142

    use_clause_opt                 shift and go to state 141

state 115

    (50) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW expression SEMI
    (51) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW function_arrow

    ARROW           shift and go to state 143


state 116

    (88) parameters -> parameter COMMA . parameters
    (88) parameters -> . parameter COMMA parameters
    (89) parameters -> . parameter
    (90) parameter -> . TYPE VARIABLE
    (91) parameter -> . VARIABLE

    TYPE            shift and go to state 82
    VARIABLE        shift and go to state 113

    parameter                      shift and go to state 81
    parameters                     shift and go to state 144

state 117

    (90) parameter -> TYPE VARIABLE .

    COMMA           reduce using rule 90 (parameter -> TYPE VARIABLE .)
    RPAREN          reduce using rule 90 (parameter -> TYPE VARIABLE .)


state 118

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 145


state 119

    (28) while -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 146


state 120

    (75) constant_declaration -> DEFINE LPAREN STRING COMMA . expression RPAREN SEMI
    (65) expression -> . value operator value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    expression                     shift and go to state 147
    value                          shift and go to state 22

state 121

    (76) constant_declaration -> CONST IDENTIFIER SET expression . SEMI

    SEMI            shift and go to state 148


state 122

    (78) try_catch -> TRY LBRACE statements RBRACE . catch_list
    (79) catch_list -> . catch_item catch_list
    (80) catch_list -> . empty
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (100) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 33
    $end            reduce using rule 100 (empty -> .)
    ECHO            reduce using rule 100 (empty -> .)
    VARIABLE        reduce using rule 100 (empty -> .)
    VAR             reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    DEFINE          reduce using rule 100 (empty -> .)
    CONST           reduce using rule 100 (empty -> .)
    IDENTIFIER      reduce using rule 100 (empty -> .)
    TRY             reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    INTEGER         reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    PUBLIC          reduce using rule 100 (empty -> .)
    PROTECTED       reduce using rule 100 (empty -> .)
    PRIVATE         reduce using rule 100 (empty -> .)
    RBRACE          reduce using rule 100 (empty -> .)

  ! CATCH           [ reduce using rule 100 (empty -> .) ]

    catch_list                     shift and go to state 149
    catch_item                     shift and go to state 150
    empty                          shift and go to state 151

state 123

    (20) statements -> statement statements .

    RBRACE          reduce using rule 20 (statements -> statement statements .)


state 124

    (81) catch_item -> CATCH LPAREN EXCEPTION VARIABLE . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 152


state 125

    (40) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE SEMI
    (42) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE elseif
    (43) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 153


state 126

    (46) conditions -> LBRACE condition . RBRACE logical_operator conditions
    (47) conditions -> LBRACE condition . RBRACE

    RBRACE          shift and go to state 154


state 127

    (41) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 155


state 128

    (45) condition -> value comparison_operator value .

    SEMI            reduce using rule 45 (condition -> value comparison_operator value .)
    RPAREN          reduce using rule 45 (condition -> value comparison_operator value .)
    RBRACE          reduce using rule 45 (condition -> value comparison_operator value .)


state 129

    (33) input -> VARIABLE SET READLINE LPAREN RPAREN .

    SEMI            reduce using rule 33 (input -> VARIABLE SET READLINE LPAREN RPAREN .)


state 130

    (35) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg . RPAREN

    RPAREN          shift and go to state 156


state 131

    (36) array_declaration -> VARIABLE SET ARRAY LPAREN empty . RPAREN

    RPAREN          shift and go to state 157


state 132

    (37) arrayArg -> index . ARROW value
    (38) arrayArg -> index . ARROW value arrayArg
    (39) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 158


state 133

    (48) index -> INTEGER .

    ARROW           reduce using rule 48 (index -> INTEGER .)


state 134

    (49) index -> STRING .

    ARROW           reduce using rule 49 (index -> STRING .)


state 135

    (34) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 159


state 136

    (68) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    $end            reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    DEFINE          reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CONST           reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IDENTIFIER      reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    TRY             reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CATCH           reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROTECTED       reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 68 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 137

    (26) class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .

    $end            reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    ECHO            reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    VARIABLE        reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    VAR             reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    CLASS           reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    FUNCTION        reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    WHILE           reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    DEFINE          reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    CONST           reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    IDENTIFIER      reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    TRY             reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    CATCH           reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    IF              reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    INTEGER         reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    FLOAT           reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    PUBLIC          reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    PROTECTED       reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    PRIVATE         reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    RBRACE          reduce using rule 26 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)


state 138

    (70) class_member_list -> class_member class_member_list .

    RBRACE          reduce using rule 70 (class_member_list -> class_member class_member_list .)


state 139

    (83) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (84) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 160
    CONSTRUCT       shift and go to state 161


state 140

    (27) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 162


state 141

    (94) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 163


state 142

    (95) use_clause_opt -> USE . LPAREN variables RPAREN

    LPAREN          shift and go to state 164


state 143

    (50) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . expression SEMI
    (51) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . function_arrow
    (65) expression -> . value operator value
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    FUNCTION        shift and go to state 165
    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    expression                     shift and go to state 166
    function_arrow                 shift and go to state 167
    value                          shift and go to state 22

state 144

    (88) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 88 (parameters -> parameter COMMA parameters .)


state 145

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 168
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 146

    (28) while -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    expression                     shift and go to state 5
    statements                     shift and go to state 169
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 147

    (75) constant_declaration -> DEFINE LPAREN STRING COMMA expression . RPAREN SEMI

    RPAREN          shift and go to state 170


state 148

    (76) constant_declaration -> CONST IDENTIFIER SET expression SEMI .

    $end            reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    ECHO            reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VARIABLE        reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    VAR             reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CLASS           reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FUNCTION        reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    WHILE           reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    DEFINE          reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CONST           reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IDENTIFIER      reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    TRY             reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    CATCH           reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    IF              reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    INTEGER         reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    FLOAT           reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PUBLIC          reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PROTECTED       reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    PRIVATE         reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)
    RBRACE          reduce using rule 76 (constant_declaration -> CONST IDENTIFIER SET expression SEMI .)


state 149

    (78) try_catch -> TRY LBRACE statements RBRACE catch_list .

    $end            reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    ECHO            reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VARIABLE        reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    VAR             reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CLASS           reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FUNCTION        reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    WHILE           reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    DEFINE          reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CONST           reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IDENTIFIER      reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    TRY             reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    CATCH           reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    IF              reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    INTEGER         reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    FLOAT           reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PUBLIC          reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PROTECTED       reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    PRIVATE         reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)
    RBRACE          reduce using rule 78 (try_catch -> TRY LBRACE statements RBRACE catch_list .)


state 150

    (79) catch_list -> catch_item . catch_list
    (79) catch_list -> . catch_item catch_list
    (80) catch_list -> . empty
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (100) empty -> .

  ! shift/reduce conflict for CATCH resolved as shift
    CATCH           shift and go to state 33
    $end            reduce using rule 100 (empty -> .)
    ECHO            reduce using rule 100 (empty -> .)
    VARIABLE        reduce using rule 100 (empty -> .)
    VAR             reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    DEFINE          reduce using rule 100 (empty -> .)
    CONST           reduce using rule 100 (empty -> .)
    IDENTIFIER      reduce using rule 100 (empty -> .)
    TRY             reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    INTEGER         reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    PUBLIC          reduce using rule 100 (empty -> .)
    PROTECTED       reduce using rule 100 (empty -> .)
    PRIVATE         reduce using rule 100 (empty -> .)
    RBRACE          reduce using rule 100 (empty -> .)

  ! CATCH           [ reduce using rule 100 (empty -> .) ]

    catch_item                     shift and go to state 150
    catch_list                     shift and go to state 171
    empty                          shift and go to state 151

state 151

    (80) catch_list -> empty .

    $end            reduce using rule 80 (catch_list -> empty .)
    ECHO            reduce using rule 80 (catch_list -> empty .)
    VARIABLE        reduce using rule 80 (catch_list -> empty .)
    VAR             reduce using rule 80 (catch_list -> empty .)
    CLASS           reduce using rule 80 (catch_list -> empty .)
    FUNCTION        reduce using rule 80 (catch_list -> empty .)
    WHILE           reduce using rule 80 (catch_list -> empty .)
    DEFINE          reduce using rule 80 (catch_list -> empty .)
    CONST           reduce using rule 80 (catch_list -> empty .)
    IDENTIFIER      reduce using rule 80 (catch_list -> empty .)
    TRY             reduce using rule 80 (catch_list -> empty .)
    CATCH           reduce using rule 80 (catch_list -> empty .)
    IF              reduce using rule 80 (catch_list -> empty .)
    INTEGER         reduce using rule 80 (catch_list -> empty .)
    FLOAT           reduce using rule 80 (catch_list -> empty .)
    PUBLIC          reduce using rule 80 (catch_list -> empty .)
    PROTECTED       reduce using rule 80 (catch_list -> empty .)
    PRIVATE         reduce using rule 80 (catch_list -> empty .)
    RBRACE          reduce using rule 80 (catch_list -> empty .)


state 152

    (81) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 172


state 153

    (40) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE SEMI
    (42) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE elseif
    (43) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 173
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 154

    (46) conditions -> LBRACE condition RBRACE . logical_operator conditions
    (47) conditions -> LBRACE condition RBRACE .
    (98) logical_operator -> . AND
    (99) logical_operator -> . OR

    RPAREN          reduce using rule 47 (conditions -> LBRACE condition RBRACE .)
    AND             shift and go to state 175
    OR              shift and go to state 176

    logical_operator               shift and go to state 174

state 155

    (41) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE SEMI
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 177
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 156

    (35) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .

    SEMI            reduce using rule 35 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)


state 157

    (36) array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .

    SEMI            reduce using rule 36 (array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .)


state 158

    (37) arrayArg -> index ARROW . value
    (38) arrayArg -> index ARROW . value arrayArg
    (39) arrayArg -> index ARROW . value COMMA arrayArg
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    value                          shift and go to state 178

state 159

    (34) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 179


state 160

    (83) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 180


state 161

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 181


state 162

    (27) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 182
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 163

    (94) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 183
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 164

    (95) use_clause_opt -> USE LPAREN . variables RPAREN
    (96) variables -> . VARIABLE COMMA variables
    (97) variables -> . VARIABLE

    VARIABLE        shift and go to state 185

    variables                      shift and go to state 184

state 165

    (50) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    LPAREN          shift and go to state 186


state 166

    (50) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression . SEMI

    SEMI            shift and go to state 187


state 167

    (51) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .

    $end            reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    ECHO            reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VARIABLE        reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VAR             reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CLASS           reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FUNCTION        reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    WHILE           reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    DEFINE          reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CONST           reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IDENTIFIER      reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    TRY             reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CATCH           reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IF              reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    INTEGER         reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FLOAT           reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PUBLIC          reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PROTECTED       reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PRIVATE         reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    RBRACE          reduce using rule 51 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)


state 168

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 188


state 169

    (28) while -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 189


state 170

    (75) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN . SEMI

    SEMI            shift and go to state 190


state 171

    (79) catch_list -> catch_item catch_list .

    $end            reduce using rule 79 (catch_list -> catch_item catch_list .)
    ECHO            reduce using rule 79 (catch_list -> catch_item catch_list .)
    VARIABLE        reduce using rule 79 (catch_list -> catch_item catch_list .)
    VAR             reduce using rule 79 (catch_list -> catch_item catch_list .)
    CLASS           reduce using rule 79 (catch_list -> catch_item catch_list .)
    FUNCTION        reduce using rule 79 (catch_list -> catch_item catch_list .)
    WHILE           reduce using rule 79 (catch_list -> catch_item catch_list .)
    DEFINE          reduce using rule 79 (catch_list -> catch_item catch_list .)
    CONST           reduce using rule 79 (catch_list -> catch_item catch_list .)
    IDENTIFIER      reduce using rule 79 (catch_list -> catch_item catch_list .)
    TRY             reduce using rule 79 (catch_list -> catch_item catch_list .)
    CATCH           reduce using rule 79 (catch_list -> catch_item catch_list .)
    IF              reduce using rule 79 (catch_list -> catch_item catch_list .)
    INTEGER         reduce using rule 79 (catch_list -> catch_item catch_list .)
    FLOAT           reduce using rule 79 (catch_list -> catch_item catch_list .)
    PUBLIC          reduce using rule 79 (catch_list -> catch_item catch_list .)
    PROTECTED       reduce using rule 79 (catch_list -> catch_item catch_list .)
    PRIVATE         reduce using rule 79 (catch_list -> catch_item catch_list .)
    RBRACE          reduce using rule 79 (catch_list -> catch_item catch_list .)


state 172

    (81) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 191
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 173

    (40) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE SEMI
    (42) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE elseif
    (43) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 192


state 174

    (46) conditions -> LBRACE condition RBRACE logical_operator . conditions
    (46) conditions -> . LBRACE condition RBRACE logical_operator conditions
    (47) conditions -> . LBRACE condition RBRACE

    LBRACE          shift and go to state 91

    conditions                     shift and go to state 193

state 175

    (98) logical_operator -> AND .

    LBRACE          reduce using rule 98 (logical_operator -> AND .)


state 176

    (99) logical_operator -> OR .

    LBRACE          reduce using rule 99 (logical_operator -> OR .)


state 177

    (41) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 194


state 178

    (37) arrayArg -> index ARROW value .
    (38) arrayArg -> index ARROW value . arrayArg
    (39) arrayArg -> index ARROW value . COMMA arrayArg
    (37) arrayArg -> . index ARROW value
    (38) arrayArg -> . index ARROW value arrayArg
    (39) arrayArg -> . index ARROW value COMMA arrayArg
    (48) index -> . INTEGER
    (49) index -> . STRING

    RPAREN          reduce using rule 37 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 196
    INTEGER         shift and go to state 133
    STRING          shift and go to state 134

    index                          shift and go to state 132
    arrayArg                       shift and go to state 195

state 179

    (34) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 197


state 180

    (83) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (88) parameters -> . parameter COMMA parameters
    (89) parameters -> . parameter
    (90) parameter -> . TYPE VARIABLE
    (91) parameter -> . VARIABLE

    TYPE            shift and go to state 82
    VARIABLE        shift and go to state 113

    parameters                     shift and go to state 198
    parameter                      shift and go to state 81

state 181

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameters RPAREN LBRACE statements RBRACE
    (88) parameters -> . parameter COMMA parameters
    (89) parameters -> . parameter
    (90) parameter -> . TYPE VARIABLE
    (91) parameter -> . VARIABLE

    TYPE            shift and go to state 82
    VARIABLE        shift and go to state 113

    parameters                     shift and go to state 199
    parameter                      shift and go to state 81

state 182

    (27) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 200


state 183

    (94) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 201


state 184

    (95) use_clause_opt -> USE LPAREN variables . RPAREN

    RPAREN          shift and go to state 202


state 185

    (96) variables -> VARIABLE . COMMA variables
    (97) variables -> VARIABLE .

    COMMA           shift and go to state 203
    RPAREN          reduce using rule 97 (variables -> VARIABLE .)


state 186

    (50) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 204


state 187

    (50) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .

    $end            reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    ECHO            reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VARIABLE        reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VAR             reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CLASS           reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FUNCTION        reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    WHILE           reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    DEFINE          reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CONST           reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IDENTIFIER      reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    TRY             reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CATCH           reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IF              reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    INTEGER         reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FLOAT           reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PUBLIC          reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PROTECTED       reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PRIVATE         reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    RBRACE          reduce using rule 50 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)


state 188

    (29) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 29 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 189

    (28) while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 28 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 190

    (75) constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .

    $end            reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    ECHO            reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VARIABLE        reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    VAR             reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CLASS           reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FUNCTION        reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    WHILE           reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    DEFINE          reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CONST           reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IDENTIFIER      reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    TRY             reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    CATCH           reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    IF              reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    INTEGER         reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    FLOAT           reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PUBLIC          reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PROTECTED       reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    PRIVATE         reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)
    RBRACE          reduce using rule 75 (constant_declaration -> DEFINE LPAREN STRING COMMA expression RPAREN SEMI .)


state 191

    (81) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 205


state 192

    (40) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . SEMI
    (42) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . elseif
    (43) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (92) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
    (93) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
    (44) else -> . ELSE LBRACE statements RBRACE SEMI

    SEMI            shift and go to state 206
    ELSEIF          shift and go to state 209
    ELSE            shift and go to state 210

    elseif                         shift and go to state 207
    else                           shift and go to state 208

state 193

    (46) conditions -> LBRACE condition RBRACE logical_operator conditions .

    RPAREN          reduce using rule 46 (conditions -> LBRACE condition RBRACE logical_operator conditions .)


state 194

    (41) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 211


state 195

    (38) arrayArg -> index ARROW value arrayArg .

    RPAREN          reduce using rule 38 (arrayArg -> index ARROW value arrayArg .)


state 196

    (39) arrayArg -> index ARROW value COMMA . arrayArg
    (37) arrayArg -> . index ARROW value
    (38) arrayArg -> . index ARROW value arrayArg
    (39) arrayArg -> . index ARROW value COMMA arrayArg
    (48) index -> . INTEGER
    (49) index -> . STRING

    INTEGER         shift and go to state 133
    STRING          shift and go to state 134

    index                          shift and go to state 132
    arrayArg                       shift and go to state 212

state 197

    (34) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    DEFINE          reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CONST           reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IDENTIFIER      reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    TRY             reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CATCH           reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IF              reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 34 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 198

    (83) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 213


state 199

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 214


state 200

    (27) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 27 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 201

    (94) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    DEFINE          reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CONST           reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    TRY             reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CATCH           reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IF              reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 94 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)


state 202

    (95) use_clause_opt -> USE LPAREN variables RPAREN .

    LBRACE          reduce using rule 95 (use_clause_opt -> USE LPAREN variables RPAREN .)


state 203

    (96) variables -> VARIABLE COMMA . variables
    (96) variables -> . VARIABLE COMMA variables
    (97) variables -> . VARIABLE

    VARIABLE        shift and go to state 185

    variables                      shift and go to state 215

state 204

    (50) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI
    (51) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow

    RPAREN          shift and go to state 115


state 205

    (81) catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 81 (catch_item -> CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE .)


state 206

    (40) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    DEFINE          reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CONST           reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    IDENTIFIER      reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    TRY             reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CATCH           reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 40 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)


state 207

    (42) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    DEFINE          reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CONST           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IDENTIFIER      reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    TRY             reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CATCH           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 42 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)


state 208

    (43) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 43 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)


state 209

    (92) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE
    (93) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 216


state 210

    (44) else -> ELSE . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 217


state 211

    (41) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    DEFINE          reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CONST           reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    IDENTIFIER      reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    TRY             reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CATCH           reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 41 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)


state 212

    (39) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 39 (arrayArg -> index ARROW value COMMA arrayArg .)


state 213

    (83) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 218


state 214

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 219


state 215

    (96) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 96 (variables -> VARIABLE COMMA variables .)


state 216

    (92) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE
    (93) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (45) condition -> . value comparison_operator value
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT

    VARIABLE        shift and go to state 49
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36

    condition                      shift and go to state 220
    value                          shift and go to state 93

state 217

    (44) else -> ELSE LBRACE . statements RBRACE SEMI
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 221
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 218

    (83) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    visibility                     shift and go to state 27
    statements                     shift and go to state 222
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22

state 219

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE . statements RBRACE
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    visibility                     shift and go to state 27
    statements                     shift and go to state 223
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22

state 220

    (92) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE
    (93) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 224


state 221

    (44) else -> ELSE LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 225


state 222

    (83) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 226


state 223

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 227


state 224

    (92) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE
    (93) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 228


state 225

    (44) else -> ELSE LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 229


state 226

    (83) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 83 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 83 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 83 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 83 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 227

    (84) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 84 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 84 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 84 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 84 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 228

    (92) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE
    (93) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (20) statements -> . statement statements
    (21) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . constant_declaration
    (16) statement -> . constant_use
    (17) statement -> . try_catch
    (18) statement -> . catch_item
    (19) statement -> . if
    (30) print -> . ECHO LPAREN value RPAREN
    (31) print -> . ECHO value
    (32) print -> . ECHO STRING
    (22) declaration -> . VARIABLE SET value
    (23) declaration -> . VARIABLE SET STRING
    (24) declaration -> . VARIABLE SET expression
    (25) declaration -> . VARIABLE SET condition
    (33) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (65) expression -> . value operator value
    (34) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (68) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (35) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (36) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (82) property_declaration -> . visibility VARIABLE
    (27) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (29) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (94) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (50) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (51) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (26) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (28) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (75) constant_declaration -> . DEFINE LPAREN STRING COMMA expression RPAREN SEMI
    (76) constant_declaration -> . CONST IDENTIFIER SET expression SEMI
    (77) constant_use -> . IDENTIFIER
    (78) try_catch -> . TRY LBRACE statements RBRACE catch_list
    (81) catch_item -> . CATCH LPAREN EXCEPTION VARIABLE RPAREN LBRACE statements RBRACE
    (40) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (41) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (42) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (43) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (58) value -> . VARIABLE
    (59) value -> . INTEGER
    (60) value -> . FLOAT
    (85) visibility -> . PUBLIC
    (86) visibility -> . PROTECTED
    (87) visibility -> . PRIVATE

    ECHO            shift and go to state 21
    VARIABLE        shift and go to state 23
    VAR             shift and go to state 24
    CLASS           shift and go to state 25
    FUNCTION        shift and go to state 28
    WHILE           shift and go to state 29
    DEFINE          shift and go to state 30
    CONST           shift and go to state 31
    IDENTIFIER      shift and go to state 26
    TRY             shift and go to state 32
    CATCH           shift and go to state 33
    IF              shift and go to state 34
    INTEGER         shift and go to state 35
    FLOAT           shift and go to state 36
    PUBLIC          shift and go to state 37
    PROTECTED       shift and go to state 38
    PRIVATE         shift and go to state 39

    statements                     shift and go to state 230
    statement                      shift and go to state 88
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    constant_declaration           shift and go to state 16
    constant_use                   shift and go to state 17
    try_catch                      shift and go to state 18
    catch_item                     shift and go to state 19
    if                             shift and go to state 20
    value                          shift and go to state 22
    visibility                     shift and go to state 27

state 229

    (44) else -> ELSE LBRACE statements RBRACE SEMI .

    $end            reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    DEFINE          reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CONST           reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    IDENTIFIER      reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    TRY             reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CATCH           reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 44 (else -> ELSE LBRACE statements RBRACE SEMI .)


state 230

    (92) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE
    (93) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 231


state 231

    (92) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .
    (93) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (44) else -> . ELSE LBRACE statements RBRACE SEMI

    $end            reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    DEFINE          reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    CONST           reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    IDENTIFIER      reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    TRY             reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    CATCH           reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 92 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 210

    else                           shift and go to state 232

state 232

    (93) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    DEFINE          reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CONST           reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IDENTIFIER      reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    TRY             reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CATCH           reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 93 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 106 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 122 resolved as shift
WARNING: shift/reduce conflict for CATCH in state 150 resolved as shift
