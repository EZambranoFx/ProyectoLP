Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK
    CASE
    CATCH
    COMMENT
    CONST
    CONTINUE
    DEFAULT
    DO
    DOLLAR
    ERROR
    EXP
    EXTENDS
    FINALLY
    FOR
    FOREACH
    IDENTICAL
    IMPLEMENTS
    LBRACKET
    MOD
    NEWLINE
    NOT
    NOT_IDENTICAL
    PHP_CLOSE
    PHP_OPEN
    RBRACKET
    RETURN
    STATIC
    SWITCH
    THROW
    TRY

Grammar

Rule 0     S' -> statement
Rule 1     statement -> print SEMI
Rule 2     statement -> declaration SEMI
Rule 3     statement -> input SEMI
Rule 4     statement -> expression SEMI
Rule 5     statement -> object_declaration
Rule 6     statement -> class_declaration
Rule 7     statement -> array_declaration SEMI
Rule 8     statement -> property_declaration SEMI
Rule 9     statement -> function_statement
Rule 10    statement -> function_variable
Rule 11    statement -> function_anonymous
Rule 12    statement -> function_arrow
Rule 13    statement -> class_statement
Rule 14    statement -> while
Rule 15    statement -> if
Rule 16    statements -> statement statements
Rule 17    statements -> statement
Rule 18    declaration -> VARIABLE SET value
Rule 19    declaration -> VARIABLE SET expression
Rule 20    declaration -> VARIABLE SET condition
Rule 21    class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE
Rule 22    function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 23    while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE
Rule 24    function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
Rule 25    print -> ECHO LPAREN expressions RPAREN
Rule 26    print -> ECHO expressions
Rule 27    input -> VARIABLE SET READLINE LPAREN RPAREN
Rule 28    object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
Rule 29    array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN
Rule 30    array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN
Rule 31    arrayArg -> index ARROW value
Rule 32    arrayArg -> index ARROW value arrayArg
Rule 33    arrayArg -> index ARROW value COMMA arrayArg
Rule 34    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
Rule 35    if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
Rule 36    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
Rule 37    if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 38    else -> ELSE LBRACE statements RBRACE SEMI
Rule 39    condition -> expression comparison_operator expression
Rule 40    conditions -> LBRACE condition RBRACE logical_operator conditions
Rule 41    conditions -> LBRACE condition RBRACE
Rule 42    index -> INTEGER
Rule 43    index -> STRING
Rule 44    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
Rule 45    function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
Rule 46    comparison_operator -> LT
Rule 47    comparison_operator -> GT
Rule 48    comparison_operator -> LE
Rule 49    comparison_operator -> GE
Rule 50    comparison_operator -> EQ
Rule 51    comparison_operator -> NE
Rule 52    value -> VARIABLE
Rule 53    value -> INTEGER
Rule 54    value -> FLOAT
Rule 55    operator -> PLUS
Rule 56    operator -> MINUS
Rule 57    operator -> TIMES
Rule 58    operator -> DIVIDE
Rule 59    expression -> value operator value
Rule 60    expressions -> expression COMMA expressions
Rule 61    expressions -> expression
Rule 62    class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE
Rule 63    class_body -> class_member_list
Rule 64    class_member_list -> class_member class_member_list
Rule 65    class_member_list -> class_member
Rule 66    class_member -> property_declaration
Rule 67    class_member -> method_declaration
Rule 68    class_member -> constructor_declaration
Rule 69    property_declaration -> visibility VARIABLE
Rule 70    method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 71    constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
Rule 72    visibility -> PUBLIC
Rule 73    visibility -> PROTECTED
Rule 74    visibility -> PRIVATE
Rule 75    parameters -> parameter COMMA parameters
Rule 76    parameters -> parameter
Rule 77    parameter -> TYPE VARIABLE
Rule 78    parameter -> VARIABLE
Rule 79    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
Rule 80    elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
Rule 81    function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
Rule 82    use_clause_opt -> USE LPAREN variables RPAREN
Rule 83    variables -> VARIABLE COMMA variables
Rule 84    variables -> VARIABLE
Rule 85    logical_operator -> AND
Rule 86    logical_operator -> OR
Rule 87    empty -> <empty>

Terminals, with rules where they appear

AND                  : 85
ARRAY                : 29 30
ARROW                : 31 32 33 44 45
BREAK                : 
CASE                 : 
CATCH                : 
CLASS                : 21 28 62
COMMA                : 33 60 75 83
COMMENT              : 
CONST                : 
CONSTRUCT            : 71
CONTINUE             : 
DEFAULT              : 
DIVIDE               : 58
DO                   : 
DOLLAR               : 
ECHO                 : 25 26
ELSE                 : 38
ELSEIF               : 79 80
EQ                   : 50
ERROR                : 
EXP                  : 
EXTENDS              : 
FINALLY              : 
FLOAT                : 54
FOR                  : 
FOREACH              : 
FUNCTION             : 22 24 44 45 70 71 81
GE                   : 49
GT                   : 47
IDENTICAL            : 
IDENTIFIER           : 21 22 62 70
IF                   : 34 35 36 37
IMPLEMENTS           : 
INTEGER              : 42 53
LBRACE               : 21 22 23 24 34 35 36 37 38 40 41 62 70 71 79 80 81
LBRACKET             : 
LE                   : 48
LPAREN               : 22 23 24 25 27 28 29 30 34 35 36 37 44 45 70 71 79 80 81 82
LT                   : 46
MINUS                : 56
MOD                  : 
NE                   : 51
NEW                  : 28
NEWLINE              : 
NOT                  : 
NOT_IDENTICAL        : 
OR                   : 86
PHP_CLOSE            : 
PHP_OPEN             : 
PLUS                 : 55
PRIVATE              : 74
PROTECTED            : 73
PUBLIC               : 72
RBRACE               : 21 22 23 24 34 35 36 37 38 40 41 62 70 71 79 80 81
RBRACKET             : 
READLINE             : 27
RETURN               : 
RPAREN               : 22 23 24 25 27 28 29 30 34 35 36 37 44 45 70 71 79 80 81 82
SEMI                 : 1 2 3 4 7 8 28 34 35 38 44
SET                  : 18 19 20 27 28 29 30
STATIC               : 
STRING               : 43
SWITCH               : 
THROW                : 
TIMES                : 57
TRY                  : 
TYPE                 : 77
USE                  : 82
VAR                  : 28
VARIABLE             : 18 19 20 24 27 28 29 30 44 45 52 69 77 78 83 84
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

arrayArg             : 29 32 33
array_declaration    : 7
class_body           : 62
class_declaration    : 6
class_member         : 64 65
class_member_list    : 21 63 64
class_statement      : 13
comparison_operator  : 39
condition            : 20 34 36 37 40 41 79 80
conditions           : 35 40
constructor_declaration : 68
declaration          : 2
else                 : 37 80
elseif               : 36
empty                : 30
expression           : 4 19 23 39 39 44 60 61
expressions          : 25 26 60
function_anonymous   : 11
function_arrow       : 12 45
function_statement   : 9
function_variable    : 10
if                   : 15
index                : 31 32 33
input                : 3
logical_operator     : 40
method_declaration   : 67
object_declaration   : 5
operator             : 59
parameter            : 75 76
parameters           : 22 70 71 75 81
print                : 1
property_declaration : 8 66
statement            : 16 17 0
statements           : 16 22 23 24 34 35 36 37 38 70 71 79 80 81
use_clause_opt       : 81
value                : 18 31 32 33 59 59
variables            : 82 83
visibility           : 69 70 71
while                : 14

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statement                      shift and go to state 1
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 1

    (0) S' -> statement .



state 2

    (1) statement -> print . SEMI

    SEMI            shift and go to state 31


state 3

    (2) statement -> declaration . SEMI

    SEMI            shift and go to state 32


state 4

    (3) statement -> input . SEMI

    SEMI            shift and go to state 33


state 5

    (4) statement -> expression . SEMI

    SEMI            shift and go to state 34


state 6

    (5) statement -> object_declaration .

    $end            reduce using rule 5 (statement -> object_declaration .)
    ECHO            reduce using rule 5 (statement -> object_declaration .)
    VARIABLE        reduce using rule 5 (statement -> object_declaration .)
    VAR             reduce using rule 5 (statement -> object_declaration .)
    CLASS           reduce using rule 5 (statement -> object_declaration .)
    FUNCTION        reduce using rule 5 (statement -> object_declaration .)
    WHILE           reduce using rule 5 (statement -> object_declaration .)
    IF              reduce using rule 5 (statement -> object_declaration .)
    INTEGER         reduce using rule 5 (statement -> object_declaration .)
    FLOAT           reduce using rule 5 (statement -> object_declaration .)
    PUBLIC          reduce using rule 5 (statement -> object_declaration .)
    PROTECTED       reduce using rule 5 (statement -> object_declaration .)
    PRIVATE         reduce using rule 5 (statement -> object_declaration .)
    RBRACE          reduce using rule 5 (statement -> object_declaration .)


state 7

    (6) statement -> class_declaration .

    $end            reduce using rule 6 (statement -> class_declaration .)
    ECHO            reduce using rule 6 (statement -> class_declaration .)
    VARIABLE        reduce using rule 6 (statement -> class_declaration .)
    VAR             reduce using rule 6 (statement -> class_declaration .)
    CLASS           reduce using rule 6 (statement -> class_declaration .)
    FUNCTION        reduce using rule 6 (statement -> class_declaration .)
    WHILE           reduce using rule 6 (statement -> class_declaration .)
    IF              reduce using rule 6 (statement -> class_declaration .)
    INTEGER         reduce using rule 6 (statement -> class_declaration .)
    FLOAT           reduce using rule 6 (statement -> class_declaration .)
    PUBLIC          reduce using rule 6 (statement -> class_declaration .)
    PROTECTED       reduce using rule 6 (statement -> class_declaration .)
    PRIVATE         reduce using rule 6 (statement -> class_declaration .)
    RBRACE          reduce using rule 6 (statement -> class_declaration .)


state 8

    (7) statement -> array_declaration . SEMI

    SEMI            shift and go to state 35


state 9

    (8) statement -> property_declaration . SEMI

    SEMI            shift and go to state 36


state 10

    (9) statement -> function_statement .

    $end            reduce using rule 9 (statement -> function_statement .)
    ECHO            reduce using rule 9 (statement -> function_statement .)
    VARIABLE        reduce using rule 9 (statement -> function_statement .)
    VAR             reduce using rule 9 (statement -> function_statement .)
    CLASS           reduce using rule 9 (statement -> function_statement .)
    FUNCTION        reduce using rule 9 (statement -> function_statement .)
    WHILE           reduce using rule 9 (statement -> function_statement .)
    IF              reduce using rule 9 (statement -> function_statement .)
    INTEGER         reduce using rule 9 (statement -> function_statement .)
    FLOAT           reduce using rule 9 (statement -> function_statement .)
    PUBLIC          reduce using rule 9 (statement -> function_statement .)
    PROTECTED       reduce using rule 9 (statement -> function_statement .)
    PRIVATE         reduce using rule 9 (statement -> function_statement .)
    RBRACE          reduce using rule 9 (statement -> function_statement .)


state 11

    (10) statement -> function_variable .

    $end            reduce using rule 10 (statement -> function_variable .)
    ECHO            reduce using rule 10 (statement -> function_variable .)
    VARIABLE        reduce using rule 10 (statement -> function_variable .)
    VAR             reduce using rule 10 (statement -> function_variable .)
    CLASS           reduce using rule 10 (statement -> function_variable .)
    FUNCTION        reduce using rule 10 (statement -> function_variable .)
    WHILE           reduce using rule 10 (statement -> function_variable .)
    IF              reduce using rule 10 (statement -> function_variable .)
    INTEGER         reduce using rule 10 (statement -> function_variable .)
    FLOAT           reduce using rule 10 (statement -> function_variable .)
    PUBLIC          reduce using rule 10 (statement -> function_variable .)
    PROTECTED       reduce using rule 10 (statement -> function_variable .)
    PRIVATE         reduce using rule 10 (statement -> function_variable .)
    RBRACE          reduce using rule 10 (statement -> function_variable .)


state 12

    (11) statement -> function_anonymous .

    $end            reduce using rule 11 (statement -> function_anonymous .)
    ECHO            reduce using rule 11 (statement -> function_anonymous .)
    VARIABLE        reduce using rule 11 (statement -> function_anonymous .)
    VAR             reduce using rule 11 (statement -> function_anonymous .)
    CLASS           reduce using rule 11 (statement -> function_anonymous .)
    FUNCTION        reduce using rule 11 (statement -> function_anonymous .)
    WHILE           reduce using rule 11 (statement -> function_anonymous .)
    IF              reduce using rule 11 (statement -> function_anonymous .)
    INTEGER         reduce using rule 11 (statement -> function_anonymous .)
    FLOAT           reduce using rule 11 (statement -> function_anonymous .)
    PUBLIC          reduce using rule 11 (statement -> function_anonymous .)
    PROTECTED       reduce using rule 11 (statement -> function_anonymous .)
    PRIVATE         reduce using rule 11 (statement -> function_anonymous .)
    RBRACE          reduce using rule 11 (statement -> function_anonymous .)


state 13

    (12) statement -> function_arrow .

    $end            reduce using rule 12 (statement -> function_arrow .)
    ECHO            reduce using rule 12 (statement -> function_arrow .)
    VARIABLE        reduce using rule 12 (statement -> function_arrow .)
    VAR             reduce using rule 12 (statement -> function_arrow .)
    CLASS           reduce using rule 12 (statement -> function_arrow .)
    FUNCTION        reduce using rule 12 (statement -> function_arrow .)
    WHILE           reduce using rule 12 (statement -> function_arrow .)
    IF              reduce using rule 12 (statement -> function_arrow .)
    INTEGER         reduce using rule 12 (statement -> function_arrow .)
    FLOAT           reduce using rule 12 (statement -> function_arrow .)
    PUBLIC          reduce using rule 12 (statement -> function_arrow .)
    PROTECTED       reduce using rule 12 (statement -> function_arrow .)
    PRIVATE         reduce using rule 12 (statement -> function_arrow .)
    RBRACE          reduce using rule 12 (statement -> function_arrow .)


state 14

    (13) statement -> class_statement .

    $end            reduce using rule 13 (statement -> class_statement .)
    ECHO            reduce using rule 13 (statement -> class_statement .)
    VARIABLE        reduce using rule 13 (statement -> class_statement .)
    VAR             reduce using rule 13 (statement -> class_statement .)
    CLASS           reduce using rule 13 (statement -> class_statement .)
    FUNCTION        reduce using rule 13 (statement -> class_statement .)
    WHILE           reduce using rule 13 (statement -> class_statement .)
    IF              reduce using rule 13 (statement -> class_statement .)
    INTEGER         reduce using rule 13 (statement -> class_statement .)
    FLOAT           reduce using rule 13 (statement -> class_statement .)
    PUBLIC          reduce using rule 13 (statement -> class_statement .)
    PROTECTED       reduce using rule 13 (statement -> class_statement .)
    PRIVATE         reduce using rule 13 (statement -> class_statement .)
    RBRACE          reduce using rule 13 (statement -> class_statement .)


state 15

    (14) statement -> while .

    $end            reduce using rule 14 (statement -> while .)
    ECHO            reduce using rule 14 (statement -> while .)
    VARIABLE        reduce using rule 14 (statement -> while .)
    VAR             reduce using rule 14 (statement -> while .)
    CLASS           reduce using rule 14 (statement -> while .)
    FUNCTION        reduce using rule 14 (statement -> while .)
    WHILE           reduce using rule 14 (statement -> while .)
    IF              reduce using rule 14 (statement -> while .)
    INTEGER         reduce using rule 14 (statement -> while .)
    FLOAT           reduce using rule 14 (statement -> while .)
    PUBLIC          reduce using rule 14 (statement -> while .)
    PROTECTED       reduce using rule 14 (statement -> while .)
    PRIVATE         reduce using rule 14 (statement -> while .)
    RBRACE          reduce using rule 14 (statement -> while .)


state 16

    (15) statement -> if .

    $end            reduce using rule 15 (statement -> if .)
    ECHO            reduce using rule 15 (statement -> if .)
    VARIABLE        reduce using rule 15 (statement -> if .)
    VAR             reduce using rule 15 (statement -> if .)
    CLASS           reduce using rule 15 (statement -> if .)
    FUNCTION        reduce using rule 15 (statement -> if .)
    WHILE           reduce using rule 15 (statement -> if .)
    IF              reduce using rule 15 (statement -> if .)
    INTEGER         reduce using rule 15 (statement -> if .)
    FLOAT           reduce using rule 15 (statement -> if .)
    PUBLIC          reduce using rule 15 (statement -> if .)
    PROTECTED       reduce using rule 15 (statement -> if .)
    PRIVATE         reduce using rule 15 (statement -> if .)
    RBRACE          reduce using rule 15 (statement -> if .)


state 17

    (25) print -> ECHO . LPAREN expressions RPAREN
    (26) print -> ECHO . expressions
    (60) expressions -> . expression COMMA expressions
    (61) expressions -> . expression
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    LPAREN          shift and go to state 37
    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expressions                    shift and go to state 38
    expression                     shift and go to state 39
    value                          shift and go to state 19

state 18

    (18) declaration -> VARIABLE . SET value
    (19) declaration -> VARIABLE . SET expression
    (20) declaration -> VARIABLE . SET condition
    (27) input -> VARIABLE . SET READLINE LPAREN RPAREN
    (29) array_declaration -> VARIABLE . SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> VARIABLE . SET ARRAY LPAREN empty RPAREN
    (52) value -> VARIABLE .

    SET             shift and go to state 41
    PLUS            reduce using rule 52 (value -> VARIABLE .)
    MINUS           reduce using rule 52 (value -> VARIABLE .)
    TIMES           reduce using rule 52 (value -> VARIABLE .)
    DIVIDE          reduce using rule 52 (value -> VARIABLE .)


state 19

    (59) expression -> value . operator value
    (55) operator -> . PLUS
    (56) operator -> . MINUS
    (57) operator -> . TIMES
    (58) operator -> . DIVIDE

    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46

    operator                       shift and go to state 42

state 20

    (28) object_declaration -> VAR . VARIABLE SET NEW CLASS LPAREN RPAREN SEMI

    VARIABLE        shift and go to state 47


state 21

    (62) class_declaration -> CLASS . IDENTIFIER LBRACE class_body RBRACE
    (21) class_statement -> CLASS . IDENTIFIER LBRACE class_member_list RBRACE

    IDENTIFIER      shift and go to state 48


state 22

    (69) property_declaration -> visibility . VARIABLE

    VARIABLE        shift and go to state 49


state 23

    (22) function_statement -> FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> FUNCTION . VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> FUNCTION . LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    IDENTIFIER      shift and go to state 50
    VARIABLE        shift and go to state 52
    LPAREN          shift and go to state 51


state 24

    (23) while -> WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 53


state 25

    (34) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> IF . LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> IF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 54


state 26

    (53) value -> INTEGER .

    PLUS            reduce using rule 53 (value -> INTEGER .)
    MINUS           reduce using rule 53 (value -> INTEGER .)
    TIMES           reduce using rule 53 (value -> INTEGER .)
    DIVIDE          reduce using rule 53 (value -> INTEGER .)
    SEMI            reduce using rule 53 (value -> INTEGER .)
    COMMA           reduce using rule 53 (value -> INTEGER .)
    RPAREN          reduce using rule 53 (value -> INTEGER .)
    LT              reduce using rule 53 (value -> INTEGER .)
    GT              reduce using rule 53 (value -> INTEGER .)
    LE              reduce using rule 53 (value -> INTEGER .)
    GE              reduce using rule 53 (value -> INTEGER .)
    EQ              reduce using rule 53 (value -> INTEGER .)
    NE              reduce using rule 53 (value -> INTEGER .)
    RBRACE          reduce using rule 53 (value -> INTEGER .)
    INTEGER         reduce using rule 53 (value -> INTEGER .)
    STRING          reduce using rule 53 (value -> INTEGER .)


state 27

    (54) value -> FLOAT .

    PLUS            reduce using rule 54 (value -> FLOAT .)
    MINUS           reduce using rule 54 (value -> FLOAT .)
    TIMES           reduce using rule 54 (value -> FLOAT .)
    DIVIDE          reduce using rule 54 (value -> FLOAT .)
    SEMI            reduce using rule 54 (value -> FLOAT .)
    COMMA           reduce using rule 54 (value -> FLOAT .)
    RPAREN          reduce using rule 54 (value -> FLOAT .)
    LT              reduce using rule 54 (value -> FLOAT .)
    GT              reduce using rule 54 (value -> FLOAT .)
    LE              reduce using rule 54 (value -> FLOAT .)
    GE              reduce using rule 54 (value -> FLOAT .)
    EQ              reduce using rule 54 (value -> FLOAT .)
    NE              reduce using rule 54 (value -> FLOAT .)
    RBRACE          reduce using rule 54 (value -> FLOAT .)
    INTEGER         reduce using rule 54 (value -> FLOAT .)
    STRING          reduce using rule 54 (value -> FLOAT .)


state 28

    (72) visibility -> PUBLIC .

    VARIABLE        reduce using rule 72 (visibility -> PUBLIC .)
    FUNCTION        reduce using rule 72 (visibility -> PUBLIC .)


state 29

    (73) visibility -> PROTECTED .

    VARIABLE        reduce using rule 73 (visibility -> PROTECTED .)
    FUNCTION        reduce using rule 73 (visibility -> PROTECTED .)


state 30

    (74) visibility -> PRIVATE .

    VARIABLE        reduce using rule 74 (visibility -> PRIVATE .)
    FUNCTION        reduce using rule 74 (visibility -> PRIVATE .)


state 31

    (1) statement -> print SEMI .

    $end            reduce using rule 1 (statement -> print SEMI .)
    ECHO            reduce using rule 1 (statement -> print SEMI .)
    VARIABLE        reduce using rule 1 (statement -> print SEMI .)
    VAR             reduce using rule 1 (statement -> print SEMI .)
    CLASS           reduce using rule 1 (statement -> print SEMI .)
    FUNCTION        reduce using rule 1 (statement -> print SEMI .)
    WHILE           reduce using rule 1 (statement -> print SEMI .)
    IF              reduce using rule 1 (statement -> print SEMI .)
    INTEGER         reduce using rule 1 (statement -> print SEMI .)
    FLOAT           reduce using rule 1 (statement -> print SEMI .)
    PUBLIC          reduce using rule 1 (statement -> print SEMI .)
    PROTECTED       reduce using rule 1 (statement -> print SEMI .)
    PRIVATE         reduce using rule 1 (statement -> print SEMI .)
    RBRACE          reduce using rule 1 (statement -> print SEMI .)


state 32

    (2) statement -> declaration SEMI .

    $end            reduce using rule 2 (statement -> declaration SEMI .)
    ECHO            reduce using rule 2 (statement -> declaration SEMI .)
    VARIABLE        reduce using rule 2 (statement -> declaration SEMI .)
    VAR             reduce using rule 2 (statement -> declaration SEMI .)
    CLASS           reduce using rule 2 (statement -> declaration SEMI .)
    FUNCTION        reduce using rule 2 (statement -> declaration SEMI .)
    WHILE           reduce using rule 2 (statement -> declaration SEMI .)
    IF              reduce using rule 2 (statement -> declaration SEMI .)
    INTEGER         reduce using rule 2 (statement -> declaration SEMI .)
    FLOAT           reduce using rule 2 (statement -> declaration SEMI .)
    PUBLIC          reduce using rule 2 (statement -> declaration SEMI .)
    PROTECTED       reduce using rule 2 (statement -> declaration SEMI .)
    PRIVATE         reduce using rule 2 (statement -> declaration SEMI .)
    RBRACE          reduce using rule 2 (statement -> declaration SEMI .)


state 33

    (3) statement -> input SEMI .

    $end            reduce using rule 3 (statement -> input SEMI .)
    ECHO            reduce using rule 3 (statement -> input SEMI .)
    VARIABLE        reduce using rule 3 (statement -> input SEMI .)
    VAR             reduce using rule 3 (statement -> input SEMI .)
    CLASS           reduce using rule 3 (statement -> input SEMI .)
    FUNCTION        reduce using rule 3 (statement -> input SEMI .)
    WHILE           reduce using rule 3 (statement -> input SEMI .)
    IF              reduce using rule 3 (statement -> input SEMI .)
    INTEGER         reduce using rule 3 (statement -> input SEMI .)
    FLOAT           reduce using rule 3 (statement -> input SEMI .)
    PUBLIC          reduce using rule 3 (statement -> input SEMI .)
    PROTECTED       reduce using rule 3 (statement -> input SEMI .)
    PRIVATE         reduce using rule 3 (statement -> input SEMI .)
    RBRACE          reduce using rule 3 (statement -> input SEMI .)


state 34

    (4) statement -> expression SEMI .

    $end            reduce using rule 4 (statement -> expression SEMI .)
    ECHO            reduce using rule 4 (statement -> expression SEMI .)
    VARIABLE        reduce using rule 4 (statement -> expression SEMI .)
    VAR             reduce using rule 4 (statement -> expression SEMI .)
    CLASS           reduce using rule 4 (statement -> expression SEMI .)
    FUNCTION        reduce using rule 4 (statement -> expression SEMI .)
    WHILE           reduce using rule 4 (statement -> expression SEMI .)
    IF              reduce using rule 4 (statement -> expression SEMI .)
    INTEGER         reduce using rule 4 (statement -> expression SEMI .)
    FLOAT           reduce using rule 4 (statement -> expression SEMI .)
    PUBLIC          reduce using rule 4 (statement -> expression SEMI .)
    PROTECTED       reduce using rule 4 (statement -> expression SEMI .)
    PRIVATE         reduce using rule 4 (statement -> expression SEMI .)
    RBRACE          reduce using rule 4 (statement -> expression SEMI .)


state 35

    (7) statement -> array_declaration SEMI .

    $end            reduce using rule 7 (statement -> array_declaration SEMI .)
    ECHO            reduce using rule 7 (statement -> array_declaration SEMI .)
    VARIABLE        reduce using rule 7 (statement -> array_declaration SEMI .)
    VAR             reduce using rule 7 (statement -> array_declaration SEMI .)
    CLASS           reduce using rule 7 (statement -> array_declaration SEMI .)
    FUNCTION        reduce using rule 7 (statement -> array_declaration SEMI .)
    WHILE           reduce using rule 7 (statement -> array_declaration SEMI .)
    IF              reduce using rule 7 (statement -> array_declaration SEMI .)
    INTEGER         reduce using rule 7 (statement -> array_declaration SEMI .)
    FLOAT           reduce using rule 7 (statement -> array_declaration SEMI .)
    PUBLIC          reduce using rule 7 (statement -> array_declaration SEMI .)
    PROTECTED       reduce using rule 7 (statement -> array_declaration SEMI .)
    PRIVATE         reduce using rule 7 (statement -> array_declaration SEMI .)
    RBRACE          reduce using rule 7 (statement -> array_declaration SEMI .)


state 36

    (8) statement -> property_declaration SEMI .

    $end            reduce using rule 8 (statement -> property_declaration SEMI .)
    ECHO            reduce using rule 8 (statement -> property_declaration SEMI .)
    VARIABLE        reduce using rule 8 (statement -> property_declaration SEMI .)
    VAR             reduce using rule 8 (statement -> property_declaration SEMI .)
    CLASS           reduce using rule 8 (statement -> property_declaration SEMI .)
    FUNCTION        reduce using rule 8 (statement -> property_declaration SEMI .)
    WHILE           reduce using rule 8 (statement -> property_declaration SEMI .)
    IF              reduce using rule 8 (statement -> property_declaration SEMI .)
    INTEGER         reduce using rule 8 (statement -> property_declaration SEMI .)
    FLOAT           reduce using rule 8 (statement -> property_declaration SEMI .)
    PUBLIC          reduce using rule 8 (statement -> property_declaration SEMI .)
    PROTECTED       reduce using rule 8 (statement -> property_declaration SEMI .)
    PRIVATE         reduce using rule 8 (statement -> property_declaration SEMI .)
    RBRACE          reduce using rule 8 (statement -> property_declaration SEMI .)


state 37

    (25) print -> ECHO LPAREN . expressions RPAREN
    (60) expressions -> . expression COMMA expressions
    (61) expressions -> . expression
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expressions                    shift and go to state 55
    expression                     shift and go to state 39
    value                          shift and go to state 19

state 38

    (26) print -> ECHO expressions .

    SEMI            reduce using rule 26 (print -> ECHO expressions .)


state 39

    (60) expressions -> expression . COMMA expressions
    (61) expressions -> expression .

    COMMA           shift and go to state 56
    SEMI            reduce using rule 61 (expressions -> expression .)
    RPAREN          reduce using rule 61 (expressions -> expression .)


state 40

    (52) value -> VARIABLE .

    PLUS            reduce using rule 52 (value -> VARIABLE .)
    MINUS           reduce using rule 52 (value -> VARIABLE .)
    TIMES           reduce using rule 52 (value -> VARIABLE .)
    DIVIDE          reduce using rule 52 (value -> VARIABLE .)
    SEMI            reduce using rule 52 (value -> VARIABLE .)
    COMMA           reduce using rule 52 (value -> VARIABLE .)
    RPAREN          reduce using rule 52 (value -> VARIABLE .)
    LT              reduce using rule 52 (value -> VARIABLE .)
    GT              reduce using rule 52 (value -> VARIABLE .)
    LE              reduce using rule 52 (value -> VARIABLE .)
    GE              reduce using rule 52 (value -> VARIABLE .)
    EQ              reduce using rule 52 (value -> VARIABLE .)
    NE              reduce using rule 52 (value -> VARIABLE .)
    RBRACE          reduce using rule 52 (value -> VARIABLE .)
    INTEGER         reduce using rule 52 (value -> VARIABLE .)
    STRING          reduce using rule 52 (value -> VARIABLE .)


state 41

    (18) declaration -> VARIABLE SET . value
    (19) declaration -> VARIABLE SET . expression
    (20) declaration -> VARIABLE SET . condition
    (27) input -> VARIABLE SET . READLINE LPAREN RPAREN
    (29) array_declaration -> VARIABLE SET . ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> VARIABLE SET . ARRAY LPAREN empty RPAREN
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (59) expression -> . value operator value
    (39) condition -> . expression comparison_operator expression

    READLINE        shift and go to state 60
    ARRAY           shift and go to state 61
    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    value                          shift and go to state 57
    expression                     shift and go to state 58
    condition                      shift and go to state 59

state 42

    (59) expression -> value operator . value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    value                          shift and go to state 62

state 43

    (55) operator -> PLUS .

    VARIABLE        reduce using rule 55 (operator -> PLUS .)
    INTEGER         reduce using rule 55 (operator -> PLUS .)
    FLOAT           reduce using rule 55 (operator -> PLUS .)


state 44

    (56) operator -> MINUS .

    VARIABLE        reduce using rule 56 (operator -> MINUS .)
    INTEGER         reduce using rule 56 (operator -> MINUS .)
    FLOAT           reduce using rule 56 (operator -> MINUS .)


state 45

    (57) operator -> TIMES .

    VARIABLE        reduce using rule 57 (operator -> TIMES .)
    INTEGER         reduce using rule 57 (operator -> TIMES .)
    FLOAT           reduce using rule 57 (operator -> TIMES .)


state 46

    (58) operator -> DIVIDE .

    VARIABLE        reduce using rule 58 (operator -> DIVIDE .)
    INTEGER         reduce using rule 58 (operator -> DIVIDE .)
    FLOAT           reduce using rule 58 (operator -> DIVIDE .)


state 47

    (28) object_declaration -> VAR VARIABLE . SET NEW CLASS LPAREN RPAREN SEMI

    SET             shift and go to state 63


state 48

    (62) class_declaration -> CLASS IDENTIFIER . LBRACE class_body RBRACE
    (21) class_statement -> CLASS IDENTIFIER . LBRACE class_member_list RBRACE

    LBRACE          shift and go to state 64


state 49

    (69) property_declaration -> visibility VARIABLE .

    SEMI            reduce using rule 69 (property_declaration -> visibility VARIABLE .)
    PUBLIC          reduce using rule 69 (property_declaration -> visibility VARIABLE .)
    PROTECTED       reduce using rule 69 (property_declaration -> visibility VARIABLE .)
    PRIVATE         reduce using rule 69 (property_declaration -> visibility VARIABLE .)
    RBRACE          reduce using rule 69 (property_declaration -> visibility VARIABLE .)


state 50

    (22) function_statement -> FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 65


state 51

    (81) function_anonymous -> FUNCTION LPAREN . parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow
    (75) parameters -> . parameter COMMA parameters
    (76) parameters -> . parameter
    (77) parameter -> . TYPE VARIABLE
    (78) parameter -> . VARIABLE

    VARIABLE        shift and go to state 67
    TYPE            shift and go to state 69

    parameters                     shift and go to state 66
    parameter                      shift and go to state 68

state 52

    (24) function_variable -> FUNCTION VARIABLE . LPAREN RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 70


state 53

    (23) while -> WHILE LPAREN . expression RPAREN LBRACE statements RBRACE
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 71
    value                          shift and go to state 19

state 54

    (34) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> IF LPAREN . conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> IF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (39) condition -> . expression comparison_operator expression
    (40) conditions -> . LBRACE condition RBRACE logical_operator conditions
    (41) conditions -> . LBRACE condition RBRACE
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    LBRACE          shift and go to state 73
    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    condition                      shift and go to state 72
    conditions                     shift and go to state 74
    expression                     shift and go to state 75
    value                          shift and go to state 19

state 55

    (25) print -> ECHO LPAREN expressions . RPAREN

    RPAREN          shift and go to state 76


state 56

    (60) expressions -> expression COMMA . expressions
    (60) expressions -> . expression COMMA expressions
    (61) expressions -> . expression
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 39
    expressions                    shift and go to state 77
    value                          shift and go to state 19

state 57

    (18) declaration -> VARIABLE SET value .
    (59) expression -> value . operator value
    (55) operator -> . PLUS
    (56) operator -> . MINUS
    (57) operator -> . TIMES
    (58) operator -> . DIVIDE

    SEMI            reduce using rule 18 (declaration -> VARIABLE SET value .)
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    TIMES           shift and go to state 45
    DIVIDE          shift and go to state 46

    operator                       shift and go to state 42

state 58

    (19) declaration -> VARIABLE SET expression .
    (39) condition -> expression . comparison_operator expression
    (46) comparison_operator -> . LT
    (47) comparison_operator -> . GT
    (48) comparison_operator -> . LE
    (49) comparison_operator -> . GE
    (50) comparison_operator -> . EQ
    (51) comparison_operator -> . NE

    SEMI            reduce using rule 19 (declaration -> VARIABLE SET expression .)
    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84

    comparison_operator            shift and go to state 78

state 59

    (20) declaration -> VARIABLE SET condition .

    SEMI            reduce using rule 20 (declaration -> VARIABLE SET condition .)


state 60

    (27) input -> VARIABLE SET READLINE . LPAREN RPAREN

    LPAREN          shift and go to state 85


state 61

    (29) array_declaration -> VARIABLE SET ARRAY . LPAREN arrayArg RPAREN
    (30) array_declaration -> VARIABLE SET ARRAY . LPAREN empty RPAREN

    LPAREN          shift and go to state 86


state 62

    (59) expression -> value operator value .

    SEMI            reduce using rule 59 (expression -> value operator value .)
    COMMA           reduce using rule 59 (expression -> value operator value .)
    RPAREN          reduce using rule 59 (expression -> value operator value .)
    LT              reduce using rule 59 (expression -> value operator value .)
    GT              reduce using rule 59 (expression -> value operator value .)
    LE              reduce using rule 59 (expression -> value operator value .)
    GE              reduce using rule 59 (expression -> value operator value .)
    EQ              reduce using rule 59 (expression -> value operator value .)
    NE              reduce using rule 59 (expression -> value operator value .)
    RBRACE          reduce using rule 59 (expression -> value operator value .)


state 63

    (28) object_declaration -> VAR VARIABLE SET . NEW CLASS LPAREN RPAREN SEMI

    NEW             shift and go to state 87


state 64

    (62) class_declaration -> CLASS IDENTIFIER LBRACE . class_body RBRACE
    (21) class_statement -> CLASS IDENTIFIER LBRACE . class_member_list RBRACE
    (63) class_body -> . class_member_list
    (64) class_member_list -> . class_member class_member_list
    (65) class_member_list -> . class_member
    (66) class_member -> . property_declaration
    (67) class_member -> . method_declaration
    (68) class_member -> . constructor_declaration
    (69) property_declaration -> . visibility VARIABLE
    (70) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (71) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    class_body                     shift and go to state 88
    class_member_list              shift and go to state 89
    class_member                   shift and go to state 90
    property_declaration           shift and go to state 91
    method_declaration             shift and go to state 92
    constructor_declaration        shift and go to state 93
    visibility                     shift and go to state 94

state 65

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (75) parameters -> . parameter COMMA parameters
    (76) parameters -> . parameter
    (77) parameter -> . TYPE VARIABLE
    (78) parameter -> . VARIABLE

    TYPE            shift and go to state 69
    VARIABLE        shift and go to state 96

    parameters                     shift and go to state 95
    parameter                      shift and go to state 68

state 66

    (81) function_anonymous -> FUNCTION LPAREN parameters . RPAREN use_clause_opt LBRACE statements RBRACE

    RPAREN          shift and go to state 97


state 67

    (44) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI
    (45) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow
    (78) parameter -> VARIABLE .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 98
    COMMA           reduce using rule 78 (parameter -> VARIABLE .)

  ! RPAREN          [ reduce using rule 78 (parameter -> VARIABLE .) ]


state 68

    (75) parameters -> parameter . COMMA parameters
    (76) parameters -> parameter .

    COMMA           shift and go to state 99
    RPAREN          reduce using rule 76 (parameters -> parameter .)


state 69

    (77) parameter -> TYPE . VARIABLE

    VARIABLE        shift and go to state 100


state 70

    (24) function_variable -> FUNCTION VARIABLE LPAREN . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 101


state 71

    (23) while -> WHILE LPAREN expression . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 102


state 72

    (34) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE SEMI
    (36) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE elseif
    (37) if -> IF LPAREN condition . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 103


state 73

    (40) conditions -> LBRACE . condition RBRACE logical_operator conditions
    (41) conditions -> LBRACE . condition RBRACE
    (39) condition -> . expression comparison_operator expression
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    condition                      shift and go to state 104
    expression                     shift and go to state 75
    value                          shift and go to state 19

state 74

    (35) if -> IF LPAREN conditions . RPAREN LBRACE statements RBRACE SEMI

    RPAREN          shift and go to state 105


state 75

    (39) condition -> expression . comparison_operator expression
    (46) comparison_operator -> . LT
    (47) comparison_operator -> . GT
    (48) comparison_operator -> . LE
    (49) comparison_operator -> . GE
    (50) comparison_operator -> . EQ
    (51) comparison_operator -> . NE

    LT              shift and go to state 79
    GT              shift and go to state 80
    LE              shift and go to state 81
    GE              shift and go to state 82
    EQ              shift and go to state 83
    NE              shift and go to state 84

    comparison_operator            shift and go to state 78

state 76

    (25) print -> ECHO LPAREN expressions RPAREN .

    SEMI            reduce using rule 25 (print -> ECHO LPAREN expressions RPAREN .)


state 77

    (60) expressions -> expression COMMA expressions .

    SEMI            reduce using rule 60 (expressions -> expression COMMA expressions .)
    RPAREN          reduce using rule 60 (expressions -> expression COMMA expressions .)


state 78

    (39) condition -> expression comparison_operator . expression
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 106
    value                          shift and go to state 19

state 79

    (46) comparison_operator -> LT .

    VARIABLE        reduce using rule 46 (comparison_operator -> LT .)
    INTEGER         reduce using rule 46 (comparison_operator -> LT .)
    FLOAT           reduce using rule 46 (comparison_operator -> LT .)


state 80

    (47) comparison_operator -> GT .

    VARIABLE        reduce using rule 47 (comparison_operator -> GT .)
    INTEGER         reduce using rule 47 (comparison_operator -> GT .)
    FLOAT           reduce using rule 47 (comparison_operator -> GT .)


state 81

    (48) comparison_operator -> LE .

    VARIABLE        reduce using rule 48 (comparison_operator -> LE .)
    INTEGER         reduce using rule 48 (comparison_operator -> LE .)
    FLOAT           reduce using rule 48 (comparison_operator -> LE .)


state 82

    (49) comparison_operator -> GE .

    VARIABLE        reduce using rule 49 (comparison_operator -> GE .)
    INTEGER         reduce using rule 49 (comparison_operator -> GE .)
    FLOAT           reduce using rule 49 (comparison_operator -> GE .)


state 83

    (50) comparison_operator -> EQ .

    VARIABLE        reduce using rule 50 (comparison_operator -> EQ .)
    INTEGER         reduce using rule 50 (comparison_operator -> EQ .)
    FLOAT           reduce using rule 50 (comparison_operator -> EQ .)


state 84

    (51) comparison_operator -> NE .

    VARIABLE        reduce using rule 51 (comparison_operator -> NE .)
    INTEGER         reduce using rule 51 (comparison_operator -> NE .)
    FLOAT           reduce using rule 51 (comparison_operator -> NE .)


state 85

    (27) input -> VARIABLE SET READLINE LPAREN . RPAREN

    RPAREN          shift and go to state 107


state 86

    (29) array_declaration -> VARIABLE SET ARRAY LPAREN . arrayArg RPAREN
    (30) array_declaration -> VARIABLE SET ARRAY LPAREN . empty RPAREN
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (87) empty -> .
    (42) index -> . INTEGER
    (43) index -> . STRING

    RPAREN          reduce using rule 87 (empty -> .)
    INTEGER         shift and go to state 111
    STRING          shift and go to state 112

    arrayArg                       shift and go to state 108
    empty                          shift and go to state 109
    index                          shift and go to state 110

state 87

    (28) object_declaration -> VAR VARIABLE SET NEW . CLASS LPAREN RPAREN SEMI

    CLASS           shift and go to state 113


state 88

    (62) class_declaration -> CLASS IDENTIFIER LBRACE class_body . RBRACE

    RBRACE          shift and go to state 114


state 89

    (21) class_statement -> CLASS IDENTIFIER LBRACE class_member_list . RBRACE
    (63) class_body -> class_member_list .

  ! shift/reduce conflict for RBRACE resolved as shift
    RBRACE          shift and go to state 115

  ! RBRACE          [ reduce using rule 63 (class_body -> class_member_list .) ]


state 90

    (64) class_member_list -> class_member . class_member_list
    (65) class_member_list -> class_member .
    (64) class_member_list -> . class_member class_member_list
    (65) class_member_list -> . class_member
    (66) class_member -> . property_declaration
    (67) class_member -> . method_declaration
    (68) class_member -> . constructor_declaration
    (69) property_declaration -> . visibility VARIABLE
    (70) method_declaration -> . visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (71) constructor_declaration -> . visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    RBRACE          reduce using rule 65 (class_member_list -> class_member .)
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    class_member                   shift and go to state 90
    class_member_list              shift and go to state 116
    property_declaration           shift and go to state 91
    method_declaration             shift and go to state 92
    constructor_declaration        shift and go to state 93
    visibility                     shift and go to state 94

state 91

    (66) class_member -> property_declaration .

    PUBLIC          reduce using rule 66 (class_member -> property_declaration .)
    PROTECTED       reduce using rule 66 (class_member -> property_declaration .)
    PRIVATE         reduce using rule 66 (class_member -> property_declaration .)
    RBRACE          reduce using rule 66 (class_member -> property_declaration .)


state 92

    (67) class_member -> method_declaration .

    PUBLIC          reduce using rule 67 (class_member -> method_declaration .)
    PROTECTED       reduce using rule 67 (class_member -> method_declaration .)
    PRIVATE         reduce using rule 67 (class_member -> method_declaration .)
    RBRACE          reduce using rule 67 (class_member -> method_declaration .)


state 93

    (68) class_member -> constructor_declaration .

    PUBLIC          reduce using rule 68 (class_member -> constructor_declaration .)
    PROTECTED       reduce using rule 68 (class_member -> constructor_declaration .)
    PRIVATE         reduce using rule 68 (class_member -> constructor_declaration .)
    RBRACE          reduce using rule 68 (class_member -> constructor_declaration .)


state 94

    (69) property_declaration -> visibility . VARIABLE
    (70) method_declaration -> visibility . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (71) constructor_declaration -> visibility . FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    VARIABLE        shift and go to state 49
    FUNCTION        shift and go to state 117


state 95

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 118


state 96

    (78) parameter -> VARIABLE .

    COMMA           reduce using rule 78 (parameter -> VARIABLE .)
    RPAREN          reduce using rule 78 (parameter -> VARIABLE .)


state 97

    (81) function_anonymous -> FUNCTION LPAREN parameters RPAREN . use_clause_opt LBRACE statements RBRACE
    (82) use_clause_opt -> . USE LPAREN variables RPAREN

    USE             shift and go to state 120

    use_clause_opt                 shift and go to state 119

state 98

    (44) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW expression SEMI
    (45) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN . ARROW function_arrow

    ARROW           shift and go to state 121


state 99

    (75) parameters -> parameter COMMA . parameters
    (75) parameters -> . parameter COMMA parameters
    (76) parameters -> . parameter
    (77) parameter -> . TYPE VARIABLE
    (78) parameter -> . VARIABLE

    TYPE            shift and go to state 69
    VARIABLE        shift and go to state 96

    parameter                      shift and go to state 68
    parameters                     shift and go to state 122

state 100

    (77) parameter -> TYPE VARIABLE .

    COMMA           reduce using rule 77 (parameter -> TYPE VARIABLE .)
    RPAREN          reduce using rule 77 (parameter -> TYPE VARIABLE .)


state 101

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 123


state 102

    (23) while -> WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 124


state 103

    (34) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE SEMI
    (36) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE elseif
    (37) if -> IF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 125


state 104

    (40) conditions -> LBRACE condition . RBRACE logical_operator conditions
    (41) conditions -> LBRACE condition . RBRACE

    RBRACE          shift and go to state 126


state 105

    (35) if -> IF LPAREN conditions RPAREN . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 127


state 106

    (39) condition -> expression comparison_operator expression .

    SEMI            reduce using rule 39 (condition -> expression comparison_operator expression .)
    RPAREN          reduce using rule 39 (condition -> expression comparison_operator expression .)
    RBRACE          reduce using rule 39 (condition -> expression comparison_operator expression .)


state 107

    (27) input -> VARIABLE SET READLINE LPAREN RPAREN .

    SEMI            reduce using rule 27 (input -> VARIABLE SET READLINE LPAREN RPAREN .)


state 108

    (29) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg . RPAREN

    RPAREN          shift and go to state 128


state 109

    (30) array_declaration -> VARIABLE SET ARRAY LPAREN empty . RPAREN

    RPAREN          shift and go to state 129


state 110

    (31) arrayArg -> index . ARROW value
    (32) arrayArg -> index . ARROW value arrayArg
    (33) arrayArg -> index . ARROW value COMMA arrayArg

    ARROW           shift and go to state 130


state 111

    (42) index -> INTEGER .

    ARROW           reduce using rule 42 (index -> INTEGER .)


state 112

    (43) index -> STRING .

    ARROW           reduce using rule 43 (index -> STRING .)


state 113

    (28) object_declaration -> VAR VARIABLE SET NEW CLASS . LPAREN RPAREN SEMI

    LPAREN          shift and go to state 131


state 114

    (62) class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .

    $end            reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    ECHO            reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VARIABLE        reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    VAR             reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    CLASS           reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FUNCTION        reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    WHILE           reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    IF              reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    INTEGER         reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    FLOAT           reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PUBLIC          reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PROTECTED       reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    PRIVATE         reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)
    RBRACE          reduce using rule 62 (class_declaration -> CLASS IDENTIFIER LBRACE class_body RBRACE .)


state 115

    (21) class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .

    $end            reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    ECHO            reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    VARIABLE        reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    VAR             reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    CLASS           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    FUNCTION        reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    WHILE           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    IF              reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    INTEGER         reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    FLOAT           reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    PUBLIC          reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    PROTECTED       reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    PRIVATE         reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)
    RBRACE          reduce using rule 21 (class_statement -> CLASS IDENTIFIER LBRACE class_member_list RBRACE .)


state 116

    (64) class_member_list -> class_member class_member_list .

    RBRACE          reduce using rule 64 (class_member_list -> class_member class_member_list .)


state 117

    (70) method_declaration -> visibility FUNCTION . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (71) constructor_declaration -> visibility FUNCTION . CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE

    IDENTIFIER      shift and go to state 132
    CONSTRUCT       shift and go to state 133


state 118

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 134


state 119

    (81) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt . LBRACE statements RBRACE

    LBRACE          shift and go to state 135


state 120

    (82) use_clause_opt -> USE . LPAREN variables RPAREN

    LPAREN          shift and go to state 136


state 121

    (44) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . expression SEMI
    (45) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW . function_arrow
    (59) expression -> . value operator value
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    FUNCTION        shift and go to state 137
    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    expression                     shift and go to state 138
    function_arrow                 shift and go to state 139
    value                          shift and go to state 19

state 122

    (75) parameters -> parameter COMMA parameters .

    RPAREN          reduce using rule 75 (parameters -> parameter COMMA parameters .)


state 123

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 140
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 124

    (23) while -> WHILE LPAREN expression RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    expression                     shift and go to state 5
    statements                     shift and go to state 142
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 125

    (34) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE SEMI
    (36) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE elseif
    (37) if -> IF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 143
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 126

    (40) conditions -> LBRACE condition RBRACE . logical_operator conditions
    (41) conditions -> LBRACE condition RBRACE .
    (85) logical_operator -> . AND
    (86) logical_operator -> . OR

    RPAREN          reduce using rule 41 (conditions -> LBRACE condition RBRACE .)
    AND             shift and go to state 145
    OR              shift and go to state 146

    logical_operator               shift and go to state 144

state 127

    (35) if -> IF LPAREN conditions RPAREN LBRACE . statements RBRACE SEMI
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 147
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 128

    (29) array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .

    SEMI            reduce using rule 29 (array_declaration -> VARIABLE SET ARRAY LPAREN arrayArg RPAREN .)


state 129

    (30) array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .

    SEMI            reduce using rule 30 (array_declaration -> VARIABLE SET ARRAY LPAREN empty RPAREN .)


state 130

    (31) arrayArg -> index ARROW . value
    (32) arrayArg -> index ARROW . value arrayArg
    (33) arrayArg -> index ARROW . value COMMA arrayArg
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    value                          shift and go to state 148

state 131

    (28) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN . RPAREN SEMI

    RPAREN          shift and go to state 149


state 132

    (70) method_declaration -> visibility FUNCTION IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 150


state 133

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT . LPAREN parameters RPAREN LBRACE statements RBRACE

    LPAREN          shift and go to state 151


state 134

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 152
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 135

    (81) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 153
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 136

    (82) use_clause_opt -> USE LPAREN . variables RPAREN
    (83) variables -> . VARIABLE COMMA variables
    (84) variables -> . VARIABLE

    VARIABLE        shift and go to state 155

    variables                      shift and go to state 154

state 137

    (44) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> FUNCTION . LPAREN VARIABLE RPAREN ARROW function_arrow

    LPAREN          shift and go to state 156


state 138

    (44) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression . SEMI

    SEMI            shift and go to state 157


state 139

    (45) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .

    $end            reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    ECHO            reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VARIABLE        reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    VAR             reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    CLASS           reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FUNCTION        reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    WHILE           reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    IF              reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    INTEGER         reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    FLOAT           reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PUBLIC          reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PROTECTED       reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    PRIVATE         reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)
    RBRACE          reduce using rule 45 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow .)


state 140

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 158


state 141

    (16) statements -> statement . statements
    (17) statements -> statement .
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    RBRACE          reduce using rule 17 (statements -> statement .)
    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statement                      shift and go to state 141
    statements                     shift and go to state 159
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 142

    (23) while -> WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 160


state 143

    (34) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE SEMI
    (36) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE elseif
    (37) if -> IF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 161


state 144

    (40) conditions -> LBRACE condition RBRACE logical_operator . conditions
    (40) conditions -> . LBRACE condition RBRACE logical_operator conditions
    (41) conditions -> . LBRACE condition RBRACE

    LBRACE          shift and go to state 73

    conditions                     shift and go to state 162

state 145

    (85) logical_operator -> AND .

    LBRACE          reduce using rule 85 (logical_operator -> AND .)


state 146

    (86) logical_operator -> OR .

    LBRACE          reduce using rule 86 (logical_operator -> OR .)


state 147

    (35) if -> IF LPAREN conditions RPAREN LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 163


state 148

    (31) arrayArg -> index ARROW value .
    (32) arrayArg -> index ARROW value . arrayArg
    (33) arrayArg -> index ARROW value . COMMA arrayArg
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (42) index -> . INTEGER
    (43) index -> . STRING

    RPAREN          reduce using rule 31 (arrayArg -> index ARROW value .)
    COMMA           shift and go to state 165
    INTEGER         shift and go to state 111
    STRING          shift and go to state 112

    index                          shift and go to state 110
    arrayArg                       shift and go to state 164

state 149

    (28) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN . SEMI

    SEMI            shift and go to state 166


state 150

    (70) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    (75) parameters -> . parameter COMMA parameters
    (76) parameters -> . parameter
    (77) parameter -> . TYPE VARIABLE
    (78) parameter -> . VARIABLE

    TYPE            shift and go to state 69
    VARIABLE        shift and go to state 96

    parameters                     shift and go to state 167
    parameter                      shift and go to state 68

state 151

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN . parameters RPAREN LBRACE statements RBRACE
    (75) parameters -> . parameter COMMA parameters
    (76) parameters -> . parameter
    (77) parameter -> . TYPE VARIABLE
    (78) parameter -> . VARIABLE

    TYPE            shift and go to state 69
    VARIABLE        shift and go to state 96

    parameters                     shift and go to state 168
    parameter                      shift and go to state 68

state 152

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 169


state 153

    (81) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements . RBRACE

    RBRACE          shift and go to state 170


state 154

    (82) use_clause_opt -> USE LPAREN variables . RPAREN

    RPAREN          shift and go to state 171


state 155

    (83) variables -> VARIABLE . COMMA variables
    (84) variables -> VARIABLE .

    COMMA           shift and go to state 172
    RPAREN          reduce using rule 84 (variables -> VARIABLE .)


state 156

    (44) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> FUNCTION LPAREN . VARIABLE RPAREN ARROW function_arrow

    VARIABLE        shift and go to state 173


state 157

    (44) function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .

    $end            reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    ECHO            reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VARIABLE        reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    VAR             reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    CLASS           reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FUNCTION        reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    WHILE           reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    IF              reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    INTEGER         reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    FLOAT           reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PUBLIC          reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PROTECTED       reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    PRIVATE         reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)
    RBRACE          reduce using rule 44 (function_arrow -> FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI .)


state 158

    (24) function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 24 (function_variable -> FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE .)


state 159

    (16) statements -> statement statements .

    RBRACE          reduce using rule 16 (statements -> statement statements .)


state 160

    (23) while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 23 (while -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE .)


state 161

    (34) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . SEMI
    (36) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . elseif
    (37) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (79) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE
    (80) elseif -> . ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else
    (38) else -> . ELSE LBRACE statements RBRACE SEMI

    SEMI            shift and go to state 174
    ELSEIF          shift and go to state 177
    ELSE            shift and go to state 178

    elseif                         shift and go to state 175
    else                           shift and go to state 176

state 162

    (40) conditions -> LBRACE condition RBRACE logical_operator conditions .

    RPAREN          reduce using rule 40 (conditions -> LBRACE condition RBRACE logical_operator conditions .)


state 163

    (35) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 179


state 164

    (32) arrayArg -> index ARROW value arrayArg .

    RPAREN          reduce using rule 32 (arrayArg -> index ARROW value arrayArg .)


state 165

    (33) arrayArg -> index ARROW value COMMA . arrayArg
    (31) arrayArg -> . index ARROW value
    (32) arrayArg -> . index ARROW value arrayArg
    (33) arrayArg -> . index ARROW value COMMA arrayArg
    (42) index -> . INTEGER
    (43) index -> . STRING

    INTEGER         shift and go to state 111
    STRING          shift and go to state 112

    index                          shift and go to state 110
    arrayArg                       shift and go to state 180

state 166

    (28) object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .

    $end            reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    ECHO            reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VARIABLE        reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    VAR             reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    CLASS           reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FUNCTION        reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    WHILE           reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    IF              reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    INTEGER         reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    FLOAT           reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PUBLIC          reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PROTECTED       reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    PRIVATE         reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)
    RBRACE          reduce using rule 28 (object_declaration -> VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI .)


state 167

    (70) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 181


state 168

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN          shift and go to state 182


state 169

    (22) function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $end            reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 22 (function_statement -> FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 170

    (81) function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .

    $end            reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    ECHO            reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    VAR             reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    CLASS           reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    WHILE           reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    IF              reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    INTEGER         reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    FLOAT           reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)
    RBRACE          reduce using rule 81 (function_anonymous -> FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE .)


state 171

    (82) use_clause_opt -> USE LPAREN variables RPAREN .

    LBRACE          reduce using rule 82 (use_clause_opt -> USE LPAREN variables RPAREN .)


state 172

    (83) variables -> VARIABLE COMMA . variables
    (83) variables -> . VARIABLE COMMA variables
    (84) variables -> . VARIABLE

    VARIABLE        shift and go to state 155

    variables                      shift and go to state 183

state 173

    (44) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW expression SEMI
    (45) function_arrow -> FUNCTION LPAREN VARIABLE . RPAREN ARROW function_arrow

    RPAREN          shift and go to state 98


state 174

    (34) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 34 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI .)


state 175

    (36) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .

    $end            reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    ECHO            reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VARIABLE        reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    VAR             reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    CLASS           reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FUNCTION        reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    WHILE           reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    IF              reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    INTEGER         reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    FLOAT           reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PUBLIC          reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PROTECTED       reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    PRIVATE         reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)
    RBRACE          reduce using rule 36 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE elseif .)


state 176

    (37) if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 37 (if -> IF LPAREN condition RPAREN LBRACE statements RBRACE else .)


state 177

    (79) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE
    (80) elseif -> ELSEIF . LPAREN condition RPAREN LBRACE statements RBRACE else

    LPAREN          shift and go to state 184


state 178

    (38) else -> ELSE . LBRACE statements RBRACE SEMI

    LBRACE          shift and go to state 185


state 179

    (35) if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .

    $end            reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 35 (if -> IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI .)


state 180

    (33) arrayArg -> index ARROW value COMMA arrayArg .

    RPAREN          reduce using rule 33 (arrayArg -> index ARROW value COMMA arrayArg .)


state 181

    (70) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 186


state 182

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE          shift and go to state 187


state 183

    (83) variables -> VARIABLE COMMA variables .

    RPAREN          reduce using rule 83 (variables -> VARIABLE COMMA variables .)


state 184

    (79) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE
    (80) elseif -> ELSEIF LPAREN . condition RPAREN LBRACE statements RBRACE else
    (39) condition -> . expression comparison_operator expression
    (59) expression -> . value operator value
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT

    VARIABLE        shift and go to state 40
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27

    condition                      shift and go to state 188
    expression                     shift and go to state 75
    value                          shift and go to state 19

state 185

    (38) else -> ELSE LBRACE . statements RBRACE SEMI
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 189
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 186

    (70) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    visibility                     shift and go to state 22
    statements                     shift and go to state 190
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19

state 187

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE . statements RBRACE
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    visibility                     shift and go to state 22
    statements                     shift and go to state 191
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19

state 188

    (79) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE
    (80) elseif -> ELSEIF LPAREN condition . RPAREN LBRACE statements RBRACE else

    RPAREN          shift and go to state 192


state 189

    (38) else -> ELSE LBRACE statements . RBRACE SEMI

    RBRACE          shift and go to state 193


state 190

    (70) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 194


state 191

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE          shift and go to state 195


state 192

    (79) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE
    (80) elseif -> ELSEIF LPAREN condition RPAREN . LBRACE statements RBRACE else

    LBRACE          shift and go to state 196


state 193

    (38) else -> ELSE LBRACE statements RBRACE . SEMI

    SEMI            shift and go to state 197


state 194

    (70) method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 70 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 70 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 70 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 70 (method_declaration -> visibility FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 195

    (71) constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .

    PUBLIC          reduce using rule 71 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 71 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 71 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 71 (constructor_declaration -> visibility FUNCTION CONSTRUCT LPAREN parameters RPAREN LBRACE statements RBRACE .)


state 196

    (79) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE
    (80) elseif -> ELSEIF LPAREN condition RPAREN LBRACE . statements RBRACE else
    (16) statements -> . statement statements
    (17) statements -> . statement
    (1) statement -> . print SEMI
    (2) statement -> . declaration SEMI
    (3) statement -> . input SEMI
    (4) statement -> . expression SEMI
    (5) statement -> . object_declaration
    (6) statement -> . class_declaration
    (7) statement -> . array_declaration SEMI
    (8) statement -> . property_declaration SEMI
    (9) statement -> . function_statement
    (10) statement -> . function_variable
    (11) statement -> . function_anonymous
    (12) statement -> . function_arrow
    (13) statement -> . class_statement
    (14) statement -> . while
    (15) statement -> . if
    (25) print -> . ECHO LPAREN expressions RPAREN
    (26) print -> . ECHO expressions
    (18) declaration -> . VARIABLE SET value
    (19) declaration -> . VARIABLE SET expression
    (20) declaration -> . VARIABLE SET condition
    (27) input -> . VARIABLE SET READLINE LPAREN RPAREN
    (59) expression -> . value operator value
    (28) object_declaration -> . VAR VARIABLE SET NEW CLASS LPAREN RPAREN SEMI
    (62) class_declaration -> . CLASS IDENTIFIER LBRACE class_body RBRACE
    (29) array_declaration -> . VARIABLE SET ARRAY LPAREN arrayArg RPAREN
    (30) array_declaration -> . VARIABLE SET ARRAY LPAREN empty RPAREN
    (69) property_declaration -> . visibility VARIABLE
    (22) function_statement -> . FUNCTION IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    (24) function_variable -> . FUNCTION VARIABLE LPAREN RPAREN LBRACE statements RBRACE
    (81) function_anonymous -> . FUNCTION LPAREN parameters RPAREN use_clause_opt LBRACE statements RBRACE
    (44) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW expression SEMI
    (45) function_arrow -> . FUNCTION LPAREN VARIABLE RPAREN ARROW function_arrow
    (21) class_statement -> . CLASS IDENTIFIER LBRACE class_member_list RBRACE
    (23) while -> . WHILE LPAREN expression RPAREN LBRACE statements RBRACE
    (34) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE SEMI
    (35) if -> . IF LPAREN conditions RPAREN LBRACE statements RBRACE SEMI
    (36) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE elseif
    (37) if -> . IF LPAREN condition RPAREN LBRACE statements RBRACE else
    (52) value -> . VARIABLE
    (53) value -> . INTEGER
    (54) value -> . FLOAT
    (72) visibility -> . PUBLIC
    (73) visibility -> . PROTECTED
    (74) visibility -> . PRIVATE

    ECHO            shift and go to state 17
    VARIABLE        shift and go to state 18
    VAR             shift and go to state 20
    CLASS           shift and go to state 21
    FUNCTION        shift and go to state 23
    WHILE           shift and go to state 24
    IF              shift and go to state 25
    INTEGER         shift and go to state 26
    FLOAT           shift and go to state 27
    PUBLIC          shift and go to state 28
    PROTECTED       shift and go to state 29
    PRIVATE         shift and go to state 30

    statements                     shift and go to state 198
    statement                      shift and go to state 141
    print                          shift and go to state 2
    declaration                    shift and go to state 3
    input                          shift and go to state 4
    expression                     shift and go to state 5
    object_declaration             shift and go to state 6
    class_declaration              shift and go to state 7
    array_declaration              shift and go to state 8
    property_declaration           shift and go to state 9
    function_statement             shift and go to state 10
    function_variable              shift and go to state 11
    function_anonymous             shift and go to state 12
    function_arrow                 shift and go to state 13
    class_statement                shift and go to state 14
    while                          shift and go to state 15
    if                             shift and go to state 16
    value                          shift and go to state 19
    visibility                     shift and go to state 22

state 197

    (38) else -> ELSE LBRACE statements RBRACE SEMI .

    $end            reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    ECHO            reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VARIABLE        reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    VAR             reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    CLASS           reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FUNCTION        reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    WHILE           reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    IF              reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    INTEGER         reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    FLOAT           reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PUBLIC          reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PROTECTED       reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    PRIVATE         reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)
    RBRACE          reduce using rule 38 (else -> ELSE LBRACE statements RBRACE SEMI .)


state 198

    (79) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE
    (80) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements . RBRACE else

    RBRACE          shift and go to state 199


state 199

    (79) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .
    (80) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE . else
    (38) else -> . ELSE LBRACE statements RBRACE SEMI

    $end            reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ECHO            reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    VARIABLE        reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    VAR             reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    CLASS           reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FUNCTION        reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    WHILE           reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    IF              reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    INTEGER         reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    FLOAT           reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PUBLIC          reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PROTECTED       reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    PRIVATE         reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    RBRACE          reduce using rule 79 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE .)
    ELSE            shift and go to state 178

    else                           shift and go to state 200

state 200

    (80) elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .

    $end            reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    ECHO            reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VARIABLE        reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    VAR             reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    CLASS           reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FUNCTION        reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    WHILE           reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    IF              reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    INTEGER         reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    FLOAT           reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PUBLIC          reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PROTECTED       reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    PRIVATE         reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)
    RBRACE          reduce using rule 80 (elseif -> ELSEIF LPAREN condition RPAREN LBRACE statements RBRACE else .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RPAREN in state 67 resolved as shift
WARNING: shift/reduce conflict for RBRACE in state 89 resolved as shift
